
reto_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c404  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db0  0800c518  0800c518  0000d518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c8  0800d2c8  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2c8  0800d2c8  0000e2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d0  0800d2d0  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d0  0800d2d0  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2d4  0800d2d4  0000e2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800d2d8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004720  200001e8  0800d4c0  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004908  0800d4c0  0000f908  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f5e  00000000  00000000  0000f211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003965  00000000  00000000  0002616f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb2  00000000  00000000  0002af38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6ca  00000000  00000000  0002beea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177f9  00000000  00000000  000475b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b957  00000000  00000000  0005edad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a44  00000000  00000000  000fa748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010118c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c4fc 	.word	0x0800c4fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c4fc 	.word	0x0800c4fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b092      	sub	sp, #72	@ 0x48
 8001120:	af00      	add	r7, sp, #0
 8001122:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001126:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800112a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001134:	f7ff fc4c 	bl	80009d0 <__aeabi_dcmple>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d020      	beq.n	8001180 <look2_binlxpw+0x64>
    iLeft = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800114c:	f7ff f80c 	bl	8000168 <__aeabi_dsub>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4614      	mov	r4, r2
 8001156:	461d      	mov	r5, r3
 8001158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800115a:	3308      	adds	r3, #8
 800115c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7fe ffff 	bl	8000168 <__aeabi_dsub>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff fadb 	bl	800072c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800117e:	e08e      	b.n	800129e <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8001180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001188:	4413      	add	r3, r2
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001192:	f7ff fc13 	bl	80009bc <__aeabi_dcmplt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d04d      	beq.n	8001238 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 800119c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    iLeft = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
    iRght = maxIndex[0U];
 80011a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (iRght - iLeft > 1U) {
 80011ae:	e016      	b.n	80011de <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80011b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011b6:	4413      	add	r3, r2
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c0:	f7ff fbfc 	bl	80009bc <__aeabi_dcmplt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 80011ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011ce:	e001      	b.n	80011d4 <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 80011d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80011d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d8:	4413      	add	r3, r2
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (iRght - iLeft > 1U) {
 80011de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d8e3      	bhi.n	80011b0 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80011e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011ee:	4413      	add	r3, r2
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4614      	mov	r4, r2
 8001202:	461d      	mov	r5, r3
 8001204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001206:	3301      	adds	r3, #1
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800120c:	4413      	add	r3, r2
 800120e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001218:	4413      	add	r3, r2
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7fe ffa3 	bl	8000168 <__aeabi_dsub>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff fa7f 	bl	800072c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001236:	e032      	b.n	800129e <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8001238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8001240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001248:	3b01      	subs	r3, #1
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800124e:	4413      	add	r3, r2
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001258:	f7fe ff86 	bl	8000168 <__aeabi_dsub>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800126c:	4413      	add	r3, r2
 800126e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001272:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800127a:	3b01      	subs	r3, #1
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001280:	4413      	add	r3, r2
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7fe ff6f 	bl	8000168 <__aeabi_dsub>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff fa4b 	bl	800072c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 800129e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80012a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80012a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a8:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80012aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b4:	f7ff fb8c 	bl	80009d0 <__aeabi_dcmple>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d020      	beq.n	8001300 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80012c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012cc:	f7fe ff4c 	bl	8000168 <__aeabi_dsub>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	461d      	mov	r5, r3
 80012d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012da:	3308      	adds	r3, #8
 80012dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7fe ff3f 	bl	8000168 <__aeabi_dsub>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7ff fa1b 	bl	800072c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80012fe:	e095      	b.n	800142c <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800130a:	4413      	add	r3, r2
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001314:	f7ff fb52 	bl	80009bc <__aeabi_dcmplt>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d04f      	beq.n	80013be <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 800131e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001320:	3304      	adds	r3, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
    iLeft = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
    iRght = maxIndex[1U];
 800132c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (iRght - iLeft > 1U) {
 8001334:	e016      	b.n	8001364 <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 8001336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800133c:	4413      	add	r3, r2
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001346:	f7ff fb39 	bl	80009bc <__aeabi_dcmplt>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8001350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001354:	e001      	b.n	800135a <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 8001356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001358:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800135a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800135c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800135e:	4413      	add	r3, r2
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (iRght - iLeft > 1U) {
 8001364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d8e3      	bhi.n	8001336 <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 800136e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001374:	4413      	add	r3, r2
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800137e:	f7fe fef3 	bl	8000168 <__aeabi_dsub>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4614      	mov	r4, r2
 8001388:	461d      	mov	r5, r3
 800138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138c:	3301      	adds	r3, #1
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001392:	4413      	add	r3, r2
 8001394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800139e:	4413      	add	r3, r2
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe fee0 	bl	8000168 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4620      	mov	r0, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	f7ff f9bc 	bl	800072c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80013bc:	e036      	b.n	800142c <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80013be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013c0:	3304      	adds	r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80013c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013ca:	3304      	adds	r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80013d2:	3b01      	subs	r3, #1
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80013d8:	4413      	add	r3, r2
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013e2:	f7fe fec1 	bl	8000168 <__aeabi_dsub>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4614      	mov	r4, r2
 80013ec:	461d      	mov	r5, r3
 80013ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013f0:	3304      	adds	r3, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80013f8:	4413      	add	r3, r2
 80013fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001400:	3304      	adds	r3, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001408:	3b01      	subs	r3, #1
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800140e:	4413      	add	r3, r2
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7fe fea8 	bl	8000168 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4620      	mov	r0, r4
 800141e:	4629      	mov	r1, r5
 8001420:	f7ff f984 	bl	800072c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 800142c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800142e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001430:	fb03 f202 	mul.w	r2, r3, r2
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	4413      	add	r3, r2
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 800143a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800143c:	3301      	adds	r3, #1
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001442:	4413      	add	r3, r2
 8001444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800144e:	4413      	add	r3, r2
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7fe fe88 	bl	8000168 <__aeabi_dsub>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001464:	f7ff f838 	bl	80004d8 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001476:	4413      	add	r3, r2
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7fe fe76 	bl	800016c <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  bpIdx += stride;
 8001488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800148a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800148c:	4413      	add	r3, r2
 800148e:	63bb      	str	r3, [r7, #56]	@ 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 8001490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001492:	3301      	adds	r3, #1
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001498:	4413      	add	r3, r2
 800149a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014a4:	4413      	add	r3, r2
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7fe fe5d 	bl	8000168 <__aeabi_dsub>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ba:	f7ff f80d 	bl	80004d8 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014cc:	4413      	add	r3, r2
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fe4b 	bl	800016c <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80014e2:	f7fe fe41 	bl	8000168 <__aeabi_dsub>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 80014ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80014f2:	f7fe fff1 	bl	80004d8 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001502:	f7fe fe33 	bl	800016c <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
}
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	3748      	adds	r7, #72	@ 0x48
 8001510:	46bd      	mov	sp, r7
 8001512:	bdb0      	pop	{r4, r5, r7, pc}

08001514 <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800152c:	f7ff fa50 	bl	80009d0 <__aeabi_dcmple>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d020      	beq.n	8001578 <look1_binlxpw+0x64>
    iLeft = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001544:	f7fe fe10 	bl	8000168 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3308      	adds	r3, #8
 8001554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe fe03 	bl	8000168 <__aeabi_dsub>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4620      	mov	r0, r4
 8001568:	4629      	mov	r1, r5
 800156a:	f7ff f8df 	bl	800072c <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001576:	e087      	b.n	8001688 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 8001578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001588:	f7ff fa18 	bl	80009bc <__aeabi_dcmplt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d04b      	beq.n	800162a <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8001592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 800159c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800159e:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80015a0:	e016      	b.n	80015d0 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b2:	f7ff fa03 	bl	80009bc <__aeabi_dcmplt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <look1_binlxpw+0xae>
        iRght = bpIdx;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	e001      	b.n	80015c6 <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	4413      	add	r3, r2
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d8e3      	bhi.n	80015a2 <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ea:	f7fe fdbd 	bl	8000168 <__aeabi_dsub>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4614      	mov	r4, r2
 80015f4:	461d      	mov	r5, r3
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	3301      	adds	r3, #1
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7fe fdaa 	bl	8000168 <__aeabi_dsub>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7ff f886 	bl	800072c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001628:	e02e      	b.n	8001688 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 800162a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800162c:	3b01      	subs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001632:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001636:	3b01      	subs	r3, #1
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001646:	f7fe fd8f 	bl	8000168 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001660:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001664:	3b01      	subs	r3, #1
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe fd7a 	bl	8000168 <__aeabi_dsub>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7ff f856 	bl	800072c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	3301      	adds	r3, #1
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	4413      	add	r3, r2
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe fd61 	bl	8000168 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016b2:	f7fe ff11 	bl	80004d8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe fd4f 	bl	800016c <__adddf3>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
}
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdb0      	pop	{r4, r5, r7, pc}

080016dc <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 80016e4:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <EngTrModel_gear_state+0xf8>)
 80016e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016ea:	3b01      	subs	r3, #1
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d86c      	bhi.n	80017ca <EngTrModel_gear_state+0xee>
 80016f0:	a201      	add	r2, pc, #4	@ (adr r2, 80016f8 <EngTrModel_gear_state+0x1c>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001709 	.word	0x08001709
 80016fc:	08001729 	.word	0x08001729
 8001700:	08001747 	.word	0x08001747
 8001704:	08001781 	.word	0x08001781
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d155      	bne.n	80017bc <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <EngTrModel_gear_state+0xf8>)
 8001712:	2203      	movs	r2, #3
 8001714:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 2.0;
 8001718:	492f      	ldr	r1, [pc, #188]	@ (80017d8 <EngTrModel_gear_state+0xfc>)
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001722:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
    break;
 8001726:	e049      	b.n	80017bc <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d147      	bne.n	80017c0 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <EngTrModel_gear_state+0xf8>)
 8001732:	2204      	movs	r2, #4
 8001734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 3.0;
 8001738:	4927      	ldr	r1, [pc, #156]	@ (80017d8 <EngTrModel_gear_state+0xfc>)
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <EngTrModel_gear_state+0x100>)
 8001740:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
    break;
 8001744:	e03c      	b.n	80017c0 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <EngTrModel_gear_state+0x8c>
 800174e:	2b01      	cmp	r3, #1
 8001750:	d138      	bne.n	80017c4 <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <EngTrModel_gear_state+0xf8>)
 8001754:	2204      	movs	r2, #4
 8001756:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 3.0;
 800175a:	491f      	ldr	r1, [pc, #124]	@ (80017d8 <EngTrModel_gear_state+0xfc>)
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <EngTrModel_gear_state+0x100>)
 8001762:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 8001766:	e00a      	b.n	800177e <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001768:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <EngTrModel_gear_state+0xf8>)
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 1.0;
 8001770:	4919      	ldr	r1, [pc, #100]	@ (80017d8 <EngTrModel_gear_state+0xfc>)
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <EngTrModel_gear_state+0x104>)
 8001778:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 800177c:	bf00      	nop
    }
    break;
 800177e:	e021      	b.n	80017c4 <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00c      	beq.n	80017a2 <EngTrModel_gear_state+0xc6>
 8001788:	2b01      	cmp	r3, #1
 800178a:	d11d      	bne.n	80017c8 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <EngTrModel_gear_state+0xf8>)
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 4.0;
 8001794:	4910      	ldr	r1, [pc, #64]	@ (80017d8 <EngTrModel_gear_state+0xfc>)
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <EngTrModel_gear_state+0x108>)
 800179c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 80017a0:	e00b      	b.n	80017ba <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <EngTrModel_gear_state+0xf8>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      EngTrModel_B.Gear = 2.0;
 80017aa:	490b      	ldr	r1, [pc, #44]	@ (80017d8 <EngTrModel_gear_state+0xfc>)
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      break;
 80017b8:	bf00      	nop
    }
    break;
 80017ba:	e005      	b.n	80017c8 <EngTrModel_gear_state+0xec>
    break;
 80017bc:	bf00      	nop
 80017be:	e004      	b.n	80017ca <EngTrModel_gear_state+0xee>
    break;
 80017c0:	bf00      	nop
 80017c2:	e002      	b.n	80017ca <EngTrModel_gear_state+0xee>
    break;
 80017c4:	bf00      	nop
 80017c6:	e000      	b.n	80017ca <EngTrModel_gear_state+0xee>
    break;
 80017c8:	bf00      	nop
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000238 	.word	0x20000238
 80017d8:	20000208 	.word	0x20000208
 80017dc:	40080000 	.word	0x40080000
 80017e0:	3ff00000 	.word	0x3ff00000
 80017e4:	40100000 	.word	0x40100000

080017e8 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b08c      	sub	sp, #48	@ 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80017f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017fa:	f001 feb7 	bl	800356c <rtIsNaN>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d106      	bne.n	8001812 <rt_powd_snf+0x2a>
 8001804:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001808:	f001 feb0 	bl	800356c <rtIsNaN>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <rt_powd_snf+0x36>
    y = (rtNaN);
 8001812:	4b7e      	ldr	r3, [pc, #504]	@ (8001a0c <rt_powd_snf+0x224>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800181c:	e0ef      	b.n	80019fe <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800182e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 8001832:	68bc      	ldr	r4, [r7, #8]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800183a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800183e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001842:	f001 fe6f 	bl	8003524 <rtIsInf>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d049      	beq.n	80018e0 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b6f      	ldr	r3, [pc, #444]	@ (8001a10 <rt_powd_snf+0x228>)
 8001852:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001856:	f7ff f8a7 	bl	80009a8 <__aeabi_dcmpeq>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <rt_powd_snf+0x84>
        y = 1.0;
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b6a      	ldr	r3, [pc, #424]	@ (8001a10 <rt_powd_snf+0x228>)
 8001866:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800186a:	e0c8      	b.n	80019fe <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b67      	ldr	r3, [pc, #412]	@ (8001a10 <rt_powd_snf+0x228>)
 8001872:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001876:	f7ff f8bf 	bl	80009f8 <__aeabi_dcmpgt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d017      	beq.n	80018b0 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800188c:	f7ff f8b4 	bl	80009f8 <__aeabi_dcmpgt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <rt_powd_snf+0xba>
          y = (rtInf);
 8001896:	4b5f      	ldr	r3, [pc, #380]	@ (8001a14 <rt_powd_snf+0x22c>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018a0:	e0ad      	b.n	80019fe <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018ae:	e0a6      	b.n	80019fe <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018bc:	f7ff f89c 	bl	80009f8 <__aeabi_dcmpgt>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <rt_powd_snf+0xec>
        y = 0.0;
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018d2:	e094      	b.n	80019fe <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 80018d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a14 <rt_powd_snf+0x22c>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80018de:	e08e      	b.n	80019fe <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018ec:	f7ff f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <rt_powd_snf+0x11a>
      y = 1.0;
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b45      	ldr	r3, [pc, #276]	@ (8001a10 <rt_powd_snf+0x228>)
 80018fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001900:	e07d      	b.n	80019fe <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <rt_powd_snf+0x228>)
 8001908:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800190c:	f7ff f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01b      	beq.n	800194e <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001922:	f7ff f869 	bl	80009f8 <__aeabi_dcmpgt>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <rt_powd_snf+0x14e>
        y = u0;
 800192c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001930:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001934:	e063      	b.n	80019fe <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8001936:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	4934      	ldr	r1, [pc, #208]	@ (8001a10 <rt_powd_snf+0x228>)
 8001940:	f7fe fef4 	bl	800072c <__aeabi_ddiv>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800194c:	e057      	b.n	80019fe <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800195a:	f7ff f825 	bl	80009a8 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <rt_powd_snf+0x192>
      y = u0 * u0;
 8001964:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001968:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800196c:	f7fe fdb4 	bl	80004d8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001978:	e041      	b.n	80019fe <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <rt_powd_snf+0x230>)
 8001980:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001984:	f7ff f810 	bl	80009a8 <__aeabi_dcmpeq>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d011      	beq.n	80019b2 <rt_powd_snf+0x1ca>
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800199a:	f7ff f823 	bl	80009e4 <__aeabi_dcmpge>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 80019a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a8:	f009 fdfc 	bl	800b5a4 <sqrt>
 80019ac:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80019b0:	e025      	b.n	80019fe <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fffd 	bl	80009bc <__aeabi_dcmplt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d012      	beq.n	80019ee <rt_powd_snf+0x206>
 80019c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019cc:	f009 ff4c 	bl	800b868 <floor>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d8:	f7ff f80e 	bl	80009f8 <__aeabi_dcmpgt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <rt_powd_snf+0x206>
      y = (rtNaN);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <rt_powd_snf+0x224>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80019ec:	e007      	b.n	80019fe <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 80019ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019f6:	f009 fd6d 	bl	800b4d4 <pow>
 80019fa:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    }
  }

  return y;
 80019fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	3730      	adds	r7, #48	@ 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0c:	20000608 	.word	0x20000608
 8001a10:	3ff00000 	.word	0x3ff00000
 8001a14:	200005f8 	.word	0x200005f8
 8001a18:	3fe00000 	.word	0x3fe00000
 8001a1c:	00000000 	.word	0x00000000

08001a20 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 8001a26:	4b8c      	ldr	r3, [pc, #560]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	498b      	ldr	r1, [pc, #556]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001a2e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 8001a32:	4b8a      	ldr	r3, [pc, #552]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	4989      	ldr	r1, [pc, #548]	@ (8001c60 <EngTrModel_step+0x240>)
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001a3e:	4b86      	ldr	r3, [pc, #536]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001a44:	a380      	add	r3, pc, #512	@ (adr r3, 8001c48 <EngTrModel_step+0x228>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fd45 	bl	80004d8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001a56:	a37e      	add	r3, pc, #504	@ (adr r3, 8001c50 <EngTrModel_step+0x230>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fd3c 	bl	80004d8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 8001a64:	497d      	ldr	r1, [pc, #500]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001a66:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001a70:	4b79      	ldr	r3, [pc, #484]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d004      	beq.n	8001a84 <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 8001a7a:	4b77      	ldr	r3, [pc, #476]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a75      	ldr	r2, [pc, #468]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a82:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 8001a84:	4b74      	ldr	r3, [pc, #464]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11a      	bne.n	8001ac4 <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 8001a8e:	4b72      	ldr	r3, [pc, #456]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 8001a96:	4b70      	ldr	r3, [pc, #448]	@ (8001c58 <EngTrModel_step+0x238>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c58 <EngTrModel_step+0x238>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    EngTrModel_B.Gear = 1.0;
 8001aa6:	496d      	ldr	r1, [pc, #436]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b6d      	ldr	r3, [pc, #436]	@ (8001c64 <EngTrModel_step+0x244>)
 8001aae:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 8001ab2:	4b69      	ldr	r3, [pc, #420]	@ (8001c58 <EngTrModel_step+0x238>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001aba:	4b67      	ldr	r3, [pc, #412]	@ (8001c58 <EngTrModel_step+0x238>)
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001ac2:	e0e4      	b.n	8001c8e <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001ac4:	4b64      	ldr	r3, [pc, #400]	@ (8001c58 <EngTrModel_step+0x238>)
 8001ac6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fe03 	bl	80016dc <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 8001ad6:	4b60      	ldr	r3, [pc, #384]	@ (8001c58 <EngTrModel_step+0x238>)
 8001ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80d6 	beq.w	8001c8e <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001ae2:	4b61      	ldr	r3, [pc, #388]	@ (8001c68 <EngTrModel_step+0x248>)
 8001ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001aea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001aee:	2406      	movs	r4, #6
 8001af0:	9404      	str	r4, [sp, #16]
 8001af2:	4c5e      	ldr	r4, [pc, #376]	@ (8001c6c <EngTrModel_step+0x24c>)
 8001af4:	9403      	str	r4, [sp, #12]
 8001af6:	4c5e      	ldr	r4, [pc, #376]	@ (8001c70 <EngTrModel_step+0x250>)
 8001af8:	9402      	str	r4, [sp, #8]
 8001afa:	4c5e      	ldr	r4, [pc, #376]	@ (8001c74 <EngTrModel_step+0x254>)
 8001afc:	9401      	str	r4, [sp, #4]
 8001afe:	4c5e      	ldr	r4, [pc, #376]	@ (8001c78 <EngTrModel_step+0x258>)
 8001b00:	9400      	str	r4, [sp, #0]
 8001b02:	f7ff fb0b 	bl	800111c <look2_binlxpw>
 8001b06:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001b0a:	4b57      	ldr	r3, [pc, #348]	@ (8001c68 <EngTrModel_step+0x248>)
 8001b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b10:	4b52      	ldr	r3, [pc, #328]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001b12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001b16:	2406      	movs	r4, #6
 8001b18:	9404      	str	r4, [sp, #16]
 8001b1a:	4c54      	ldr	r4, [pc, #336]	@ (8001c6c <EngTrModel_step+0x24c>)
 8001b1c:	9403      	str	r4, [sp, #12]
 8001b1e:	4c57      	ldr	r4, [pc, #348]	@ (8001c7c <EngTrModel_step+0x25c>)
 8001b20:	9402      	str	r4, [sp, #8]
 8001b22:	4c54      	ldr	r4, [pc, #336]	@ (8001c74 <EngTrModel_step+0x254>)
 8001b24:	9401      	str	r4, [sp, #4]
 8001b26:	4c56      	ldr	r4, [pc, #344]	@ (8001c80 <EngTrModel_step+0x260>)
 8001b28:	9400      	str	r4, [sp, #0]
 8001b2a:	f7ff faf7 	bl	800111c <look2_binlxpw>
 8001b2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001b32:	4b49      	ldr	r3, [pc, #292]	@ (8001c58 <EngTrModel_step+0x238>)
 8001b34:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d05a      	beq.n	8001bf2 <EngTrModel_step+0x1d2>
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	f300 80a6 	bgt.w	8001c8e <EngTrModel_step+0x26e>
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d002      	beq.n	8001b4c <EngTrModel_step+0x12c>
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d02e      	beq.n	8001ba8 <EngTrModel_step+0x188>
 8001b4a:	e0a0      	b.n	8001c8e <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b4c:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <EngTrModel_step+0x238>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d919      	bls.n	8001b88 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001b54:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001b56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b5e:	f7fe ff41 	bl	80009e4 <__aeabi_dcmpge>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00f      	beq.n	8001b88 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <EngTrModel_step+0x238>)
 8001b6e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fdaf 	bl	80016dc <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001b7e:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <EngTrModel_step+0x238>)
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001b86:	e082      	b.n	8001c8e <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001b88:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001b8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b92:	f7fe ff13 	bl	80009bc <__aeabi_dcmplt>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d100      	bne.n	8001b9e <EngTrModel_step+0x17e>
        break;
 8001b9c:	e077      	b.n	8001c8e <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <EngTrModel_step+0x238>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8001ba6:	e072      	b.n	8001c8e <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001baa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb2:	f7fe ff03 	bl	80009bc <__aeabi_dcmplt>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <EngTrModel_step+0x238>)
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <EngTrModel_step+0x238>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001bca:	e060      	b.n	8001c8e <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001bce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bd6:	f7fe ff0f 	bl	80009f8 <__aeabi_dcmpgt>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d100      	bne.n	8001be2 <EngTrModel_step+0x1c2>
        break;
 8001be0:	e055      	b.n	8001c8e <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <EngTrModel_step+0x238>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <EngTrModel_step+0x238>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
        break;
 8001bf0:	e04d      	b.n	8001c8e <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <EngTrModel_step+0x238>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d919      	bls.n	8001c2e <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001bfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001c00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c04:	f7fe fee4 	bl	80009d0 <__aeabi_dcmple>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00f      	beq.n	8001c2e <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <EngTrModel_step+0x238>)
 8001c14:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fd5c 	bl	80016dc <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <EngTrModel_step+0x238>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001c2c:	e02e      	b.n	8001c8c <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <EngTrModel_step+0x23c>)
 8001c30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c38:	f7fe fede 	bl	80009f8 <__aeabi_dcmpgt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d120      	bne.n	8001c84 <EngTrModel_step+0x264>
        break;
 8001c42:	e023      	b.n	8001c8c <EngTrModel_step+0x26c>
 8001c44:	f3af 8000 	nop.w
 8001c48:	54442d18 	.word	0x54442d18
 8001c4c:	401921fb 	.word	0x401921fb
 8001c50:	745d1746 	.word	0x745d1746
 8001c54:	3f8745d1 	.word	0x3f8745d1
 8001c58:	20000238 	.word	0x20000238
 8001c5c:	20000208 	.word	0x20000208
 8001c60:	20000270 	.word	0x20000270
 8001c64:	3ff00000 	.word	0x3ff00000
 8001c68:	20000260 	.word	0x20000260
 8001c6c:	0800ced8 	.word	0x0800ced8
 8001c70:	0800c6a8 	.word	0x0800c6a8
 8001c74:	0800c798 	.word	0x0800c798
 8001c78:	0800c768 	.word	0x0800c768
 8001c7c:	0800c7b8 	.word	0x0800c7b8
 8001c80:	0800c878 	.word	0x0800c878
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001c84:	4b84      	ldr	r3, [pc, #528]	@ (8001e98 <EngTrModel_step+0x478>)
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8001c8c:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001c8e:	4b83      	ldr	r3, [pc, #524]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001c90:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c94:	2303      	movs	r3, #3
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	4b81      	ldr	r3, [pc, #516]	@ (8001ea0 <EngTrModel_step+0x480>)
 8001c9a:	4a82      	ldr	r2, [pc, #520]	@ (8001ea4 <EngTrModel_step+0x484>)
 8001c9c:	f7ff fc3a 	bl	8001514 <look1_binlxpw>
 8001ca0:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001ca4:	4b7c      	ldr	r3, [pc, #496]	@ (8001e98 <EngTrModel_step+0x478>)
 8001ca6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001caa:	a375      	add	r3, pc, #468	@ (adr r3, 8001e80 <EngTrModel_step+0x460>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fc12 	bl	80004d8 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4978      	ldr	r1, [pc, #480]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001cba:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001cbe:	4b77      	ldr	r3, [pc, #476]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	f7fe fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d114      	bne.n	8001d00 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001cd6:	4b71      	ldr	r3, [pc, #452]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001cd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ce0:	f7fe fbfa 	bl	80004d8 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	4b6b      	ldr	r3, [pc, #428]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fd1b 	bl	800072c <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001cfe:	e005      	b.n	8001d0c <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001d0c:	4b63      	ldr	r3, [pc, #396]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001d0e:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001d12:	2314      	movs	r3, #20
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4b64      	ldr	r3, [pc, #400]	@ (8001ea8 <EngTrModel_step+0x488>)
 8001d18:	4a64      	ldr	r2, [pc, #400]	@ (8001eac <EngTrModel_step+0x48c>)
 8001d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d1e:	f7ff fbf9 	bl	8001514 <look1_binlxpw>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f7fe fcff 	bl	800072c <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d3e:	f7ff fd53 	bl	80017e8 <rt_powd_snf>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4955      	ldr	r1, [pc, #340]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001d48:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001d4c:	2314      	movs	r3, #20
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4b57      	ldr	r3, [pc, #348]	@ (8001eb0 <EngTrModel_step+0x490>)
 8001d52:	4a56      	ldr	r2, [pc, #344]	@ (8001eac <EngTrModel_step+0x48c>)
 8001d54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d58:	f7ff fbdc 	bl	8001514 <look1_binlxpw>
 8001d5c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001d60:	4b4e      	ldr	r3, [pc, #312]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001d62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d6a:	f7fe fbb5 	bl	80004d8 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d7a:	f7fe fbad 	bl	80004d8 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4946      	ldr	r1, [pc, #280]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001d84:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001d88:	4b44      	ldr	r3, [pc, #272]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001d8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d8e:	4949      	ldr	r1, [pc, #292]	@ (8001eb4 <EngTrModel_step+0x494>)
 8001d90:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001d94:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001d96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d9a:	4946      	ldr	r1, [pc, #280]	@ (8001eb4 <EngTrModel_step+0x494>)
 8001d9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001da0:	4b45      	ldr	r3, [pc, #276]	@ (8001eb8 <EngTrModel_step+0x498>)
 8001da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da6:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	240a      	movs	r4, #10
 8001dae:	9404      	str	r4, [sp, #16]
 8001db0:	4c42      	ldr	r4, [pc, #264]	@ (8001ebc <EngTrModel_step+0x49c>)
 8001db2:	9403      	str	r4, [sp, #12]
 8001db4:	4c42      	ldr	r4, [pc, #264]	@ (8001ec0 <EngTrModel_step+0x4a0>)
 8001db6:	9402      	str	r4, [sp, #8]
 8001db8:	4c42      	ldr	r4, [pc, #264]	@ (8001ec4 <EngTrModel_step+0x4a4>)
 8001dba:	9401      	str	r4, [sp, #4]
 8001dbc:	4c42      	ldr	r4, [pc, #264]	@ (8001ec8 <EngTrModel_step+0x4a8>)
 8001dbe:	9400      	str	r4, [sp, #0]
 8001dc0:	f7ff f9ac 	bl	800111c <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001dc4:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001dc6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001dca:	f7fe f9cd 	bl	8000168 <__aeabi_dsub>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001dd6:	a32c      	add	r3, pc, #176	@ (adr r3, 8001e88 <EngTrModel_step+0x468>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fb7c 	bl	80004d8 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	a329      	add	r3, pc, #164	@ (adr r3, 8001e90 <EngTrModel_step+0x470>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fb73 	bl	80004d8 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001dfa:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <EngTrModel_step+0x478>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe f9b4 	bl	800016c <__adddf3>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4923      	ldr	r1, [pc, #140]	@ (8001e98 <EngTrModel_step+0x478>)
 8001e0a:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001e10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	f7fe fdce 	bl	80009bc <__aeabi_dcmplt>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <EngTrModel_step+0x4ac>)
 8001e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001e30:	e055      	b.n	8001ede <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001e34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	f7fe fdda 	bl	80009f8 <__aeabi_dcmpgt>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <EngTrModel_step+0x4b0>)
 8001e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001e54:	e043      	b.n	8001ede <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <EngTrModel_step+0x47c>)
 8001e58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f7fe fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d032      	beq.n	8001ed4 <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001e7a:	e030      	b.n	8001ede <EngTrModel_step+0x4be>
 8001e7c:	f3af 8000 	nop.w
 8001e80:	3d70a3d7 	.word	0x3d70a3d7
 8001e84:	4009d70a 	.word	0x4009d70a
 8001e88:	0865b653 	.word	0x0865b653
 8001e8c:	4046bc6f 	.word	0x4046bc6f
 8001e90:	47ae147b 	.word	0x47ae147b
 8001e94:	3fa47ae1 	.word	0x3fa47ae1
 8001e98:	20000238 	.word	0x20000238
 8001e9c:	20000208 	.word	0x20000208
 8001ea0:	0800ccc0 	.word	0x0800ccc0
 8001ea4:	0800c798 	.word	0x0800c798
 8001ea8:	0800cce0 	.word	0x0800cce0
 8001eac:	0800cd88 	.word	0x0800cd88
 8001eb0:	0800ce30 	.word	0x0800ce30
 8001eb4:	20000270 	.word	0x20000270
 8001eb8:	20000260 	.word	0x20000260
 8001ebc:	0800cee0 	.word	0x0800cee0
 8001ec0:	0800c8a8 	.word	0x0800c8a8
 8001ec4:	0800cc68 	.word	0x0800cc68
 8001ec8:	0800cc18 	.word	0x0800cc18
 8001ecc:	bff00000 	.word	0xbff00000
 8001ed0:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc0 <EngTrModel_step+0x5a0>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001ede:	4b39      	ldr	r3, [pc, #228]	@ (8001fc4 <EngTrModel_step+0x5a4>)
 8001ee0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ee4:	a32e      	add	r3, pc, #184	@ (adr r3, 8001fa0 <EngTrModel_step+0x580>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe faf5 	bl	80004d8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001ef6:	4b33      	ldr	r3, [pc, #204]	@ (8001fc4 <EngTrModel_step+0x5a4>)
 8001ef8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f04:	f7ff fc70 	bl	80017e8 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001f08:	a327      	add	r3, pc, #156	@ (adr r3, 8001fa8 <EngTrModel_step+0x588>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fae3 	bl	80004d8 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc8 <EngTrModel_step+0x5a8>)
 8001f20:	f7fe f924 	bl	800016c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001f2c:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <EngTrModel_step+0x5ac>)
 8001f2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001f32:	f7fe f91b 	bl	800016c <__adddf3>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001f3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f42:	f7fe fac9 	bl	80004d8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	f7fe f90b 	bl	8000168 <__aeabi_dsub>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001f5a:	a315      	add	r3, pc, #84	@ (adr r3, 8001fb0 <EngTrModel_step+0x590>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe faba 	bl	80004d8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	a312      	add	r3, pc, #72	@ (adr r3, 8001fb8 <EngTrModel_step+0x598>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fab1 	bl	80004d8 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <EngTrModel_step+0x5b0>)
 8001f80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f84:	f7fe f8f2 	bl	800016c <__adddf3>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4910      	ldr	r1, [pc, #64]	@ (8001fd0 <EngTrModel_step+0x5b0>)
 8001f8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	3d70a3d7 	.word	0x3d70a3d7
 8001fa4:	4009d70a 	.word	0x4009d70a
 8001fa8:	47ae147b 	.word	0x47ae147b
 8001fac:	3f947ae1 	.word	0x3f947ae1
 8001fb0:	b3bfa695 	.word	0xb3bfa695
 8001fb4:	3fb52ad1 	.word	0x3fb52ad1
 8001fb8:	47ae147b 	.word	0x47ae147b
 8001fbc:	3fa47ae1 	.word	0x3fa47ae1
 8001fc0:	20000608 	.word	0x20000608
 8001fc4:	20000208 	.word	0x20000208
 8001fc8:	40440000 	.word	0x40440000
 8001fcc:	20000260 	.word	0x20000260
 8001fd0:	20000238 	.word	0x20000238

08001fd4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <vApplicationGetIdleTaskMemory+0x28>)
 8001fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000288 	.word	0x20000288
 8002000:	20000328 	.word	0x20000328

08002004 <FormatFloat>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Otras
void FormatFloat(char *buffer, float value, bool fixed_decimals) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	71fb      	strb	r3, [r7, #7]
    int int_part = (int)value;                          // Extract integer part
 8002012:	68b8      	ldr	r0, [r7, #8]
 8002014:	f7ff f85c 	bl	80010d0 <__aeabi_f2iz>
 8002018:	4603      	mov	r3, r0
 800201a:	617b      	str	r3, [r7, #20]
    int decimal_part = (int)((value - int_part) * 100); // Extract two decimal places
 800201c:	6978      	ldr	r0, [r7, #20]
 800201e:	f7fe fe3d 	bl	8000c9c <__aeabi_i2f>
 8002022:	4603      	mov	r3, r0
 8002024:	4619      	mov	r1, r3
 8002026:	68b8      	ldr	r0, [r7, #8]
 8002028:	f7fe fd82 	bl	8000b30 <__aeabi_fsub>
 800202c:	4603      	mov	r3, r0
 800202e:	4925      	ldr	r1, [pc, #148]	@ (80020c4 <FormatFloat+0xc0>)
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fe87 	bl	8000d44 <__aeabi_fmul>
 8002036:	4603      	mov	r3, r0
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f849 	bl	80010d0 <__aeabi_f2iz>
 800203e:	4603      	mov	r3, r0
 8002040:	613b      	str	r3, [r7, #16]

    if (fixed_decimals) {
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <FormatFloat+0x58>
        // Always display two decimals
        sprintf(buffer, "%d.%02d", int_part, abs(decimal_part));
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	bfb8      	it	lt
 800204e:	425b      	neglt	r3, r3
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	491d      	ldr	r1, [pc, #116]	@ (80020c8 <FormatFloat+0xc4>)
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f007 f8af 	bl	80091b8 <siprintf>
            sprintf(buffer, "%d.%d", int_part, abs(decimal_part / 10)); // One decimal place
        } else {
            sprintf(buffer, "%d.%02d", int_part, abs(decimal_part)); // Two decimal places
        }
    }
}
 800205a:	e02f      	b.n	80020bc <FormatFloat+0xb8>
        if (decimal_part == 0) {
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <FormatFloat+0x6a>
            sprintf(buffer, "%d", int_part); // No decimals
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4919      	ldr	r1, [pc, #100]	@ (80020cc <FormatFloat+0xc8>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f007 f8a6 	bl	80091b8 <siprintf>
}
 800206c:	e026      	b.n	80020bc <FormatFloat+0xb8>
        } else if (decimal_part % 10 == 0) {
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <FormatFloat+0xcc>)
 8002072:	fb83 2301 	smull	r2, r3, r3, r1
 8002076:	109a      	asrs	r2, r3, #2
 8002078:	17cb      	asrs	r3, r1, #31
 800207a:	1ad2      	subs	r2, r2, r3
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	1aca      	subs	r2, r1, r3
 8002086:	2a00      	cmp	r2, #0
 8002088:	d10f      	bne.n	80020aa <FormatFloat+0xa6>
            sprintf(buffer, "%d.%d", int_part, abs(decimal_part / 10)); // One decimal place
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4a10      	ldr	r2, [pc, #64]	@ (80020d0 <FormatFloat+0xcc>)
 800208e:	fb82 1203 	smull	r1, r2, r2, r3
 8002092:	1092      	asrs	r2, r2, #2
 8002094:	17db      	asrs	r3, r3, #31
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bfb8      	it	lt
 800209c:	425b      	neglt	r3, r3
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <FormatFloat+0xd0>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f007 f888 	bl	80091b8 <siprintf>
}
 80020a8:	e008      	b.n	80020bc <FormatFloat+0xb8>
            sprintf(buffer, "%d.%02d", int_part, abs(decimal_part)); // Two decimal places
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bfb8      	it	lt
 80020b0:	425b      	neglt	r3, r3
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4904      	ldr	r1, [pc, #16]	@ (80020c8 <FormatFloat+0xc4>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f007 f87e 	bl	80091b8 <siprintf>
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	42c80000 	.word	0x42c80000
 80020c8:	0800c518 	.word	0x0800c518
 80020cc:	0800c520 	.word	0x0800c520
 80020d0:	66666667 	.word	0x66666667
 80020d4:	0800c524 	.word	0x0800c524

080020d8 <GetAndReplaceValue>:

// FUNCIONES RTOS
uint32_t GetAndReplaceValue(osMessageQId queueHandle) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    uint32_t value = 0;  // Local variable to hold the value
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
    osEvent r_event = osMessageGet(queueHandle, 0);
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 fe8b 	bl	8005e08 <osMessageGet>

    if (r_event.status == osEventMessage) {
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d106      	bne.n	8002106 <GetAndReplaceValue+0x2e>
        value = r_event.value.v;  // Store the value from the queue
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	617b      	str	r3, [r7, #20]
        osMessagePut(queueHandle, value, 0);  // Immediately replace the value in the queue
 80020fc:	2200      	movs	r2, #0
 80020fe:	6979      	ldr	r1, [r7, #20]
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f003 fe41 	bl	8005d88 <osMessagePut>
    }

    return value;  // Return the value
 8002106:	697b      	ldr	r3, [r7, #20]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <PutValueInQueue>:
void PutValueInQueue(osMessageQId queueHandle, void *value) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6178      	str	r0, [r7, #20]
 8002118:	6139      	str	r1, [r7, #16]
    // Try to put the value in the queue
    osStatus status = osMessagePut(queueHandle, (uint32_t)value, 0);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	6978      	ldr	r0, [r7, #20]
 8002122:	f003 fe31 	bl	8005d88 <osMessagePut>
 8002126:	61f8      	str	r0, [r7, #28]
    if (status != osOK) {
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <PutValueInQueue+0x36>
        // If the queue is full, remove the oldest value and try again
        osMessageGet(queueHandle, 0);  // Remove the oldest value
 800212e:	463b      	mov	r3, r7
 8002130:	2200      	movs	r2, #0
 8002132:	6979      	ldr	r1, [r7, #20]
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fe67 	bl	8005e08 <osMessageGet>
        osMessagePut(queueHandle, (uint32_t)value, 0);  // Add the new value
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	6978      	ldr	r0, [r7, #20]
 8002142:	f003 fe21 	bl	8005d88 <osMessagePut>
    }
}
 8002146:	bf00      	nop
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <_write>:
    time = time % 1000;  // Keep the output within 3 digits
    char debug_msg[8];   // Buffer for message (7 characters + null terminator)
    sprintf(debug_msg, "%c%03lu\r\n", task_id, time);  // Format message using %lu for uint32_t
    HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
}
int _write(int file, char *ptr, int len){
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e00f      	b.n	8002182 <_write+0x32>
	while(!( USART2->SR & USART_SR_TXE ));
 8002162:	bf00      	nop
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <_write+0x48>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f9      	beq.n	8002164 <_write+0x14>
		USART2->DR = *ptr++;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <_write+0x48>)
 800217a:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	dbeb      	blt.n	8002162 <_write+0x12>
	}
	return len;
 800218a:	687b      	ldr	r3, [r7, #4]
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40004400 	.word	0x40004400

0800219c <read_matrix_inputs>:

// FUNCIONES KEYPAD
int8_t read_matrix_inputs(void) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
    // Read the state of each defined input pin
    uint8_t mpi_0_state = HAL_GPIO_ReadPin(mpi_0_PORT, mpi_0_PIN);
 80021a2:	2180      	movs	r1, #128	@ 0x80
 80021a4:	4819      	ldr	r0, [pc, #100]	@ (800220c <read_matrix_inputs+0x70>)
 80021a6:	f002 fb71 	bl	800488c <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
    uint8_t mpi_1_state = HAL_GPIO_ReadPin(mpi_1_PORT, mpi_1_PIN);
 80021ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021b2:	4817      	ldr	r0, [pc, #92]	@ (8002210 <read_matrix_inputs+0x74>)
 80021b4:	f002 fb6a 	bl	800488c <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	71bb      	strb	r3, [r7, #6]
    uint8_t mpi_2_state = HAL_GPIO_ReadPin(mpi_2_PORT, mpi_2_PIN);
 80021bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021c0:	4813      	ldr	r0, [pc, #76]	@ (8002210 <read_matrix_inputs+0x74>)
 80021c2:	f002 fb63 	bl	800488c <HAL_GPIO_ReadPin>
 80021c6:	4603      	mov	r3, r0
 80021c8:	717b      	strb	r3, [r7, #5]
    uint8_t mpi_3_state = HAL_GPIO_ReadPin(mpi_3_PORT, mpi_3_PIN);
 80021ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021ce:	4811      	ldr	r0, [pc, #68]	@ (8002214 <read_matrix_inputs+0x78>)
 80021d0:	f002 fb5c 	bl	800488c <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	713b      	strb	r3, [r7, #4]

    // Return a number based on which input is on
    if (mpi_0_state == GPIO_PIN_SET) {
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <read_matrix_inputs+0x46>
        return 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	e010      	b.n	8002204 <read_matrix_inputs+0x68>
    } else if (mpi_1_state == GPIO_PIN_SET) {
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <read_matrix_inputs+0x50>
        return 1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e00b      	b.n	8002204 <read_matrix_inputs+0x68>
    } else if (mpi_2_state == GPIO_PIN_SET) {
 80021ec:	797b      	ldrb	r3, [r7, #5]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <read_matrix_inputs+0x5a>
        return 2;
 80021f2:	2302      	movs	r3, #2
 80021f4:	e006      	b.n	8002204 <read_matrix_inputs+0x68>
    } else if (mpi_3_state == GPIO_PIN_SET) {
 80021f6:	793b      	ldrb	r3, [r7, #4]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <read_matrix_inputs+0x64>
        return 3;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e001      	b.n	8002204 <read_matrix_inputs+0x68>
    }

    // If no input is on, return -1 (or another invalid value to indicate no input)
    return -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40011000 	.word	0x40011000
 8002210:	40010800 	.word	0x40010800
 8002214:	40010c00 	.word	0x40010c00

08002218 <read_matrix_pad>:
int8_t read_matrix_pad(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
    int32_t col = -1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	603b      	str	r3, [r7, #0]
    int32_t key = -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	607b      	str	r3, [r7, #4]

    // Set mpo_0 (pin index 0) to 1
    HAL_GPIO_WritePin(mpo_0_PORT, mpo_0_PIN, GPIO_PIN_SET);
 800222a:	2201      	movs	r2, #1
 800222c:	2120      	movs	r1, #32
 800222e:	482b      	ldr	r0, [pc, #172]	@ (80022dc <read_matrix_pad+0xc4>)
 8002230:	f002 fb43 	bl	80048ba <HAL_GPIO_WritePin>
    col = read_matrix_inputs();
 8002234:	f7ff ffb2 	bl	800219c <read_matrix_inputs>
 8002238:	4603      	mov	r3, r0
 800223a:	603b      	str	r3, [r7, #0]
    if (col != -1) {
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d001      	beq.n	8002248 <read_matrix_pad+0x30>
        key = 0 * 4 + col;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(mpo_0_PORT, mpo_0_PIN, GPIO_PIN_RESET);  // Reset after check
 8002248:	2200      	movs	r2, #0
 800224a:	2120      	movs	r1, #32
 800224c:	4823      	ldr	r0, [pc, #140]	@ (80022dc <read_matrix_pad+0xc4>)
 800224e:	f002 fb34 	bl	80048ba <HAL_GPIO_WritePin>

    // Set mpo_1 (pin index 1) to 1
    HAL_GPIO_WritePin(mpo_1_PORT, mpo_1_PIN, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	2140      	movs	r1, #64	@ 0x40
 8002256:	4821      	ldr	r0, [pc, #132]	@ (80022dc <read_matrix_pad+0xc4>)
 8002258:	f002 fb2f 	bl	80048ba <HAL_GPIO_WritePin>
    col = read_matrix_inputs();
 800225c:	f7ff ff9e 	bl	800219c <read_matrix_inputs>
 8002260:	4603      	mov	r3, r0
 8002262:	603b      	str	r3, [r7, #0]
    if (col != -1) {
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d002      	beq.n	8002272 <read_matrix_pad+0x5a>
        key = 1 * 4 + col;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	3304      	adds	r3, #4
 8002270:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(mpo_1_PORT, mpo_1_PIN, GPIO_PIN_RESET);  // Reset after check
 8002272:	2200      	movs	r2, #0
 8002274:	2140      	movs	r1, #64	@ 0x40
 8002276:	4819      	ldr	r0, [pc, #100]	@ (80022dc <read_matrix_pad+0xc4>)
 8002278:	f002 fb1f 	bl	80048ba <HAL_GPIO_WritePin>

    // Set mpo_2 (pin index 2) to 1
    HAL_GPIO_WritePin(mpo_2_PORT, mpo_2_PIN, GPIO_PIN_SET);
 800227c:	2201      	movs	r2, #1
 800227e:	2180      	movs	r1, #128	@ 0x80
 8002280:	4816      	ldr	r0, [pc, #88]	@ (80022dc <read_matrix_pad+0xc4>)
 8002282:	f002 fb1a 	bl	80048ba <HAL_GPIO_WritePin>
    col = read_matrix_inputs();
 8002286:	f7ff ff89 	bl	800219c <read_matrix_inputs>
 800228a:	4603      	mov	r3, r0
 800228c:	603b      	str	r3, [r7, #0]
    if (col != -1) {
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d002      	beq.n	800229c <read_matrix_pad+0x84>
        key = 2 * 4 + col;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	3308      	adds	r3, #8
 800229a:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(mpo_2_PORT, mpo_2_PIN, GPIO_PIN_RESET);  // Reset after check
 800229c:	2200      	movs	r2, #0
 800229e:	2180      	movs	r1, #128	@ 0x80
 80022a0:	480e      	ldr	r0, [pc, #56]	@ (80022dc <read_matrix_pad+0xc4>)
 80022a2:	f002 fb0a 	bl	80048ba <HAL_GPIO_WritePin>

    // Set mpo_3 (pin index 3) to 1
    HAL_GPIO_WritePin(mpo_3_PORT, mpo_3_PIN, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	2140      	movs	r1, #64	@ 0x40
 80022aa:	480d      	ldr	r0, [pc, #52]	@ (80022e0 <read_matrix_pad+0xc8>)
 80022ac:	f002 fb05 	bl	80048ba <HAL_GPIO_WritePin>
    col = read_matrix_inputs();
 80022b0:	f7ff ff74 	bl	800219c <read_matrix_inputs>
 80022b4:	4603      	mov	r3, r0
 80022b6:	603b      	str	r3, [r7, #0]
    if (col != -1) {
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022be:	d002      	beq.n	80022c6 <read_matrix_pad+0xae>
        key = 3 * 4 + col;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(mpo_3_PORT, mpo_3_PIN, GPIO_PIN_RESET);  // Reset after check
 80022c6:	2200      	movs	r2, #0
 80022c8:	2140      	movs	r1, #64	@ 0x40
 80022ca:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <read_matrix_pad+0xc8>)
 80022cc:	f002 faf5 	bl	80048ba <HAL_GPIO_WritePin>

    // If no valid col found, return 255 (or any other invalid marker)
    return key;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b25b      	sxtb	r3, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40010800 	.word	0x40010800
 80022e0:	40010c00 	.word	0x40010c00

080022e4 <LCD_Command>:

// FUNCIONES LCD
void LCD_Command(uint8_t cmd) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET); // RS = 0 for command
 80022ee:	2200      	movs	r2, #0
 80022f0:	2110      	movs	r1, #16
 80022f2:	483d      	ldr	r0, [pc, #244]	@ (80023e8 <LCD_Command+0x104>)
 80022f4:	f002 fae1 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (cmd >> 4) & 0x01);
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	2102      	movs	r1, #2
 8002308:	4838      	ldr	r0, [pc, #224]	@ (80023ec <LCD_Command+0x108>)
 800230a:	f002 fad6 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 5) & 0x01);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	2110      	movs	r1, #16
 800231e:	4833      	ldr	r0, [pc, #204]	@ (80023ec <LCD_Command+0x108>)
 8002320:	f002 facb 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 6) & 0x01);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	099b      	lsrs	r3, r3, #6
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	482e      	ldr	r0, [pc, #184]	@ (80023f0 <LCD_Command+0x10c>)
 8002336:	f002 fac0 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 7) & 0x01);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	09db      	lsrs	r3, r3, #7
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	2102      	movs	r1, #2
 8002344:	4828      	ldr	r0, [pc, #160]	@ (80023e8 <LCD_Command+0x104>)
 8002346:	f002 fab8 	bl	80048ba <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);  // Enable pin HIGH
 800234a:	2201      	movs	r2, #1
 800234c:	2101      	movs	r1, #1
 800234e:	4827      	ldr	r0, [pc, #156]	@ (80023ec <LCD_Command+0x108>)
 8002350:	f002 fab3 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 8002354:	2000      	movs	r0, #0
 8002356:	f001 fbe5 	bl	8003b24 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);  // Enable pin LOW
 800235a:	2200      	movs	r2, #0
 800235c:	2101      	movs	r1, #1
 800235e:	4823      	ldr	r0, [pc, #140]	@ (80023ec <LCD_Command+0x108>)
 8002360:	f002 faab 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 8002364:	2000      	movs	r0, #0
 8002366:	f001 fbdd 	bl	8003b24 <HAL_Delay>

    // Send low nibble
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, cmd & 0x01);
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	2102      	movs	r1, #2
 8002376:	481d      	ldr	r0, [pc, #116]	@ (80023ec <LCD_Command+0x108>)
 8002378:	f002 fa9f 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 1) & 0x01);
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	2110      	movs	r1, #16
 800238c:	4817      	ldr	r0, [pc, #92]	@ (80023ec <LCD_Command+0x108>)
 800238e:	f002 fa94 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 2) & 0x01);
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	2101      	movs	r1, #1
 80023a2:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <LCD_Command+0x10c>)
 80023a4:	f002 fa89 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 3) & 0x01);
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	2102      	movs	r1, #2
 80023b8:	480b      	ldr	r0, [pc, #44]	@ (80023e8 <LCD_Command+0x104>)
 80023ba:	f002 fa7e 	bl	80048ba <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);  // Enable pin HIGH
 80023be:	2201      	movs	r2, #1
 80023c0:	2101      	movs	r1, #1
 80023c2:	480a      	ldr	r0, [pc, #40]	@ (80023ec <LCD_Command+0x108>)
 80023c4:	f002 fa79 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f001 fbab 	bl	8003b24 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);  // Enable pin LOW
 80023ce:	2200      	movs	r2, #0
 80023d0:	2101      	movs	r1, #1
 80023d2:	4806      	ldr	r0, [pc, #24]	@ (80023ec <LCD_Command+0x108>)
 80023d4:	f002 fa71 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 80023d8:	2000      	movs	r0, #0
 80023da:	f001 fba3 	bl	8003b24 <HAL_Delay>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40011000 	.word	0x40011000
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40010c00 	.word	0x40010c00

080023f4 <LCD_Write_Char>:
void LCD_Write_Char(char data) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
    // Send high nibble
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET); // RS = 1 for data
 80023fe:	2201      	movs	r2, #1
 8002400:	2110      	movs	r1, #16
 8002402:	483d      	ldr	r0, [pc, #244]	@ (80024f8 <LCD_Write_Char+0x104>)
 8002404:	f002 fa59 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 4) & 0x01);
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	2102      	movs	r1, #2
 8002418:	4838      	ldr	r0, [pc, #224]	@ (80024fc <LCD_Write_Char+0x108>)
 800241a:	f002 fa4e 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 5) & 0x01);
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	2110      	movs	r1, #16
 800242e:	4833      	ldr	r0, [pc, #204]	@ (80024fc <LCD_Write_Char+0x108>)
 8002430:	f002 fa43 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 6) & 0x01);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	2101      	movs	r1, #1
 8002444:	482e      	ldr	r0, [pc, #184]	@ (8002500 <LCD_Write_Char+0x10c>)
 8002446:	f002 fa38 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 7) & 0x01);
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	09db      	lsrs	r3, r3, #7
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	2102      	movs	r1, #2
 8002454:	4828      	ldr	r0, [pc, #160]	@ (80024f8 <LCD_Write_Char+0x104>)
 8002456:	f002 fa30 	bl	80048ba <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);  // Enable pin HIGH
 800245a:	2201      	movs	r2, #1
 800245c:	2101      	movs	r1, #1
 800245e:	4827      	ldr	r0, [pc, #156]	@ (80024fc <LCD_Write_Char+0x108>)
 8002460:	f002 fa2b 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 8002464:	2000      	movs	r0, #0
 8002466:	f001 fb5d 	bl	8003b24 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);  // Enable pin LOW
 800246a:	2200      	movs	r2, #0
 800246c:	2101      	movs	r1, #1
 800246e:	4823      	ldr	r0, [pc, #140]	@ (80024fc <LCD_Write_Char+0x108>)
 8002470:	f002 fa23 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 8002474:	2000      	movs	r0, #0
 8002476:	f001 fb55 	bl	8003b24 <HAL_Delay>

    // Send low nibble
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, data & 0x01);
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	2102      	movs	r1, #2
 8002486:	481d      	ldr	r0, [pc, #116]	@ (80024fc <LCD_Write_Char+0x108>)
 8002488:	f002 fa17 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 1) & 0x01);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	2110      	movs	r1, #16
 800249c:	4817      	ldr	r0, [pc, #92]	@ (80024fc <LCD_Write_Char+0x108>)
 800249e:	f002 fa0c 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 2) & 0x01);
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	2101      	movs	r1, #1
 80024b2:	4813      	ldr	r0, [pc, #76]	@ (8002500 <LCD_Write_Char+0x10c>)
 80024b4:	f002 fa01 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 3) & 0x01);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	2102      	movs	r1, #2
 80024c8:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <LCD_Write_Char+0x104>)
 80024ca:	f002 f9f6 	bl	80048ba <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);  // Enable pin HIGH
 80024ce:	2201      	movs	r2, #1
 80024d0:	2101      	movs	r1, #1
 80024d2:	480a      	ldr	r0, [pc, #40]	@ (80024fc <LCD_Write_Char+0x108>)
 80024d4:	f002 f9f1 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 80024d8:	2000      	movs	r0, #0
 80024da:	f001 fb23 	bl	8003b24 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);  // Enable pin LOW
 80024de:	2200      	movs	r2, #0
 80024e0:	2101      	movs	r1, #1
 80024e2:	4806      	ldr	r0, [pc, #24]	@ (80024fc <LCD_Write_Char+0x108>)
 80024e4:	f002 f9e9 	bl	80048ba <HAL_GPIO_WritePin>
    HAL_Delay(0.00001);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f001 fb1b 	bl	8003b24 <HAL_Delay>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40010800 	.word	0x40010800
 8002500:	40010c00 	.word	0x40010c00

08002504 <LCD_Init>:
void LCD_Init(void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
    HAL_Delay(20);  // Wait for 20ms
 8002508:	2014      	movs	r0, #20
 800250a:	f001 fb0b 	bl	8003b24 <HAL_Delay>
    LCD_Command(0x03);
 800250e:	2003      	movs	r0, #3
 8002510:	f7ff fee8 	bl	80022e4 <LCD_Command>
    HAL_Delay(5);
 8002514:	2005      	movs	r0, #5
 8002516:	f001 fb05 	bl	8003b24 <HAL_Delay>
    LCD_Command(0x03);
 800251a:	2003      	movs	r0, #3
 800251c:	f7ff fee2 	bl	80022e4 <LCD_Command>
    HAL_Delay(1);
 8002520:	2001      	movs	r0, #1
 8002522:	f001 faff 	bl	8003b24 <HAL_Delay>
    LCD_Command(0x03);
 8002526:	2003      	movs	r0, #3
 8002528:	f7ff fedc 	bl	80022e4 <LCD_Command>
    LCD_Command(0x02);  // 4-bit mode
 800252c:	2002      	movs	r0, #2
 800252e:	f7ff fed9 	bl	80022e4 <LCD_Command>
    LCD_Command(0x28);  // 2 lines, 5x7 matrix
 8002532:	2028      	movs	r0, #40	@ 0x28
 8002534:	f7ff fed6 	bl	80022e4 <LCD_Command>
    LCD_Command(0x0C);  // Display on, cursor off
 8002538:	200c      	movs	r0, #12
 800253a:	f7ff fed3 	bl	80022e4 <LCD_Command>
    LCD_Command(0x06);  // Increment cursor
 800253e:	2006      	movs	r0, #6
 8002540:	f7ff fed0 	bl	80022e4 <LCD_Command>
    LCD_Command(0x01);  // Clear display
 8002544:	2001      	movs	r0, #1
 8002546:	f7ff fecd 	bl	80022e4 <LCD_Command>
    HAL_Delay(2);
 800254a:	2002      	movs	r0, #2
 800254c:	f001 faea 	bl	8003b24 <HAL_Delay>
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <LCD_Set_Cursor>:
void LCD_Set_Cursor(uint8_t row, uint8_t col) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	460a      	mov	r2, r1
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	4613      	mov	r3, r2
 8002562:	71bb      	strb	r3, [r7, #6]
    uint8_t pos;
    if (row == 0) {
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <LCD_Set_Cursor+0x1e>
        pos = 0x80 + col;
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	3b80      	subs	r3, #128	@ 0x80
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e002      	b.n	8002578 <LCD_Set_Cursor+0x24>
    } else {
        pos = 0xC0 + col;
 8002572:	79bb      	ldrb	r3, [r7, #6]
 8002574:	3b40      	subs	r3, #64	@ 0x40
 8002576:	73fb      	strb	r3, [r7, #15]
    }
    LCD_Command(pos);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff feb2 	bl	80022e4 <LCD_Command>
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <LCD_Update>:
            LCD_Write_Char(*str);
        }
        str++;
    }
}
void LCD_Update(char *str) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	@ 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    static char prev_str[32] = "";  // Assume 16x2 LCD, so max 32 characters
    char padded_str[32] = "";       // Buffer for the padded version of `str`
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	619a      	str	r2, [r3, #24]
    size_t len = strlen(str);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fd fdd1 	bl	8000150 <strlen>
 80025ae:	62b8      	str	r0, [r7, #40]	@ 0x28

    // Pad the input string to match the LCD's dimensions
    memset(padded_str, ' ', sizeof(padded_str));  // Fill with spaces
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	2220      	movs	r2, #32
 80025b6:	2120      	movs	r1, #32
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 fe60 	bl	800927e <memset>
    if (len > 0) {
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d025      	beq.n	8002610 <LCD_Update+0x88>
        // Copy the input string into the padded buffer
        for (size_t i = 0, lcd_pos = 0; i < len && lcd_pos < 32; i++) {
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80025cc:	e019      	b.n	8002602 <LCD_Update+0x7a>
            if (str[i] == '\n') {
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b0a      	cmp	r3, #10
 80025d8:	d102      	bne.n	80025e0 <LCD_Update+0x58>
                // Move to the second line at index 16
                lcd_pos = 16;
 80025da:	2310      	movs	r3, #16
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025de:	e00d      	b.n	80025fc <LCD_Update+0x74>
            } else if (lcd_pos < 32) {
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	2b1f      	cmp	r3, #31
 80025e4:	d80a      	bhi.n	80025fc <LCD_Update+0x74>
                // Copy the character to the padded buffer
                padded_str[lcd_pos++] = str[i];
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ea:	441a      	add	r2, r3
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	1c59      	adds	r1, r3, #1
 80025f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	3338      	adds	r3, #56	@ 0x38
 80025f6:	443b      	add	r3, r7
 80025f8:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (size_t i = 0, lcd_pos = 0; i < len && lcd_pos < 32; i++) {
 80025fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fe:	3301      	adds	r3, #1
 8002600:	637b      	str	r3, [r7, #52]	@ 0x34
 8002602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	429a      	cmp	r2, r3
 8002608:	d202      	bcs.n	8002610 <LCD_Update+0x88>
 800260a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260c:	2b1f      	cmp	r3, #31
 800260e:	d9de      	bls.n	80025ce <LCD_Update+0x46>
            }
        }
    }

    // Compare each character with the previous display and update if needed
    for (size_t i = 0; i < 32; i++) {
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002614:	e02b      	b.n	800266e <LCD_Update+0xe6>
        if (padded_str[i] != prev_str[i]) {
 8002616:	f107 0208 	add.w	r2, r7, #8
 800261a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261c:	4413      	add	r3, r2
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	4917      	ldr	r1, [pc, #92]	@ (8002680 <LCD_Update+0xf8>)
 8002622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002624:	440b      	add	r3, r1
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d01d      	beq.n	8002668 <LCD_Update+0xe0>
            LCD_Set_Cursor(i / 16, i % 16);  // Determine row and column
 800262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	b2da      	uxtb	r2, r3
 8002632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f7ff ff88 	bl	8002554 <LCD_Set_Cursor>
            LCD_Write_Char(padded_str[i]);  // Write the updated character
 8002644:	f107 0208 	add.w	r2, r7, #8
 8002648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fed0 	bl	80023f4 <LCD_Write_Char>
            prev_str[i] = padded_str[i];    // Update the prev_str record
 8002654:	f107 0208 	add.w	r2, r7, #8
 8002658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265a:	4413      	add	r3, r2
 800265c:	7819      	ldrb	r1, [r3, #0]
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <LCD_Update+0xf8>)
 8002660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002662:	4413      	add	r3, r2
 8002664:	460a      	mov	r2, r1
 8002666:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 32; i++) {
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266a:	3301      	adds	r3, #1
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	2b1f      	cmp	r3, #31
 8002672:	d9d0      	bls.n	8002616 <LCD_Update+0x8e>
        }
    }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3738      	adds	r7, #56	@ 0x38
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200005d8 	.word	0x200005d8

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b0c6      	sub	sp, #280	@ 0x118
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800268a:	f001 fa19 	bl	8003ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800268e:	f000 f919 	bl	80028c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002692:	f000 f9d7 	bl	8002a44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002696:	f000 f9ab 	bl	80029f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800269a:	f000 f96b 	bl	8002974 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of taskMutex */
  osMutexDef(taskMutex);
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  taskMutexHandle = osMutexCreate(osMutex(taskMutex));
 80026aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 faa5 	bl	8005bfe <osMutexCreate>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002874 <main+0x1f0>)
 80026b8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of key */
  osMessageQDef(key, 1, uint32_t);
 80026ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002878 <main+0x1f4>)
 80026bc:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 80026c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  keyHandle = osMessageCreate(osMessageQ(key), NULL);
 80026c6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fb33 	bl	8005d38 <osMessageCreate>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a69      	ldr	r2, [pc, #420]	@ (800287c <main+0x1f8>)
 80026d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of value */
  osMessageQDef(value, 1, uint32_t);
 80026d8:	4b67      	ldr	r3, [pc, #412]	@ (8002878 <main+0x1f4>)
 80026da:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 80026de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  valueHandle = osMessageCreate(osMessageQ(value), NULL);
 80026e4:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fb24 	bl	8005d38 <osMessageCreate>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4a63      	ldr	r2, [pc, #396]	@ (8002880 <main+0x1fc>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of throttle */
  osMessageQDef(throttle, 1, uint32_t);
 80026f6:	4b60      	ldr	r3, [pc, #384]	@ (8002878 <main+0x1f4>)
 80026f8:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 80026fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  throttleHandle = osMessageCreate(osMessageQ(throttle), NULL);
 8002702:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f003 fb15 	bl	8005d38 <osMessageCreate>
 800270e:	4603      	mov	r3, r0
 8002710:	4a5c      	ldr	r2, [pc, #368]	@ (8002884 <main+0x200>)
 8002712:	6013      	str	r3, [r2, #0]

  /* definition and creation of brake_torque */
  osMessageQDef(brake_torque, 1, uint32_t);
 8002714:	4b58      	ldr	r3, [pc, #352]	@ (8002878 <main+0x1f4>)
 8002716:	f107 04d0 	add.w	r4, r7, #208	@ 0xd0
 800271a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800271c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  brake_torqueHandle = osMessageCreate(osMessageQ(brake_torque), NULL);
 8002720:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fb06 	bl	8005d38 <osMessageCreate>
 800272c:	4603      	mov	r3, r0
 800272e:	4a56      	ldr	r2, [pc, #344]	@ (8002888 <main+0x204>)
 8002730:	6013      	str	r3, [r2, #0]

  /* definition and creation of steering */
  osMessageQDef(steering, 1, uint32_t);
 8002732:	4b51      	ldr	r3, [pc, #324]	@ (8002878 <main+0x1f4>)
 8002734:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 8002738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  steeringHandle = osMessageCreate(osMessageQ(steering), NULL);
 800273e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f003 faf7 	bl	8005d38 <osMessageCreate>
 800274a:	4603      	mov	r3, r0
 800274c:	4a4f      	ldr	r2, [pc, #316]	@ (800288c <main+0x208>)
 800274e:	6013      	str	r3, [r2, #0]

  /* definition and creation of speed */
  osMessageQDef(speed, 1, uint32_t);
 8002750:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <main+0x1f4>)
 8002752:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8002756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  speedHandle = osMessageCreate(osMessageQ(speed), NULL);
 800275c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fae8 	bl	8005d38 <osMessageCreate>
 8002768:	4603      	mov	r3, r0
 800276a:	4a49      	ldr	r2, [pc, #292]	@ (8002890 <main+0x20c>)
 800276c:	6013      	str	r3, [r2, #0]

  /* definition and creation of engine */
  osMessageQDef(engine, 1, uint32_t);
 800276e:	4b42      	ldr	r3, [pc, #264]	@ (8002878 <main+0x1f4>)
 8002770:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8002774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  engineHandle = osMessageCreate(osMessageQ(engine), NULL);
 800277a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fad9 	bl	8005d38 <osMessageCreate>
 8002786:	4603      	mov	r3, r0
 8002788:	4a42      	ldr	r2, [pc, #264]	@ (8002894 <main+0x210>)
 800278a:	6013      	str	r3, [r2, #0]

  /* definition and creation of gear */
  osMessageQDef(gear, 1, uint32_t);
 800278c:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <main+0x1f4>)
 800278e:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  gearHandle = osMessageCreate(osMessageQ(gear), NULL);
 8002798:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 faca 	bl	8005d38 <osMessageCreate>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002898 <main+0x214>)
 80027a8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80027aa:	4b3c      	ldr	r3, [pc, #240]	@ (800289c <main+0x218>)
 80027ac:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80027b0:	461d      	mov	r5, r3
 80027b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 f9ba 	bl	8005b3e <osThreadCreate>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4a34      	ldr	r2, [pc, #208]	@ (80028a0 <main+0x21c>)
 80027ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of LeerValores */
  osThreadDef(LeerValores, StartLeerValores, osPriorityNormal, 0, 256);
 80027d0:	4b34      	ldr	r3, [pc, #208]	@ (80028a4 <main+0x220>)
 80027d2:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80027d6:	461d      	mov	r5, r3
 80027d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LeerValoresHandle = osThreadCreate(osThread(LeerValores), NULL);
 80027e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 f9a7 	bl	8005b3e <osThreadCreate>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a2d      	ldr	r2, [pc, #180]	@ (80028a8 <main+0x224>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of EjecutarModelo */
  osThreadDef(EjecutarModelo, StartEjecutarModelo, osPriorityNormal, 0, 256);
 80027f6:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <main+0x228>)
 80027f8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80027fc:	461d      	mov	r5, r3
 80027fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EjecutarModeloHandle = osThreadCreate(osThread(EjecutarModelo), NULL);
 800280a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f003 f994 	bl	8005b3e <osThreadCreate>
 8002816:	4603      	mov	r3, r0
 8002818:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <main+0x22c>)
 800281a:	6013      	str	r3, [r2, #0]

  /* definition and creation of EnviarUART */
  osThreadDef(EnviarUART, StartEnviarUART, osPriorityNormal, 0, 256);
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <main+0x230>)
 800281e:	f107 0420 	add.w	r4, r7, #32
 8002822:	461d      	mov	r5, r3
 8002824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800282c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EnviarUARTHandle = osThreadCreate(osThread(EnviarUART), NULL);
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f003 f981 	bl	8005b3e <osThreadCreate>
 800283c:	4603      	mov	r3, r0
 800283e:	4a1e      	ldr	r2, [pc, #120]	@ (80028b8 <main+0x234>)
 8002840:	6013      	str	r3, [r2, #0]

  /* definition and creation of EnviarLCD */
  osThreadDef(EnviarLCD, StartEnviarLCD, osPriorityNormal, 0, 256);
 8002842:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002846:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800284a:	4a1c      	ldr	r2, [pc, #112]	@ (80028bc <main+0x238>)
 800284c:	461c      	mov	r4, r3
 800284e:	4615      	mov	r5, r2
 8002850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002854:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002858:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EnviarLCDHandle = osThreadCreate(osThread(EnviarLCD), NULL);
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f003 f96c 	bl	8005b3e <osThreadCreate>
 8002866:	4603      	mov	r3, r0
 8002868:	4a15      	ldr	r2, [pc, #84]	@ (80028c0 <main+0x23c>)
 800286a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800286c:	f003 f950 	bl	8005b10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <main+0x1ec>
 8002874:	200005d4 	.word	0x200005d4
 8002878:	0800c538 	.word	0x0800c538
 800287c:	200005b4 	.word	0x200005b4
 8002880:	200005b8 	.word	0x200005b8
 8002884:	200005bc 	.word	0x200005bc
 8002888:	200005c0 	.word	0x200005c0
 800288c:	200005c4 	.word	0x200005c4
 8002890:	200005c8 	.word	0x200005c8
 8002894:	200005cc 	.word	0x200005cc
 8002898:	200005d0 	.word	0x200005d0
 800289c:	0800c554 	.word	0x0800c554
 80028a0:	200005a0 	.word	0x200005a0
 80028a4:	0800c57c 	.word	0x0800c57c
 80028a8:	200005a4 	.word	0x200005a4
 80028ac:	0800c5a8 	.word	0x0800c5a8
 80028b0:	200005a8 	.word	0x200005a8
 80028b4:	0800c5d0 	.word	0x0800c5d0
 80028b8:	200005ac 	.word	0x200005ac
 80028bc:	0800c5f8 	.word	0x0800c5f8
 80028c0:	200005b0 	.word	0x200005b0

080028c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b094      	sub	sp, #80	@ 0x50
 80028c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028ce:	2228      	movs	r2, #40	@ 0x28
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f006 fcd3 	bl	800927e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028f8:	2301      	movs	r3, #1
 80028fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028fc:	2310      	movs	r3, #16
 80028fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002900:	2302      	movs	r3, #2
 8002902:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002904:	2300      	movs	r3, #0
 8002906:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002908:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800290c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002912:	4618      	mov	r0, r3
 8002914:	f002 f80c 	bl	8004930 <HAL_RCC_OscConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800291e:	f000 fdfb 	bl	8003518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002922:	230f      	movs	r3, #15
 8002924:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002926:	2302      	movs	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800292e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002932:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002934:	2300      	movs	r3, #0
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	2102      	movs	r1, #2
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fa78 	bl	8004e34 <HAL_RCC_ClockConfig>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800294a:	f000 fde5 	bl	8003518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800294e:	2302      	movs	r3, #2
 8002950:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002956:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4618      	mov	r0, r3
 800295c:	f002 fc28 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002966:	f000 fdd7 	bl	8003518 <Error_Handler>
  }
}
 800296a:	bf00      	nop
 800296c:	3750      	adds	r7, #80	@ 0x50
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002984:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <MX_ADC1_Init+0x74>)
 8002986:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <MX_ADC1_Init+0x78>)
 8002988:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800298a:	4b17      	ldr	r3, [pc, #92]	@ (80029e8 <MX_ADC1_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002990:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <MX_ADC1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <MX_ADC1_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800299c:	4b12      	ldr	r3, [pc, #72]	@ (80029e8 <MX_ADC1_Init+0x74>)
 800299e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80029a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029a4:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <MX_ADC1_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80029aa:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <MX_ADC1_Init+0x74>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029b0:	480d      	ldr	r0, [pc, #52]	@ (80029e8 <MX_ADC1_Init+0x74>)
 80029b2:	f001 f8db 	bl	8003b6c <HAL_ADC_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80029bc:	f000 fdac 	bl	8003518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80029c0:	230c      	movs	r3, #12
 80029c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4805      	ldr	r0, [pc, #20]	@ (80029e8 <MX_ADC1_Init+0x74>)
 80029d2:	f001 fb63 	bl	800409c <HAL_ADC_ConfigChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80029dc:	f000 fd9c 	bl	8003518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000528 	.word	0x20000528
 80029ec:	40012400 	.word	0x40012400

080029f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	@ (8002a40 <MX_USART2_UART_Init+0x50>)
 80029f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 80029fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a08:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 8002a16:	220c      	movs	r2, #12
 8002a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1a:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a26:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <MX_USART2_UART_Init+0x4c>)
 8002a28:	f002 ff6c 	bl	8005904 <HAL_UART_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a32:	f000 fd71 	bl	8003518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000558 	.word	0x20000558
 8002a40:	40004400 	.word	0x40004400

08002a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a58:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a5e:	f043 0310 	orr.w	r3, r3, #16
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a76:	f043 0320 	orr.w	r3, r3, #32
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a88:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a46      	ldr	r2, [pc, #280]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b44      	ldr	r3, [pc, #272]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a40      	ldr	r2, [pc, #256]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba8 <MX_GPIO_Init+0x164>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2112      	movs	r1, #18
 8002abc:	483b      	ldr	r0, [pc, #236]	@ (8002bac <MX_GPIO_Init+0x168>)
 8002abe:	f001 fefc 	bl	80048ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	21f3      	movs	r1, #243	@ 0xf3
 8002ac6:	483a      	ldr	r0, [pc, #232]	@ (8002bb0 <MX_GPIO_Init+0x16c>)
 8002ac8:	f001 fef7 	bl	80048ba <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2141      	movs	r1, #65	@ 0x41
 8002ad0:	4838      	ldr	r0, [pc, #224]	@ (8002bb4 <MX_GPIO_Init+0x170>)
 8002ad2:	f001 fef2 	bl	80048ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002adc:	4b36      	ldr	r3, [pc, #216]	@ (8002bb8 <MX_GPIO_Init+0x174>)
 8002ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4830      	ldr	r0, [pc, #192]	@ (8002bac <MX_GPIO_Init+0x168>)
 8002aec:	f001 fd4a 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8002af0:	2312      	movs	r3, #18
 8002af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af4:	2301      	movs	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2302      	movs	r3, #2
 8002afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	4619      	mov	r1, r3
 8002b06:	4829      	ldr	r0, [pc, #164]	@ (8002bac <MX_GPIO_Init+0x168>)
 8002b08:	f001 fd3c 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002b0c:	23f3      	movs	r3, #243	@ 0xf3
 8002b0e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b10:	2301      	movs	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4619      	mov	r1, r3
 8002b22:	4823      	ldr	r0, [pc, #140]	@ (8002bb0 <MX_GPIO_Init+0x16c>)
 8002b24:	f001 fd2e 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8002b28:	2341      	movs	r3, #65	@ 0x41
 8002b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481d      	ldr	r0, [pc, #116]	@ (8002bb4 <MX_GPIO_Init+0x170>)
 8002b40:	f001 fd20 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4619      	mov	r1, r3
 8002b58:	4816      	ldr	r0, [pc, #88]	@ (8002bb4 <MX_GPIO_Init+0x170>)
 8002b5a:	f001 fd13 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480e      	ldr	r0, [pc, #56]	@ (8002bac <MX_GPIO_Init+0x168>)
 8002b72:	f001 fd07 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b80:	2302      	movs	r3, #2
 8002b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4809      	ldr	r0, [pc, #36]	@ (8002bb0 <MX_GPIO_Init+0x16c>)
 8002b8c:	f001 fcfa 	bl	8004584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2105      	movs	r1, #5
 8002b94:	2028      	movs	r0, #40	@ 0x28
 8002b96:	f001 fcca 	bl	800452e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b9a:	2028      	movs	r0, #40	@ 0x28
 8002b9c:	f001 fce3 	bl	8004566 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ba0:	bf00      	nop
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	10110000 	.word	0x10110000

08002bbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Calendarización para esta tarea
	const int period = 100;
 8002bc4:	2364      	movs	r3, #100	@ 0x64
 8002bc6:	60fb      	str	r3, [r7, #12]
	const int offset = 5;
 8002bc8:	2305      	movs	r3, #5
 8002bca:	60bb      	str	r3, [r7, #8]
	osDelay(offset);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 f801 	bl	8005bd6 <osDelay>
		//HAL_Delay(random_delay);

		// Wait until next release time
		//int cur_tick = osKernelSysTick();
		//osDelay(((cur_tick / period) + 1) * period + offset - cur_tick);
		osDelay(1);
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f002 fffe 	bl	8005bd6 <osDelay>
 8002bda:	e7fb      	b.n	8002bd4 <StartDefaultTask+0x18>

08002bdc <StartLeerValores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeerValores */
void StartLeerValores(void const * argument)
{
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b0cc      	sub	sp, #304	@ 0x130
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002be6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002bea:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLeerValores */
	// Calendarización para esta tarea
	const int period = 40;
 8002bec:	2328      	movs	r3, #40	@ 0x28
 8002bee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	const int offset = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	osDelay(offset);
 8002bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f002 ffea 	bl	8005bd6 <osDelay>

	uint16_t mini = 500;	// Mínimo valor del ADC
 8002c02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c06:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t maxi = 4000;	// Máximo valor del ADC
 8002c0a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002c0e:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	int8_t key = -1;
 8002c12:	23ff      	movs	r3, #255	@ 0xff
 8002c14:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t value = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	float brake_torque = 0;
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	float throttle;
	int8_t steering = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	char msg[256] = "";
 8002c2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c30:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	22fc      	movs	r2, #252	@ 0xfc
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f006 fb1d 	bl	800927e <memset>

	/* Infinite loop */
	for(;;)
	{
	  	// Start
		osMutexWait(taskMutexHandle, osWaitForever);
 8002c44:	4b60      	ldr	r3, [pc, #384]	@ (8002dc8 <StartLeerValores+0x1ec>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 ffef 	bl	8005c30 <osMutexWait>
		uint32_t start_tick = osKernelSysTick();  // Get start time
 8002c52:	f002 ff64 	bl	8005b1e <osKernelSysTick>
 8002c56:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		//DebugTaskTiming('L', osKernelSysTick()); // Ver inicio

		// Leemos el teclado
		key = read_matrix_pad();
 8002c5a:	f7ff fadd 	bl	8002218 <read_matrix_pad>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
		PutValueInQueue(keyHandle, &key);  // Use the new function to handle key
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <StartLeerValores+0x1f0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f207 121b 	addw	r2, r7, #283	@ 0x11b
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fa4e 	bl	8002110 <PutValueInQueue>

		// Leemos potenciometro
		HAL_ADC_Start(&hadc1);
 8002c74:	4856      	ldr	r0, [pc, #344]	@ (8002dd0 <StartLeerValores+0x1f4>)
 8002c76:	f001 f851 	bl	8003d1c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 20);
 8002c7a:	2114      	movs	r1, #20
 8002c7c:	4854      	ldr	r0, [pc, #336]	@ (8002dd0 <StartLeerValores+0x1f4>)
 8002c7e:	f001 f8fb 	bl	8003e78 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1);
 8002c82:	4853      	ldr	r0, [pc, #332]	@ (8002dd0 <StartLeerValores+0x1f4>)
 8002c84:	f001 f9fe 	bl	8004084 <HAL_ADC_GetValue>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
		PutValueInQueue(valueHandle, &value);  // Use the new function to handle value
 8002c90:	4b50      	ldr	r3, [pc, #320]	@ (8002dd4 <StartLeerValores+0x1f8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fa38 	bl	8002110 <PutValueInQueue>

		// Calculamos Throttle
		throttle = fmax(0.0f, fmin(((float)value - (float)mini) / ((float)maxi - (float)mini), 1.0f));
 8002ca0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fff5 	bl	8000c94 <__aeabi_ui2f>
 8002caa:	4604      	mov	r4, r0
 8002cac:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd ffef 	bl	8000c94 <__aeabi_ui2f>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7fd ff38 	bl	8000b30 <__aeabi_fsub>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461d      	mov	r5, r3
 8002cc4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd ffe3 	bl	8000c94 <__aeabi_ui2f>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd ffdd 	bl	8000c94 <__aeabi_ui2f>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7fd ff26 	bl	8000b30 <__aeabi_fsub>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7fe f8df 	bl	8000eac <__aeabi_fdiv>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fb99 	bl	8000428 <__aeabi_f2d>
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <StartLeerValores+0x1fc>)
 8002cfc:	f008 fc98 	bl	800b630 <fmin>
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	f008 fc76 	bl	800b5f8 <fmax>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7fd feb8 	bl	8000a88 <__aeabi_d2f>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		PutValueInQueue(throttleHandle, &throttle);  // Use the new function to handle throttle
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <StartLeerValores+0x200>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f9f1 	bl	8002110 <PutValueInQueue>

		// Calculamos brake torque
		brake_torque = (key == 5) ? 1 : 0;
 8002d2e:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d102      	bne.n	8002d3c <StartLeerValores+0x160>
 8002d36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d3a:	e001      	b.n	8002d40 <StartLeerValores+0x164>
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		PutValueInQueue(brake_torqueHandle, &brake_torque);  // Use the new function to handle brake_torque
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <StartLeerValores+0x204>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f9de 	bl	8002110 <PutValueInQueue>

		// Calculamos dirección
		if (key == 4)
 8002d54:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d103      	bne.n	8002d64 <StartLeerValores+0x188>
		    steering = -1;
 8002d5c:	23ff      	movs	r3, #255	@ 0xff
 8002d5e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002d62:	e00a      	b.n	8002d7a <StartLeerValores+0x19e>
		else if (key == 6)
 8002d64:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d103      	bne.n	8002d74 <StartLeerValores+0x198>
		    steering = 1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002d72:	e002      	b.n	8002d7a <StartLeerValores+0x19e>
		else
		    steering = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		PutValueInQueue(steeringHandle, &steering);  // Use the new function to handle steering
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <StartLeerValores+0x208>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f207 120f 	addw	r2, r7, #271	@ 0x10f
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f9c3 	bl	8002110 <PutValueInQueue>

		// Wait until next release time
		osMutexRelease(taskMutexHandle); // Done
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <StartLeerValores+0x1ec>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 ff9c 	bl	8005ccc <osMutexRelease>
		//DebugTaskTiming('L', osKernelSysTick() - start_tick); //  Ver duración
		int cur_tick = osKernelSysTick();
 8002d94:	f002 fec3 	bl	8005b1e <osKernelSysTick>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		osDelay(((cur_tick / period) + 1) * period + offset - cur_tick);
 8002d9e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002db0:	fb03 f202 	mul.w	r2, r3, r2
 8002db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002db8:	441a      	add	r2, r3
 8002dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 ff08 	bl	8005bd6 <osDelay>
	{
 8002dc6:	e73d      	b.n	8002c44 <StartLeerValores+0x68>
 8002dc8:	200005d4 	.word	0x200005d4
 8002dcc:	200005b4 	.word	0x200005b4
 8002dd0:	20000528 	.word	0x20000528
 8002dd4:	200005b8 	.word	0x200005b8
 8002dd8:	3ff00000 	.word	0x3ff00000
 8002ddc:	200005bc 	.word	0x200005bc
 8002de0:	200005c0 	.word	0x200005c0
 8002de4:	200005c4 	.word	0x200005c4

08002de8 <StartEjecutarModelo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjecutarModelo */
void StartEjecutarModelo(void const * argument)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b092      	sub	sp, #72	@ 0x48
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjecutarModelo */
	  // Calendarización para esta tarea
	  const int period = 40;
 8002df0:	2328      	movs	r3, #40	@ 0x28
 8002df2:	643b      	str	r3, [r7, #64]	@ 0x40
	  const int offset = 6;
 8002df4:	2306      	movs	r3, #6
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  osDelay(offset);
 8002df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f002 feeb 	bl	8005bd6 <osDelay>

	  osEvent r_event;
	  bool stopped = false;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      float mint = 1.45;
 8002e06:	4b70      	ldr	r3, [pc, #448]	@ (8002fc8 <StartEjecutarModelo+0x1e0>)
 8002e08:	63bb      	str	r3, [r7, #56]	@ 0x38
	  float maxt = 100;
 8002e0a:	4b70      	ldr	r3, [pc, #448]	@ (8002fcc <StartEjecutarModelo+0x1e4>)
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
      float max_bt = 2000;
 8002e0e:	4b70      	ldr	r3, [pc, #448]	@ (8002fd0 <StartEjecutarModelo+0x1e8>)
 8002e10:	633b      	str	r3, [r7, #48]	@ 0x30
	  float brake_torque = 0;
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  float throttle = 0;
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  float speed = 0.0;
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
	  float engine = 0.0;
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
	  int8_t gear = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	72fb      	strb	r3, [r7, #11]
	  /* Infinite loop */
	  for(;;)
	  {
		  	// Start
		    osMutexWait(taskMutexHandle, osWaitForever);
 8002e2e:	4b69      	ldr	r3, [pc, #420]	@ (8002fd4 <StartEjecutarModelo+0x1ec>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f04f 31ff 	mov.w	r1, #4294967295
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 fefa 	bl	8005c30 <osMutexWait>
		  	uint32_t start_tick = osKernelSysTick();  // Get start time
 8002e3c:	f002 fe6f 	bl	8005b1e <osKernelSysTick>
 8002e40:	6278      	str	r0, [r7, #36]	@ 0x24
			//DebugTaskTiming('M', osKernelSysTick()); // Ver inicio

			// Obtenemos throttle y brake_torque
			throttle = *(float *)GetAndReplaceValue(throttleHandle);
 8002e42:	4b65      	ldr	r3, [pc, #404]	@ (8002fd8 <StartEjecutarModelo+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f946 	bl	80020d8 <GetAndReplaceValue>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
			throttle = throttle * (maxt - mint) + mint;
 8002e52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e56:	f7fd fe6b 	bl	8000b30 <__aeabi_fsub>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd ff70 	bl	8000d44 <__aeabi_fmul>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4619      	mov	r1, r3
 8002e68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e6a:	f7fd fe63 	bl	8000b34 <__addsf3>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
			brake_torque = *(float *)GetAndReplaceValue(brake_torqueHandle);
 8002e72:	4b5a      	ldr	r3, [pc, #360]	@ (8002fdc <StartEjecutarModelo+0x1f4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f92e 	bl	80020d8 <GetAndReplaceValue>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			brake_torque = brake_torque * max_bt;
 8002e82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e86:	f7fd ff5d 	bl	8000d44 <__aeabi_fmul>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			// Asignamos throttle y brake_torque
			EngTrModel_U.Throttle = throttle; // Get
 8002e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e90:	f7fd faca 	bl	8000428 <__aeabi_f2d>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4951      	ldr	r1, [pc, #324]	@ (8002fe0 <StartEjecutarModelo+0x1f8>)
 8002e9a:	e9c1 2300 	strd	r2, r3, [r1]
			EngTrModel_U.BrakeTorque = brake_torque; // Get
 8002e9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ea0:	f7fd fac2 	bl	8000428 <__aeabi_f2d>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	494d      	ldr	r1, [pc, #308]	@ (8002fe0 <StartEjecutarModelo+0x1f8>)
 8002eaa:	e9c1 2302 	strd	r2, r3, [r1, #8]

			// Ejecutamos el modelo
			EngTrModel_step();
 8002eae:	f7fe fdb7 	bl	8001a20 <EngTrModel_step>

			// Checamos que la velocidad no sea negativa
			if (EngTrModel_Y.VehicleSpeed < 0)
 8002eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe4 <StartEjecutarModelo+0x1fc>)
 8002eb4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	f7fd fd7c 	bl	80009bc <__aeabi_dcmplt>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <StartEjecutarModelo+0xf0>
				EngTrModel_Y.VehicleSpeed = 0;
 8002eca:	4946      	ldr	r1, [pc, #280]	@ (8002fe4 <StartEjecutarModelo+0x1fc>)
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9c1 2302 	strd	r2, r3, [r1, #8]

			// Apply the stopped condition
			if (stopped)
 8002ed8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <StartEjecutarModelo+0x106>
			    EngTrModel_Y.VehicleSpeed = 0;  // Force speed to remain 0 while stopped
 8002ee0:	4940      	ldr	r1, [pc, #256]	@ (8002fe4 <StartEjecutarModelo+0x1fc>)
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c1 2302 	strd	r2, r3, [r1, #8]

			// Update the stopped flag
			stopped = (EngTrModel_Y.VehicleSpeed == 0 && brake_torque > 0);
 8002eee:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe4 <StartEjecutarModelo+0x1fc>)
 8002ef0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	f7fd fd54 	bl	80009a8 <__aeabi_dcmpeq>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <StartEjecutarModelo+0x132>
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f0c:	f7fe f8d6 	bl	80010bc <__aeabi_fcmpgt>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <StartEjecutarModelo+0x132>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <StartEjecutarModelo+0x134>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002f20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

			// Leemos salida del modelo
			speed = EngTrModel_Y.VehicleSpeed;	// Put
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <StartEjecutarModelo+0x1fc>)
 8002f2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f7fd fda7 	bl	8000a88 <__aeabi_d2f>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	613b      	str	r3, [r7, #16]
			engine = EngTrModel_Y.EngineSpeed;	// Put
 8002f3e:	4b29      	ldr	r3, [pc, #164]	@ (8002fe4 <StartEjecutarModelo+0x1fc>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7fd fd9e 	bl	8000a88 <__aeabi_d2f>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
			gear = EngTrModel_Y.Gear;			// Put
 8002f50:	4b24      	ldr	r3, [pc, #144]	@ (8002fe4 <StartEjecutarModelo+0x1fc>)
 8002f52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fd6d 	bl	8000a38 <__aeabi_d2iz>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	72fb      	strb	r3, [r7, #11]

			// Enviamos a queues
			PutValueInQueue(speedHandle, &speed);   // Use the new function to handle speed
 8002f64:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <StartEjecutarModelo+0x200>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f107 0210 	add.w	r2, r7, #16
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f8ce 	bl	8002110 <PutValueInQueue>
			PutValueInQueue(engineHandle, &engine); // Use the new function to handle engine
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <StartEjecutarModelo+0x204>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f107 020c 	add.w	r2, r7, #12
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff f8c6 	bl	8002110 <PutValueInQueue>
			PutValueInQueue(gearHandle, &gear);     // Use the new function to handle gear
 8002f84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <StartEjecutarModelo+0x208>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f107 020b 	add.w	r2, r7, #11
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f8be 	bl	8002110 <PutValueInQueue>

			// Wait until next release time
			osMutexRelease(taskMutexHandle); // Done
 8002f94:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd4 <StartEjecutarModelo+0x1ec>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fe97 	bl	8005ccc <osMutexRelease>
			//DebugTaskTiming('M', osKernelSysTick() - start_tick); // Ver duración
			int cur_tick = osKernelSysTick();
 8002f9e:	f002 fdbe 	bl	8005b1e <osKernelSysTick>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	623b      	str	r3, [r7, #32]
			osDelay(((cur_tick / period) + 1) * period + offset - cur_tick);
 8002fa6:	6a3a      	ldr	r2, [r7, #32]
 8002fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fb2:	fb03 f202 	mul.w	r2, r3, r2
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb8:	441a      	add	r2, r3
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 fe09 	bl	8005bd6 <osDelay>
	  {
 8002fc4:	e733      	b.n	8002e2e <StartEjecutarModelo+0x46>
 8002fc6:	bf00      	nop
 8002fc8:	3fb9999a 	.word	0x3fb9999a
 8002fcc:	42c80000 	.word	0x42c80000
 8002fd0:	44fa0000 	.word	0x44fa0000
 8002fd4:	200005d4 	.word	0x200005d4
 8002fd8:	200005bc 	.word	0x200005bc
 8002fdc:	200005c0 	.word	0x200005c0
 8002fe0:	20000260 	.word	0x20000260
 8002fe4:	20000270 	.word	0x20000270
 8002fe8:	200005c8 	.word	0x200005c8
 8002fec:	200005cc 	.word	0x200005cc
 8002ff0:	200005d0 	.word	0x200005d0

08002ff4 <StartEnviarUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEnviarUART */
void StartEnviarUART(void const * argument)
{
 8002ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff8:	b0e2      	sub	sp, #392	@ 0x188
 8002ffa:	af0a      	add	r7, sp, #40	@ 0x28
 8002ffc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003000:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003004:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEnviarUART */
	  // Calendarización para esta tarea
	  const int period = 40;
 8003006:	2328      	movs	r3, #40	@ 0x28
 8003008:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	  const int offset = 10;
 800300c:	230a      	movs	r3, #10
 800300e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	  osDelay(offset);
 8003012:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fddd 	bl	8005bd6 <osDelay>

	  osEvent r_event;
	  uint8_t msg[256] = "";
 800301c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003020:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	3304      	adds	r3, #4
 800302a:	22fc      	movs	r2, #252	@ 0xfc
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f006 f925 	bl	800927e <memset>
	  int8_t key = -1;			// Queue
 8003034:	23ff      	movs	r3, #255	@ 0xff
 8003036:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
	  uint16_t value = 0;		// Queue
 800303a:	2300      	movs	r3, #0
 800303c:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
	  int8_t steering = 0;		// Queue
 8003040:	2300      	movs	r3, #0
 8003042:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	  int8_t gear = 0;			// Queue
 8003046:	2300      	movs	r3, #0
 8003048:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
	  float throttle;			// Queue
	  float speed = 0.0;		// Queue
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	  float engine = 0.0;		// Queue
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	  float brake_torque = 0;	// Queue
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	  bool transmit = false;
 8003064:	2300      	movs	r3, #0
 8003066:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
	  /* Infinite loop */
	  for(;;)
	  {
		  	// Start
			osMutexWait(taskMutexHandle, osWaitForever);
 800306a:	4b79      	ldr	r3, [pc, #484]	@ (8003250 <StartEnviarUART+0x25c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f04f 31ff 	mov.w	r1, #4294967295
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fddc 	bl	8005c30 <osMutexWait>
			uint32_t start_tick = osKernelSysTick();  // Get start time
 8003078:	f002 fd51 	bl	8005b1e <osKernelSysTick>
 800307c:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
			//DebugTaskTiming('U', osKernelSysTick()); // Ver inicio

			// Get values
			key = *(int8_t *)GetAndReplaceValue(keyHandle);
 8003080:	4b74      	ldr	r3, [pc, #464]	@ (8003254 <StartEnviarUART+0x260>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f827 	bl	80020d8 <GetAndReplaceValue>
 800308a:	4603      	mov	r3, r0
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
			value = *(uint16_t *)GetAndReplaceValue(valueHandle);
 8003092:	4b71      	ldr	r3, [pc, #452]	@ (8003258 <StartEnviarUART+0x264>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f81e 	bl	80020d8 <GetAndReplaceValue>
 800309c:	4603      	mov	r3, r0
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
			steering = *(int8_t *)GetAndReplaceValue(steeringHandle);
 80030a4:	4b6d      	ldr	r3, [pc, #436]	@ (800325c <StartEnviarUART+0x268>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f815 	bl	80020d8 <GetAndReplaceValue>
 80030ae:	4603      	mov	r3, r0
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
			gear = *(int8_t *)GetAndReplaceValue(gearHandle);
 80030b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003260 <StartEnviarUART+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f80c 	bl	80020d8 <GetAndReplaceValue>
 80030c0:	4603      	mov	r3, r0
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
			throttle = *(float *)GetAndReplaceValue(throttleHandle);
 80030c8:	4b66      	ldr	r3, [pc, #408]	@ (8003264 <StartEnviarUART+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f803 	bl	80020d8 <GetAndReplaceValue>
 80030d2:	4603      	mov	r3, r0
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
			speed = *(float *)GetAndReplaceValue(speedHandle);
 80030da:	4b63      	ldr	r3, [pc, #396]	@ (8003268 <StartEnviarUART+0x274>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fffa 	bl	80020d8 <GetAndReplaceValue>
 80030e4:	4603      	mov	r3, r0
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			engine = *(float *)GetAndReplaceValue(engineHandle);
 80030ec:	4b5f      	ldr	r3, [pc, #380]	@ (800326c <StartEnviarUART+0x278>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fff1 	bl	80020d8 <GetAndReplaceValue>
 80030f6:	4603      	mov	r3, r0
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
			brake_torque = *(float *)GetAndReplaceValue(brake_torqueHandle);
 80030fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003270 <StartEnviarUART+0x27c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe ffe8 	bl	80020d8 <GetAndReplaceValue>
 8003108:	4603      	mov	r3, r0
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

			// Check if key 12 or 14 is pressed
			if (key == 12)
 8003110:	f997 3153 	ldrsb.w	r3, [r7, #339]	@ 0x153
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d103      	bne.n	8003120 <StartEnviarUART+0x12c>
				transmit = false;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800311e:	e006      	b.n	800312e <StartEnviarUART+0x13a>
			else if (key == 14)
 8003120:	f997 3153 	ldrsb.w	r3, [r7, #339]	@ 0x153
 8003124:	2b0e      	cmp	r3, #14
 8003126:	d102      	bne.n	800312e <StartEnviarUART+0x13a>
				transmit = true;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f

			// Main sprintf logic for the message
			char throttle_str[10];
			FormatFloat(throttle_str, throttle, false);   // Format throttle
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	2200      	movs	r2, #0
 8003134:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe ff63 	bl	8002004 <FormatFloat>
			sprintf(msg, "Key: %d\tADC: %u\tThr: %s\tBrk: %u\tStr: %d\tG: %u\tEng: %d.%02d\tSpd: %d.%02d\t%s\r\n",
 800313e:	f997 6153 	ldrsb.w	r6, [r7, #339]	@ 0x153
 8003142:	f8b7 8150 	ldrh.w	r8, [r7, #336]	@ 0x150
 8003146:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 800314a:	f7fd ffc1 	bl	80010d0 <__aeabi_f2iz>
 800314e:	6138      	str	r0, [r7, #16]
 8003150:	f997 414f 	ldrsb.w	r4, [r7, #335]	@ 0x14f
 8003154:	f997 514e 	ldrsb.w	r5, [r7, #334]	@ 0x14e
 8003158:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 800315c:	f7fd ffb8 	bl	80010d0 <__aeabi_f2iz>
 8003160:	60f8      	str	r0, [r7, #12]
			        value,
			        throttle_str,
			        (int)brake_torque,
			        steering,
			        gear,
			        (int)speed, (int)((speed - (int)speed) * 100),
 8003162:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8003166:	f7fd ffb3 	bl	80010d0 <__aeabi_f2iz>
 800316a:	4603      	mov	r3, r0
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fd95 	bl	8000c9c <__aeabi_i2f>
 8003172:	4603      	mov	r3, r0
 8003174:	4619      	mov	r1, r3
 8003176:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 800317a:	f7fd fcd9 	bl	8000b30 <__aeabi_fsub>
 800317e:	4603      	mov	r3, r0
 8003180:	493c      	ldr	r1, [pc, #240]	@ (8003274 <StartEnviarUART+0x280>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fdde 	bl	8000d44 <__aeabi_fmul>
 8003188:	4603      	mov	r3, r0
			sprintf(msg, "Key: %d\tADC: %u\tThr: %s\tBrk: %u\tStr: %d\tG: %u\tEng: %d.%02d\tSpd: %d.%02d\t%s\r\n",
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd ffa0 	bl	80010d0 <__aeabi_f2iz>
 8003190:	60b8      	str	r0, [r7, #8]
 8003192:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8003196:	f7fd ff9b 	bl	80010d0 <__aeabi_f2iz>
 800319a:	6078      	str	r0, [r7, #4]
			        (int)engine, (int)((engine - (int)engine) * 100),
 800319c:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80031a0:	f7fd ff96 	bl	80010d0 <__aeabi_f2iz>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fd78 	bl	8000c9c <__aeabi_i2f>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4619      	mov	r1, r3
 80031b0:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80031b4:	f7fd fcbc 	bl	8000b30 <__aeabi_fsub>
 80031b8:	4603      	mov	r3, r0
 80031ba:	492e      	ldr	r1, [pc, #184]	@ (8003274 <StartEnviarUART+0x280>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fdc1 	bl	8000d44 <__aeabi_fmul>
 80031c2:	4603      	mov	r3, r0
			sprintf(msg, "Key: %d\tADC: %u\tThr: %s\tBrk: %u\tStr: %d\tG: %u\tEng: %d.%02d\tSpd: %d.%02d\t%s\r\n",
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd ff83 	bl	80010d0 <__aeabi_f2iz>
 80031ca:	4602      	mov	r2, r0
 80031cc:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <StartEnviarUART+0x1e4>
 80031d4:	4b28      	ldr	r3, [pc, #160]	@ (8003278 <StartEnviarUART+0x284>)
 80031d6:	e000      	b.n	80031da <StartEnviarUART+0x1e6>
 80031d8:	4b28      	ldr	r3, [pc, #160]	@ (800327c <StartEnviarUART+0x288>)
 80031da:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80031de:	9308      	str	r3, [sp, #32]
 80031e0:	9207      	str	r2, [sp, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	9306      	str	r3, [sp, #24]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	9305      	str	r3, [sp, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	9304      	str	r3, [sp, #16]
 80031ee:	9503      	str	r5, [sp, #12]
 80031f0:	9402      	str	r4, [sp, #8]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	4643      	mov	r3, r8
 80031fe:	4632      	mov	r2, r6
 8003200:	491f      	ldr	r1, [pc, #124]	@ (8003280 <StartEnviarUART+0x28c>)
 8003202:	f005 ffd9 	bl	80091b8 <siprintf>
			        transmit ? "\tT" : "\tX");
			printf(msg);
 8003206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800320a:	4618      	mov	r0, r3
 800320c:	f005 ffc2 	bl	8009194 <iprintf>

			// Wait until next release time
			osMutexRelease(taskMutexHandle); // Done
 8003210:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <StartEnviarUART+0x25c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f002 fd59 	bl	8005ccc <osMutexRelease>
			//DebugTaskTiming('U', osKernelSysTick() - start_tick); // Ver duración
			int cur_tick = osKernelSysTick();
 800321a:	f002 fc80 	bl	8005b1e <osKernelSysTick>
 800321e:	4603      	mov	r3, r0
 8003220:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			osDelay(((cur_tick / period) + 1) * period + offset - cur_tick);
 8003224:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003228:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800322c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8003236:	fb03 f202 	mul.w	r2, r3, r2
 800323a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800323e:	441a      	add	r2, r3
 8003240:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	4618      	mov	r0, r3
 8003248:	f002 fcc5 	bl	8005bd6 <osDelay>
	  {
 800324c:	e70d      	b.n	800306a <StartEnviarUART+0x76>
 800324e:	bf00      	nop
 8003250:	200005d4 	.word	0x200005d4
 8003254:	200005b4 	.word	0x200005b4
 8003258:	200005b8 	.word	0x200005b8
 800325c:	200005c4 	.word	0x200005c4
 8003260:	200005d0 	.word	0x200005d0
 8003264:	200005bc 	.word	0x200005bc
 8003268:	200005c8 	.word	0x200005c8
 800326c:	200005cc 	.word	0x200005cc
 8003270:	200005c0 	.word	0x200005c0
 8003274:	42c80000 	.word	0x42c80000
 8003278:	0800c614 	.word	0x0800c614
 800327c:	0800c618 	.word	0x0800c618
 8003280:	0800c61c 	.word	0x0800c61c

08003284 <StartEnviarLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEnviarLCD */
void StartEnviarLCD(void const * argument)
{
 8003284:	b5b0      	push	{r4, r5, r7, lr}
 8003286:	b0a8      	sub	sp, #160	@ 0xa0
 8003288:	af02      	add	r7, sp, #8
 800328a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEnviarLCD */
	  LCD_Init();
 800328c:	f7ff f93a 	bl	8002504 <LCD_Init>
	  // Calendarización para esta tarea
	  const int period = 120;
 8003290:	2378      	movs	r3, #120	@ 0x78
 8003292:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  const int offset = 17;
 8003296:	2311      	movs	r3, #17
 8003298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  const int cycle_duration = 5000;
 800329c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  osDelay(offset);
 80032a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fc94 	bl	8005bd6 <osDelay>

	  osEvent r_event;
	  char lcd_msg[33] = "";
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032b6:	221d      	movs	r2, #29
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f005 ffdf 	bl	800927e <memset>
	  int8_t key = -1, prev_key = -1;  // Current and previous key state
 80032c0:	23ff      	movs	r3, #255	@ 0xff
 80032c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032c6:	23ff      	movs	r3, #255	@ 0xff
 80032c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	  int display_counter = 0;        // Counter to manually cycle through displays
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	  const int num_displays = 4;     // Total number of displays
 80032d2:	2304      	movs	r3, #4
 80032d4:	67bb      	str	r3, [r7, #120]	@ 0x78

	  uint16_t value = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	  float brake_torque = 0;
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	673b      	str	r3, [r7, #112]	@ 0x70
	  float throttle = 0;
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  int8_t steering = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	  int8_t gear = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
	  float speed = 0.0;
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	667b      	str	r3, [r7, #100]	@ 0x64
	  float engine = 0.0;
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	663b      	str	r3, [r7, #96]	@ 0x60

	  /* Infinite loop */
	  for(;;)
	  {
		// Start
		osMutexWait(taskMutexHandle, osWaitForever);
 8003300:	4b70      	ldr	r3, [pc, #448]	@ (80034c4 <StartEnviarLCD+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	4618      	mov	r0, r3
 800330a:	f002 fc91 	bl	8005c30 <osMutexWait>
		uint32_t start_tick = osKernelSysTick();  // Get start time
 800330e:	f002 fc06 	bl	8005b1e <osKernelSysTick>
 8003312:	65f8      	str	r0, [r7, #92]	@ 0x5c
		//DebugTaskTiming('P', osKernelSysTick()); // Ver inicio

		// Get values
		key = *(int8_t *)GetAndReplaceValue(keyHandle);
 8003314:	4b6c      	ldr	r3, [pc, #432]	@ (80034c8 <StartEnviarLCD+0x244>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fedd 	bl	80020d8 <GetAndReplaceValue>
 800331e:	4603      	mov	r3, r0
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		value = *(uint16_t *)GetAndReplaceValue(valueHandle);
 8003326:	4b69      	ldr	r3, [pc, #420]	@ (80034cc <StartEnviarLCD+0x248>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fed4 	bl	80020d8 <GetAndReplaceValue>
 8003330:	4603      	mov	r3, r0
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		brake_torque = *(float *)GetAndReplaceValue(brake_torqueHandle);
 8003338:	4b65      	ldr	r3, [pc, #404]	@ (80034d0 <StartEnviarLCD+0x24c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fecb 	bl	80020d8 <GetAndReplaceValue>
 8003342:	4603      	mov	r3, r0
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	673b      	str	r3, [r7, #112]	@ 0x70
		throttle = *(float *)GetAndReplaceValue(throttleHandle);
 8003348:	4b62      	ldr	r3, [pc, #392]	@ (80034d4 <StartEnviarLCD+0x250>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fec3 	bl	80020d8 <GetAndReplaceValue>
 8003352:	4603      	mov	r3, r0
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	66fb      	str	r3, [r7, #108]	@ 0x6c
		steering = *(int8_t *)GetAndReplaceValue(steeringHandle);
 8003358:	4b5f      	ldr	r3, [pc, #380]	@ (80034d8 <StartEnviarLCD+0x254>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe febb 	bl	80020d8 <GetAndReplaceValue>
 8003362:	4603      	mov	r3, r0
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		gear = *(int8_t *)GetAndReplaceValue(gearHandle);
 800336a:	4b5c      	ldr	r3, [pc, #368]	@ (80034dc <StartEnviarLCD+0x258>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe feb2 	bl	80020d8 <GetAndReplaceValue>
 8003374:	4603      	mov	r3, r0
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		speed = *(float *)GetAndReplaceValue(speedHandle);
 800337c:	4b58      	ldr	r3, [pc, #352]	@ (80034e0 <StartEnviarLCD+0x25c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fea9 	bl	80020d8 <GetAndReplaceValue>
 8003386:	4603      	mov	r3, r0
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	667b      	str	r3, [r7, #100]	@ 0x64
		engine = *(float *)GetAndReplaceValue(engineHandle);
 800338c:	4b55      	ldr	r3, [pc, #340]	@ (80034e4 <StartEnviarLCD+0x260>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fea1 	bl	80020d8 <GetAndReplaceValue>
 8003396:	4603      	mov	r3, r0
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	663b      	str	r3, [r7, #96]	@ 0x60

		// Check for key press event (key changes from unpressed to pressed)
		if (key == 13 && prev_key != 13)
 800339c:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80033a0:	2b0d      	cmp	r3, #13
 80033a2:	d10f      	bne.n	80033c4 <StartEnviarLCD+0x140>
 80033a4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80033a8:	2b0d      	cmp	r3, #13
 80033aa:	d00b      	beq.n	80033c4 <StartEnviarLCD+0x140>
			display_counter = (display_counter + 1) % num_displays;  // Cycle display manually
 80033ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033b0:	3301      	adds	r3, #1
 80033b2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80033b4:	fb93 f2f2 	sdiv	r2, r3, r2
 80033b8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80033ba:	fb01 f202 	mul.w	r2, r1, r2
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		prev_key = key;  // Update previous key state
 80033c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80033c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

		// Determine the active display
		int active_display;
		if (display_counter == 0) {
 80033cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d113      	bne.n	80033fc <StartEnviarLCD+0x178>
			// Automatic cycling mode
			int tick = osKernelSysTick();
 80033d4:	f002 fba3 	bl	8005b1e <osKernelSysTick>
 80033d8:	4603      	mov	r3, r0
 80033da:	65bb      	str	r3, [r7, #88]	@ 0x58
			active_display = 1 + ((tick / cycle_duration) % (num_displays - 1));  // Alternates between 1 and 2
 80033dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80033e6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80033e8:	3a01      	subs	r2, #1
 80033ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80033ee:	fb01 f202 	mul.w	r2, r1, r2
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	3301      	adds	r3, #1
 80033f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033fa:	e003      	b.n	8003404 <StartEnviarLCD+0x180>
		} else {
			// Manual selection mode
			active_display = display_counter;
 80033fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		}

		if (active_display == 1) {
 8003404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d112      	bne.n	8003432 <StartEnviarLCD+0x1ae>
		    // Display 1: Outputs del modelo
		    sprintf(lcd_msg, "G:%d Eng:%d\nSpd:%d", gear, (int)engine, (int)speed);
 800340c:	f997 406a 	ldrsb.w	r4, [r7, #106]	@ 0x6a
 8003410:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003412:	f7fd fe5d 	bl	80010d0 <__aeabi_f2iz>
 8003416:	4605      	mov	r5, r0
 8003418:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800341a:	f7fd fe59 	bl	80010d0 <__aeabi_f2iz>
 800341e:	4603      	mov	r3, r0
 8003420:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	462b      	mov	r3, r5
 8003428:	4622      	mov	r2, r4
 800342a:	492f      	ldr	r1, [pc, #188]	@ (80034e8 <StartEnviarLCD+0x264>)
 800342c:	f005 fec4 	bl	80091b8 <siprintf>
 8003430:	e027      	b.n	8003482 <StartEnviarLCD+0x1fe>
		} else if (active_display == 2) {
 8003432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003436:	2b02      	cmp	r3, #2
 8003438:	d116      	bne.n	8003468 <StartEnviarLCD+0x1e4>
			// Display 2: Inputs del modelo
		    char throttle_str[10], brake_torque_str[10];
		    FormatFloat(throttle_str, throttle, true);         // Format throttle with fixed decimals
 800343a:	f107 0318 	add.w	r3, r7, #24
 800343e:	2201      	movs	r2, #1
 8003440:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fdde 	bl	8002004 <FormatFloat>

		    sprintf(lcd_msg, "T:%s B:%d\nS:%d", throttle_str, (int)brake_torque, (int)steering);
 8003448:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800344a:	f7fd fe41 	bl	80010d0 <__aeabi_f2iz>
 800344e:	4601      	mov	r1, r0
 8003450:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 8003454:	f107 0218 	add.w	r2, r7, #24
 8003458:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	460b      	mov	r3, r1
 8003460:	4922      	ldr	r1, [pc, #136]	@ (80034ec <StartEnviarLCD+0x268>)
 8003462:	f005 fea9 	bl	80091b8 <siprintf>
 8003466:	e00c      	b.n	8003482 <StartEnviarLCD+0x1fe>
		} else if (active_display == 3) {
 8003468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800346c:	2b03      	cmp	r3, #3
 800346e:	d108      	bne.n	8003482 <StartEnviarLCD+0x1fe>
		    // Display 3: Inputs del sistema
		    sprintf(lcd_msg, "Key:%d\nADC:%u",
 8003470:	f997 207f 	ldrsb.w	r2, [r7, #127]	@ 0x7f
 8003474:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003478:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800347c:	491c      	ldr	r1, [pc, #112]	@ (80034f0 <StartEnviarLCD+0x26c>)
 800347e:	f005 fe9b 	bl	80091b8 <siprintf>
		            key,                                // Key as integer
		            value);                             // ADC value as unsigned integer
		}

		LCD_Update(lcd_msg);
 8003482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f87e 	bl	8002588 <LCD_Update>

		// Wait until next release time
		osMutexRelease(taskMutexHandle); // Done
 800348c:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <StartEnviarLCD+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f002 fc1b 	bl	8005ccc <osMutexRelease>
		//DebugTaskTiming('P', osKernelSysTick() - start_tick); // Ver duración
		uint32_t cur_tick = osKernelSysTick();
 8003496:	f002 fb42 	bl	8005b1e <osKernelSysTick>
 800349a:	6578      	str	r0, [r7, #84]	@ 0x54
		osDelay(((cur_tick / period) + 1) * period + offset - cur_tick);
 800349c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80034ac:	fb03 f202 	mul.w	r2, r3, r2
 80034b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034b4:	441a      	add	r2, r3
 80034b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fb8b 	bl	8005bd6 <osDelay>
	  {
 80034c0:	e71e      	b.n	8003300 <StartEnviarLCD+0x7c>
 80034c2:	bf00      	nop
 80034c4:	200005d4 	.word	0x200005d4
 80034c8:	200005b4 	.word	0x200005b4
 80034cc:	200005b8 	.word	0x200005b8
 80034d0:	200005c0 	.word	0x200005c0
 80034d4:	200005bc 	.word	0x200005bc
 80034d8:	200005c4 	.word	0x200005c4
 80034dc:	200005d0 	.word	0x200005d0
 80034e0:	200005c8 	.word	0x200005c8
 80034e4:	200005cc 	.word	0x200005cc
 80034e8:	0800c66c 	.word	0x0800c66c
 80034ec:	0800c680 	.word	0x0800c680
 80034f0:	0800c690 	.word	0x0800c690

080034f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003506:	f000 faf1 	bl	8003aec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40000800 	.word	0x40000800

08003518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800351c:	b672      	cpsid	i
}
 800351e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <Error_Handler+0x8>

08003524 <rtIsInf>:
  rtMinusInfF = rtGetMinusInfF();
}

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <rtIsInf+0x40>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003538:	f7fd fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <rtIsInf+0x32>
 8003542:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <rtIsInf+0x44>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800354c:	f7fd fa2c 	bl	80009a8 <__aeabi_dcmpeq>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <rtIsInf+0x36>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <rtIsInf+0x38>
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200005f8 	.word	0x200005f8
 8003568:	20000600 	.word	0x20000600

0800356c <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800357c:	2340      	movs	r3, #64	@ 0x40
 800357e:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b20      	cmp	r3, #32
 8003584:	d10b      	bne.n	800359e <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 8003586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800358a:	f7fd fa7d 	bl	8000a88 <__aeabi_d2f>
 800358e:	4603      	mov	r3, r0
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f84d 	bl	8003630 <rtIsNaNF>
 8003596:	4603      	mov	r3, r0
 8003598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800359c:	e040      	b.n	8003620 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 800359e:	2301      	movs	r3, #1
 80035a0:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80035a2:	f107 031c 	add.w	r3, r7, #28
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 80035b4:	7ffb      	ldrb	r3, [r7, #31]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <rtIsNaN+0x54>
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d018      	beq.n	80035f0 <rtIsNaN+0x84>
 80035be:	e02f      	b.n	8003620 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 80035c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <rtIsNaN+0xc0>)
 80035cc:	4013      	ands	r3, r2
                             0x7FF00000 &&
 80035ce:	4a17      	ldr	r2, [pc, #92]	@ (800362c <rtIsNaN+0xc0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d109      	bne.n	80035e8 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 80035de:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <rtIsNaN+0x7e>
 80035e8:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80035ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80035ee:	e017      	b.n	8003620 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 80035f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <rtIsNaN+0xc0>)
 80035fc:	4013      	ands	r3, r2
                             0x7FF00000 &&
 80035fe:	4a0b      	ldr	r2, [pc, #44]	@ (800362c <rtIsNaN+0xc0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d109      	bne.n	8003618 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 800360e:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <rtIsNaN+0xac>
                             0x7FF00000 &&
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <rtIsNaN+0xae>
 8003618:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800361a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 800361e:	bf00      	nop
      }
    }
  }

  return result;
 8003620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	@ 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	7ff00000 	.word	0x7ff00000

08003630 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 43ff 	and.w	r3, r3, #2139095040	@ 0x7f800000
 8003642:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003646:	d106      	bne.n	8003656 <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <rtIsNaNF+0x26>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <rtIsNaNF+0x28>
 8003656:	2300      	movs	r3, #0
 8003658:	b2db      	uxtb	r3, r3
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800366a:	4b18      	ldr	r3, [pc, #96]	@ (80036cc <HAL_MspInit+0x68>)
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	4a17      	ldr	r2, [pc, #92]	@ (80036cc <HAL_MspInit+0x68>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6193      	str	r3, [r2, #24]
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <HAL_MspInit+0x68>)
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_MspInit+0x68>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a11      	ldr	r2, [pc, #68]	@ (80036cc <HAL_MspInit+0x68>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <HAL_MspInit+0x68>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	210f      	movs	r1, #15
 800369e:	f06f 0001 	mvn.w	r0, #1
 80036a2:	f000 ff44 	bl	800452e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036a6:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_MspInit+0x6c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	4a04      	ldr	r2, [pc, #16]	@ (80036d0 <HAL_MspInit+0x6c>)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40010000 	.word	0x40010000

080036d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0310 	add.w	r3, r7, #16
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <HAL_ADC_MspInit+0x6c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d121      	bne.n	8003738 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_ADC_MspInit+0x70>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <HAL_ADC_MspInit+0x70>)
 80036fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036fe:	6193      	str	r3, [r2, #24]
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_ADC_MspInit+0x70>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <HAL_ADC_MspInit+0x70>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	4a0c      	ldr	r2, [pc, #48]	@ (8003744 <HAL_ADC_MspInit+0x70>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	6193      	str	r3, [r2, #24]
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <HAL_ADC_MspInit+0x70>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003724:	2304      	movs	r3, #4
 8003726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003728:	2303      	movs	r3, #3
 800372a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372c:	f107 0310 	add.w	r3, r7, #16
 8003730:	4619      	mov	r1, r3
 8003732:	4805      	ldr	r0, [pc, #20]	@ (8003748 <HAL_ADC_MspInit+0x74>)
 8003734:	f000 ff26 	bl	8004584 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003738:	bf00      	nop
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40012400 	.word	0x40012400
 8003744:	40021000 	.word	0x40021000
 8003748:	40011000 	.word	0x40011000

0800374c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a15      	ldr	r2, [pc, #84]	@ (80037bc <HAL_UART_MspInit+0x70>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d123      	bne.n	80037b4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_UART_MspInit+0x74>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a13      	ldr	r2, [pc, #76]	@ (80037c0 <HAL_UART_MspInit+0x74>)
 8003772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003776:	61d3      	str	r3, [r2, #28]
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_UART_MspInit+0x74>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_UART_MspInit+0x74>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	4a0d      	ldr	r2, [pc, #52]	@ (80037c0 <HAL_UART_MspInit+0x74>)
 800378a:	f043 0304 	orr.w	r3, r3, #4
 800378e:	6193      	str	r3, [r2, #24]
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_UART_MspInit+0x74>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800379c:	230c      	movs	r3, #12
 800379e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2302      	movs	r3, #2
 80037a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	4619      	mov	r1, r3
 80037ae:	4805      	ldr	r0, [pc, #20]	@ (80037c4 <HAL_UART_MspInit+0x78>)
 80037b0:	f000 fee8 	bl	8004584 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80037b4:	bf00      	nop
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40004400 	.word	0x40004400
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40010800 	.word	0x40010800

080037c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08e      	sub	sp, #56	@ 0x38
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80037de:	4b34      	ldr	r3, [pc, #208]	@ (80038b0 <HAL_InitTick+0xe8>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4a33      	ldr	r2, [pc, #204]	@ (80038b0 <HAL_InitTick+0xe8>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	61d3      	str	r3, [r2, #28]
 80037ea:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <HAL_InitTick+0xe8>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037f6:	f107 0210 	add.w	r2, r7, #16
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fc87 	bl	8005114 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003810:	f001 fc58 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8003814:	6378      	str	r0, [r7, #52]	@ 0x34
 8003816:	e004      	b.n	8003822 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003818:	f001 fc54 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 800381c:	4603      	mov	r3, r0
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	4a23      	ldr	r2, [pc, #140]	@ (80038b4 <HAL_InitTick+0xec>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0c9b      	lsrs	r3, r3, #18
 800382c:	3b01      	subs	r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003830:	4b21      	ldr	r3, [pc, #132]	@ (80038b8 <HAL_InitTick+0xf0>)
 8003832:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <HAL_InitTick+0xf4>)
 8003834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003836:	4b20      	ldr	r3, [pc, #128]	@ (80038b8 <HAL_InitTick+0xf0>)
 8003838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800383c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800383e:	4a1e      	ldr	r2, [pc, #120]	@ (80038b8 <HAL_InitTick+0xf0>)
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003844:	4b1c      	ldr	r3, [pc, #112]	@ (80038b8 <HAL_InitTick+0xf0>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <HAL_InitTick+0xf0>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <HAL_InitTick+0xf0>)
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003856:	4818      	ldr	r0, [pc, #96]	@ (80038b8 <HAL_InitTick+0xf0>)
 8003858:	f001 fe16 	bl	8005488 <HAL_TIM_Base_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003862:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11b      	bne.n	80038a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800386a:	4813      	ldr	r0, [pc, #76]	@ (80038b8 <HAL_InitTick+0xf0>)
 800386c:	f001 fe64 	bl	8005538 <HAL_TIM_Base_Start_IT>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003876:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800387a:	2b00      	cmp	r3, #0
 800387c:	d111      	bne.n	80038a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800387e:	201e      	movs	r0, #30
 8003880:	f000 fe71 	bl	8004566 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d808      	bhi.n	800389c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800388a:	2200      	movs	r2, #0
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	201e      	movs	r0, #30
 8003890:	f000 fe4d 	bl	800452e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003894:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <HAL_InitTick+0xf8>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e002      	b.n	80038a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80038a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3738      	adds	r7, #56	@ 0x38
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	20000610 	.word	0x20000610
 80038bc:	40000800 	.word	0x40000800
 80038c0:	20000004 	.word	0x20000004

080038c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <NMI_Handler+0x4>

080038cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <HardFault_Handler+0x4>

080038d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <MemManage_Handler+0x4>

080038dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <BusFault_Handler+0x4>

080038e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <UsageFault_Handler+0x4>

080038ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038fc:	4802      	ldr	r0, [pc, #8]	@ (8003908 <TIM4_IRQHandler+0x10>)
 80038fe:	f001 fe6d 	bl	80055dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000610 	.word	0x20000610

0800390c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003910:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003914:	f000 ffea 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return 1;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <_kill>:

int _kill(int pid, int sig)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003934:	f005 fd4c 	bl	80093d0 <__errno>
 8003938:	4603      	mov	r3, r0
 800393a:	2216      	movs	r2, #22
 800393c:	601a      	str	r2, [r3, #0]
  return -1;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_exit>:

void _exit (int status)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003952:	f04f 31ff 	mov.w	r1, #4294967295
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffe7 	bl	800392a <_kill>
  while (1) {}    /* Make sure we hang here */
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <_exit+0x12>

08003960 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e00a      	b.n	8003988 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003972:	f3af 8000 	nop.w
 8003976:	4601      	mov	r1, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60ba      	str	r2, [r7, #8]
 800397e:	b2ca      	uxtb	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3301      	adds	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	dbf0      	blt.n	8003972 <_read+0x12>
  }

  return len;
 8003990:	687b      	ldr	r3, [r7, #4]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_close>:
  }
  return len;
}

int _close(int file)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039c0:	605a      	str	r2, [r3, #4]
  return 0;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <_isatty>:

int _isatty(int file)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039d6:	2301      	movs	r3, #1
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
	...

080039fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a04:	4a14      	ldr	r2, [pc, #80]	@ (8003a58 <_sbrk+0x5c>)
 8003a06:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <_sbrk+0x60>)
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a10:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <_sbrk+0x64>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <_sbrk+0x64>)
 8003a1a:	4a12      	ldr	r2, [pc, #72]	@ (8003a64 <_sbrk+0x68>)
 8003a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <_sbrk+0x64>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d207      	bcs.n	8003a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a2c:	f005 fcd0 	bl	80093d0 <__errno>
 8003a30:	4603      	mov	r3, r0
 8003a32:	220c      	movs	r2, #12
 8003a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	e009      	b.n	8003a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <_sbrk+0x64>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <_sbrk+0x64>)
 8003a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20005000 	.word	0x20005000
 8003a5c:	00000400 	.word	0x00000400
 8003a60:	20000658 	.word	0x20000658
 8003a64:	20004908 	.word	0x20004908

08003a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a74:	f7ff fff8 	bl	8003a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a78:	480b      	ldr	r0, [pc, #44]	@ (8003aa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a7a:	490c      	ldr	r1, [pc, #48]	@ (8003aac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a80:	e002      	b.n	8003a88 <LoopCopyDataInit>

08003a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a86:	3304      	adds	r3, #4

08003a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a8c:	d3f9      	bcc.n	8003a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8e:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a90:	4c09      	ldr	r4, [pc, #36]	@ (8003ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a94:	e001      	b.n	8003a9a <LoopFillZerobss>

08003a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a98:	3204      	adds	r2, #4

08003a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a9c:	d3fb      	bcc.n	8003a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a9e:	f005 fc9d 	bl	80093dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003aa2:	f7fe fdef 	bl	8002684 <main>
  bx lr
 8003aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8003aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003ab0:	0800d2d8 	.word	0x0800d2d8
  ldr r2, =_sbss
 8003ab4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003ab8:	20004908 	.word	0x20004908

08003abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003abc:	e7fe      	b.n	8003abc <ADC1_2_IRQHandler>
	...

08003ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ac4:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <HAL_Init+0x28>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a07      	ldr	r2, [pc, #28]	@ (8003ae8 <HAL_Init+0x28>)
 8003aca:	f043 0310 	orr.w	r3, r3, #16
 8003ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f000 fd21 	bl	8004518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ad6:	200f      	movs	r0, #15
 8003ad8:	f7ff fe76 	bl	80037c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003adc:	f7ff fdc2 	bl	8003664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40022000 	.word	0x40022000

08003aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af0:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_IncTick+0x1c>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <HAL_IncTick+0x20>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	4a03      	ldr	r2, [pc, #12]	@ (8003b0c <HAL_IncTick+0x20>)
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	2000065c 	.word	0x2000065c

08003b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return uwTick;
 8003b14:	4b02      	ldr	r3, [pc, #8]	@ (8003b20 <HAL_GetTick+0x10>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	2000065c 	.word	0x2000065c

08003b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff fff0 	bl	8003b10 <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d005      	beq.n	8003b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <HAL_Delay+0x44>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b4a:	bf00      	nop
 8003b4c:	f7ff ffe0 	bl	8003b10 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d8f7      	bhi.n	8003b4c <HAL_Delay+0x28>
  {
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000008 	.word	0x20000008

08003b6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0be      	b.n	8003d0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fd92 	bl	80036d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fbc5 	bl	8004340 <ADC_ConversionStop_Disable>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 8099 	bne.w	8003cfa <HAL_ADC_Init+0x18e>
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 8095 	bne.w	8003cfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bd8:	f023 0302 	bic.w	r3, r3, #2
 8003bdc:	f043 0202 	orr.w	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003bec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7b1b      	ldrb	r3, [r3, #12]
 8003bf2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003bf4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c04:	d003      	beq.n	8003c0e <HAL_ADC_Init+0xa2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_ADC_Init+0xa8>
 8003c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c12:	e000      	b.n	8003c16 <HAL_ADC_Init+0xaa>
 8003c14:	2300      	movs	r3, #0
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7d1b      	ldrb	r3, [r3, #20]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d119      	bne.n	8003c58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7b1b      	ldrb	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	035a      	lsls	r2, r3, #13
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e00b      	b.n	8003c58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	4b28      	ldr	r3, [pc, #160]	@ (8003d14 <HAL_ADC_Init+0x1a8>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c88:	d003      	beq.n	8003c92 <HAL_ADC_Init+0x126>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d104      	bne.n	8003c9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	051b      	lsls	r3, r3, #20
 8003c9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	4b18      	ldr	r3, [pc, #96]	@ (8003d18 <HAL_ADC_Init+0x1ac>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003cd6:	e018      	b.n	8003d0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	f023 0312 	bic.w	r3, r3, #18
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003cf8:	e007      	b.n	8003d0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	ffe1f7fd 	.word	0xffe1f7fd
 8003d18:	ff1f0efe 	.word	0xff1f0efe

08003d1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_Start+0x1a>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e098      	b.n	8003e68 <HAL_ADC_Start+0x14c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 faa4 	bl	800428c <ADC_Enable>
 8003d44:	4603      	mov	r3, r0
 8003d46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 8087 	bne.w	8003e5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a41      	ldr	r2, [pc, #260]	@ (8003e70 <HAL_ADC_Start+0x154>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d105      	bne.n	8003d7a <HAL_ADC_Start+0x5e>
 8003d6e:	4b41      	ldr	r3, [pc, #260]	@ (8003e74 <HAL_ADC_Start+0x158>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d115      	bne.n	8003da6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d026      	beq.n	8003de2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d9c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003da4:	e01d      	b.n	8003de2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2f      	ldr	r2, [pc, #188]	@ (8003e74 <HAL_ADC_Start+0x158>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_ADC_Start+0xaa>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <HAL_ADC_Start+0x154>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10d      	bne.n	8003de2 <HAL_ADC_Start+0xc6>
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <HAL_ADC_Start+0x158>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df2:	f023 0206 	bic.w	r2, r3, #6
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003dfa:	e002      	b.n	8003e02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f06f 0202 	mvn.w	r2, #2
 8003e12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003e1e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003e22:	d113      	bne.n	8003e4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e28:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <HAL_ADC_Start+0x154>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d105      	bne.n	8003e3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_ADC_Start+0x158>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	e00c      	b.n	8003e66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	e003      	b.n	8003e66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40012800 	.word	0x40012800
 8003e74:	40012400 	.word	0x40012400

08003e78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e8e:	f7ff fe3f 	bl	8003b10 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e0d3      	b.n	8004062 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d131      	bne.n	8003f2c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d12a      	bne.n	8003f2c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ed6:	e021      	b.n	8003f1c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d01d      	beq.n	8003f1c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_ADC_PollForConversion+0x7e>
 8003ee6:	f7ff fe13 	bl	8003b10 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d212      	bcs.n	8003f1c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0a2      	b.n	8004062 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0d6      	beq.n	8003ed8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003f2a:	e070      	b.n	800400e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800406c <HAL_ADC_PollForConversion+0x1f4>)
 8003f2e:	681c      	ldr	r4, [r3, #0]
 8003f30:	2002      	movs	r0, #2
 8003f32:	f001 f9f3 	bl	800531c <HAL_RCCEx_GetPeriphCLKFreq>
 8003f36:	4603      	mov	r3, r0
 8003f38:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	4b4b      	ldr	r3, [pc, #300]	@ (8004070 <HAL_ADC_PollForConversion+0x1f8>)
 8003f44:	400b      	ands	r3, r1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d118      	bne.n	8003f7c <HAL_ADC_PollForConversion+0x104>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68d9      	ldr	r1, [r3, #12]
 8003f50:	4b48      	ldr	r3, [pc, #288]	@ (8004074 <HAL_ADC_PollForConversion+0x1fc>)
 8003f52:	400b      	ands	r3, r1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d111      	bne.n	8003f7c <HAL_ADC_PollForConversion+0x104>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6919      	ldr	r1, [r3, #16]
 8003f5e:	4b46      	ldr	r3, [pc, #280]	@ (8004078 <HAL_ADC_PollForConversion+0x200>)
 8003f60:	400b      	ands	r3, r1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <HAL_ADC_PollForConversion+0x100>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68d9      	ldr	r1, [r3, #12]
 8003f6c:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_ADC_PollForConversion+0x204>)
 8003f6e:	400b      	ands	r3, r1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_ADC_PollForConversion+0x100>
 8003f74:	2314      	movs	r3, #20
 8003f76:	e020      	b.n	8003fba <HAL_ADC_PollForConversion+0x142>
 8003f78:	2329      	movs	r3, #41	@ 0x29
 8003f7a:	e01e      	b.n	8003fba <HAL_ADC_PollForConversion+0x142>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6919      	ldr	r1, [r3, #16]
 8003f82:	4b3d      	ldr	r3, [pc, #244]	@ (8004078 <HAL_ADC_PollForConversion+0x200>)
 8003f84:	400b      	ands	r3, r1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_ADC_PollForConversion+0x120>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68d9      	ldr	r1, [r3, #12]
 8003f90:	4b3a      	ldr	r3, [pc, #232]	@ (800407c <HAL_ADC_PollForConversion+0x204>)
 8003f92:	400b      	ands	r3, r1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <HAL_ADC_PollForConversion+0x13c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6919      	ldr	r1, [r3, #16]
 8003f9e:	4b38      	ldr	r3, [pc, #224]	@ (8004080 <HAL_ADC_PollForConversion+0x208>)
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x140>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	4b34      	ldr	r3, [pc, #208]	@ (8004080 <HAL_ADC_PollForConversion+0x208>)
 8003fae:	400b      	ands	r3, r1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x140>
 8003fb4:	2354      	movs	r3, #84	@ 0x54
 8003fb6:	e000      	b.n	8003fba <HAL_ADC_PollForConversion+0x142>
 8003fb8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003fc0:	e021      	b.n	8004006 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d01a      	beq.n	8004000 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <HAL_ADC_PollForConversion+0x168>
 8003fd0:	f7ff fd9e 	bl	8003b10 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d20f      	bcs.n	8004000 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d90b      	bls.n	8004000 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	f043 0204 	orr.w	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e030      	b.n	8004062 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3301      	adds	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	429a      	cmp	r2, r3
 800400c:	d8d9      	bhi.n	8003fc2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f06f 0212 	mvn.w	r2, #18
 8004016:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800402e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004032:	d115      	bne.n	8004060 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004038:	2b00      	cmp	r3, #0
 800403a:	d111      	bne.n	8004060 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	bf00      	nop
 800406c:	20000000 	.word	0x20000000
 8004070:	24924924 	.word	0x24924924
 8004074:	00924924 	.word	0x00924924
 8004078:	12492492 	.word	0x12492492
 800407c:	00492492 	.word	0x00492492
 8004080:	00249249 	.word	0x00249249

08004084 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x20>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e0dc      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1da>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d81c      	bhi.n	8004106 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	3b05      	subs	r3, #5
 80040de:	221f      	movs	r2, #31
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	4019      	ands	r1, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	3b05      	subs	r3, #5
 80040f8:	fa00 f203 	lsl.w	r2, r0, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34
 8004104:	e03c      	b.n	8004180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b0c      	cmp	r3, #12
 800410c:	d81c      	bhi.n	8004148 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	3b23      	subs	r3, #35	@ 0x23
 8004120:	221f      	movs	r2, #31
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	4019      	ands	r1, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	3b23      	subs	r3, #35	@ 0x23
 800413a:	fa00 f203 	lsl.w	r2, r0, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30
 8004146:	e01b      	b.n	8004180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	3b41      	subs	r3, #65	@ 0x41
 800415a:	221f      	movs	r2, #31
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	4019      	ands	r1, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	3b41      	subs	r3, #65	@ 0x41
 8004174:	fa00 f203 	lsl.w	r2, r0, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b09      	cmp	r3, #9
 8004186:	d91c      	bls.n	80041c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68d9      	ldr	r1, [r3, #12]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	3b1e      	subs	r3, #30
 800419a:	2207      	movs	r2, #7
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	4019      	ands	r1, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6898      	ldr	r0, [r3, #8]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	3b1e      	subs	r3, #30
 80041b4:	fa00 f203 	lsl.w	r2, r0, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e019      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6919      	ldr	r1, [r3, #16]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	2207      	movs	r2, #7
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	4019      	ands	r1, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6898      	ldr	r0, [r3, #8]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	fa00 f203 	lsl.w	r2, r0, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d003      	beq.n	8004206 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004202:	2b11      	cmp	r3, #17
 8004204:	d132      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1d      	ldr	r2, [pc, #116]	@ (8004280 <HAL_ADC_ConfigChannel+0x1e4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d125      	bne.n	800425c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d126      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800422c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b10      	cmp	r3, #16
 8004234:	d11a      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004236:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <HAL_ADC_ConfigChannel+0x1e8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a13      	ldr	r2, [pc, #76]	@ (8004288 <HAL_ADC_ConfigChannel+0x1ec>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0c9a      	lsrs	r2, r3, #18
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800424c:	e002      	b.n	8004254 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3b01      	subs	r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f9      	bne.n	800424e <HAL_ADC_ConfigChannel+0x1b2>
 800425a:	e007      	b.n	800426c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012400 	.word	0x40012400
 8004284:	20000000 	.word	0x20000000
 8004288:	431bde83 	.word	0x431bde83

0800428c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d040      	beq.n	800432c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004338 <ADC_Enable+0xac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <ADC_Enable+0xb0>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	0c9b      	lsrs	r3, r3, #18
 80042c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80042c8:	e002      	b.n	80042d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f9      	bne.n	80042ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042d6:	f7ff fc1b 	bl	8003b10 <HAL_GetTick>
 80042da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80042dc:	e01f      	b.n	800431e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042de:	f7ff fc17 	bl	8003b10 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d918      	bls.n	800431e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d011      	beq.n	800431e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	f043 0210 	orr.w	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d1d8      	bne.n	80042de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000000 	.word	0x20000000
 800433c:	431bde83 	.word	0x431bde83

08004340 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	d12e      	bne.n	80043b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0201 	bic.w	r2, r2, #1
 8004368:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800436a:	f7ff fbd1 	bl	8003b10 <HAL_GetTick>
 800436e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004370:	e01b      	b.n	80043aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004372:	f7ff fbcd 	bl	8003b10 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d914      	bls.n	80043aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10d      	bne.n	80043aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	f043 0210 	orr.w	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	f043 0201 	orr.w	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e007      	b.n	80043ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d0dc      	beq.n	8004372 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043e0:	4013      	ands	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043f6:	4a04      	ldr	r2, [pc, #16]	@ (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	60d3      	str	r3, [r2, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004410:	4b04      	ldr	r3, [pc, #16]	@ (8004424 <__NVIC_GetPriorityGrouping+0x18>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	f003 0307 	and.w	r3, r3, #7
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db0b      	blt.n	8004452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	4906      	ldr	r1, [pc, #24]	@ (800445c <__NVIC_EnableIRQ+0x34>)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2001      	movs	r0, #1
 800444a:	fa00 f202 	lsl.w	r2, r0, r2
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100

08004460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	6039      	str	r1, [r7, #0]
 800446a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	2b00      	cmp	r3, #0
 8004472:	db0a      	blt.n	800448a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	490c      	ldr	r1, [pc, #48]	@ (80044ac <__NVIC_SetPriority+0x4c>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	0112      	lsls	r2, r2, #4
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	440b      	add	r3, r1
 8004484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004488:	e00a      	b.n	80044a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4908      	ldr	r1, [pc, #32]	@ (80044b0 <__NVIC_SetPriority+0x50>)
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	3b04      	subs	r3, #4
 8004498:	0112      	lsls	r2, r2, #4
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	440b      	add	r3, r1
 800449e:	761a      	strb	r2, [r3, #24]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000e100 	.word	0xe000e100
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	@ 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f1c3 0307 	rsb	r3, r3, #7
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	bf28      	it	cs
 80044d2:	2304      	movcs	r3, #4
 80044d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3304      	adds	r3, #4
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d902      	bls.n	80044e4 <NVIC_EncodePriority+0x30>
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3b03      	subs	r3, #3
 80044e2:	e000      	b.n	80044e6 <NVIC_EncodePriority+0x32>
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	401a      	ands	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	43d9      	mvns	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450c:	4313      	orrs	r3, r2
         );
}
 800450e:	4618      	mov	r0, r3
 8004510:	3724      	adds	r7, #36	@ 0x24
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff4f 	bl	80043c4 <__NVIC_SetPriorityGrouping>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	4603      	mov	r3, r0
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004540:	f7ff ff64 	bl	800440c <__NVIC_GetPriorityGrouping>
 8004544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff ffb2 	bl	80044b4 <NVIC_EncodePriority>
 8004550:	4602      	mov	r2, r0
 8004552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff81 	bl	8004460 <__NVIC_SetPriority>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	4603      	mov	r3, r0
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff57 	bl	8004428 <__NVIC_EnableIRQ>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b480      	push	{r7}
 8004586:	b08b      	sub	sp, #44	@ 0x2c
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004596:	e169      	b.n	800486c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004598:	2201      	movs	r2, #1
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	f040 8158 	bne.w	8004866 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4a9a      	ldr	r2, [pc, #616]	@ (8004824 <HAL_GPIO_Init+0x2a0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d05e      	beq.n	800467e <HAL_GPIO_Init+0xfa>
 80045c0:	4a98      	ldr	r2, [pc, #608]	@ (8004824 <HAL_GPIO_Init+0x2a0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d875      	bhi.n	80046b2 <HAL_GPIO_Init+0x12e>
 80045c6:	4a98      	ldr	r2, [pc, #608]	@ (8004828 <HAL_GPIO_Init+0x2a4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d058      	beq.n	800467e <HAL_GPIO_Init+0xfa>
 80045cc:	4a96      	ldr	r2, [pc, #600]	@ (8004828 <HAL_GPIO_Init+0x2a4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d86f      	bhi.n	80046b2 <HAL_GPIO_Init+0x12e>
 80045d2:	4a96      	ldr	r2, [pc, #600]	@ (800482c <HAL_GPIO_Init+0x2a8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d052      	beq.n	800467e <HAL_GPIO_Init+0xfa>
 80045d8:	4a94      	ldr	r2, [pc, #592]	@ (800482c <HAL_GPIO_Init+0x2a8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d869      	bhi.n	80046b2 <HAL_GPIO_Init+0x12e>
 80045de:	4a94      	ldr	r2, [pc, #592]	@ (8004830 <HAL_GPIO_Init+0x2ac>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d04c      	beq.n	800467e <HAL_GPIO_Init+0xfa>
 80045e4:	4a92      	ldr	r2, [pc, #584]	@ (8004830 <HAL_GPIO_Init+0x2ac>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d863      	bhi.n	80046b2 <HAL_GPIO_Init+0x12e>
 80045ea:	4a92      	ldr	r2, [pc, #584]	@ (8004834 <HAL_GPIO_Init+0x2b0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d046      	beq.n	800467e <HAL_GPIO_Init+0xfa>
 80045f0:	4a90      	ldr	r2, [pc, #576]	@ (8004834 <HAL_GPIO_Init+0x2b0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d85d      	bhi.n	80046b2 <HAL_GPIO_Init+0x12e>
 80045f6:	2b12      	cmp	r3, #18
 80045f8:	d82a      	bhi.n	8004650 <HAL_GPIO_Init+0xcc>
 80045fa:	2b12      	cmp	r3, #18
 80045fc:	d859      	bhi.n	80046b2 <HAL_GPIO_Init+0x12e>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_GPIO_Init+0x80>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	0800467f 	.word	0x0800467f
 8004608:	08004659 	.word	0x08004659
 800460c:	0800466b 	.word	0x0800466b
 8004610:	080046ad 	.word	0x080046ad
 8004614:	080046b3 	.word	0x080046b3
 8004618:	080046b3 	.word	0x080046b3
 800461c:	080046b3 	.word	0x080046b3
 8004620:	080046b3 	.word	0x080046b3
 8004624:	080046b3 	.word	0x080046b3
 8004628:	080046b3 	.word	0x080046b3
 800462c:	080046b3 	.word	0x080046b3
 8004630:	080046b3 	.word	0x080046b3
 8004634:	080046b3 	.word	0x080046b3
 8004638:	080046b3 	.word	0x080046b3
 800463c:	080046b3 	.word	0x080046b3
 8004640:	080046b3 	.word	0x080046b3
 8004644:	080046b3 	.word	0x080046b3
 8004648:	08004661 	.word	0x08004661
 800464c:	08004675 	.word	0x08004675
 8004650:	4a79      	ldr	r2, [pc, #484]	@ (8004838 <HAL_GPIO_Init+0x2b4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004656:	e02c      	b.n	80046b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	623b      	str	r3, [r7, #32]
          break;
 800465e:	e029      	b.n	80046b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	3304      	adds	r3, #4
 8004666:	623b      	str	r3, [r7, #32]
          break;
 8004668:	e024      	b.n	80046b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	3308      	adds	r3, #8
 8004670:	623b      	str	r3, [r7, #32]
          break;
 8004672:	e01f      	b.n	80046b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	330c      	adds	r3, #12
 800467a:	623b      	str	r3, [r7, #32]
          break;
 800467c:	e01a      	b.n	80046b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004686:	2304      	movs	r3, #4
 8004688:	623b      	str	r3, [r7, #32]
          break;
 800468a:	e013      	b.n	80046b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004694:	2308      	movs	r3, #8
 8004696:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	611a      	str	r2, [r3, #16]
          break;
 800469e:	e009      	b.n	80046b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046a0:	2308      	movs	r3, #8
 80046a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	615a      	str	r2, [r3, #20]
          break;
 80046aa:	e003      	b.n	80046b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046ac:	2300      	movs	r3, #0
 80046ae:	623b      	str	r3, [r7, #32]
          break;
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_Init+0x130>
          break;
 80046b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2bff      	cmp	r3, #255	@ 0xff
 80046b8:	d801      	bhi.n	80046be <HAL_GPIO_Init+0x13a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	e001      	b.n	80046c2 <HAL_GPIO_Init+0x13e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2bff      	cmp	r3, #255	@ 0xff
 80046c8:	d802      	bhi.n	80046d0 <HAL_GPIO_Init+0x14c>
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	e002      	b.n	80046d6 <HAL_GPIO_Init+0x152>
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	3b08      	subs	r3, #8
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	210f      	movs	r1, #15
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	401a      	ands	r2, r3
 80046e8:	6a39      	ldr	r1, [r7, #32]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	431a      	orrs	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80b1 	beq.w	8004866 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004704:	4b4d      	ldr	r3, [pc, #308]	@ (800483c <HAL_GPIO_Init+0x2b8>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	4a4c      	ldr	r2, [pc, #304]	@ (800483c <HAL_GPIO_Init+0x2b8>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6193      	str	r3, [r2, #24]
 8004710:	4b4a      	ldr	r3, [pc, #296]	@ (800483c <HAL_GPIO_Init+0x2b8>)
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800471c:	4a48      	ldr	r2, [pc, #288]	@ (8004840 <HAL_GPIO_Init+0x2bc>)
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	3302      	adds	r3, #2
 8004724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004728:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	220f      	movs	r2, #15
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4013      	ands	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a40      	ldr	r2, [pc, #256]	@ (8004844 <HAL_GPIO_Init+0x2c0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_GPIO_Init+0x1ec>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a3f      	ldr	r2, [pc, #252]	@ (8004848 <HAL_GPIO_Init+0x2c4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00d      	beq.n	800476c <HAL_GPIO_Init+0x1e8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a3e      	ldr	r2, [pc, #248]	@ (800484c <HAL_GPIO_Init+0x2c8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <HAL_GPIO_Init+0x1e4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a3d      	ldr	r2, [pc, #244]	@ (8004850 <HAL_GPIO_Init+0x2cc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_GPIO_Init+0x1e0>
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 8004764:	2304      	movs	r3, #4
 8004766:	e004      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 8004768:	2302      	movs	r3, #2
 800476a:	e002      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 8004770:	2300      	movs	r3, #0
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	f002 0203 	and.w	r2, r2, #3
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	4093      	lsls	r3, r2
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004782:	492f      	ldr	r1, [pc, #188]	@ (8004840 <HAL_GPIO_Init+0x2bc>)
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	3302      	adds	r3, #2
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d006      	beq.n	80047aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800479c:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	492c      	ldr	r1, [pc, #176]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]
 80047a8:	e006      	b.n	80047b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	4928      	ldr	r1, [pc, #160]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047c4:	4b23      	ldr	r3, [pc, #140]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4922      	ldr	r1, [pc, #136]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60cb      	str	r3, [r1, #12]
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047d2:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	43db      	mvns	r3, r3
 80047da:	491e      	ldr	r1, [pc, #120]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d006      	beq.n	80047fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047ec:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4918      	ldr	r1, [pc, #96]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
 80047f8:	e006      	b.n	8004808 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047fa:	4b16      	ldr	r3, [pc, #88]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	43db      	mvns	r3, r3
 8004802:	4914      	ldr	r1, [pc, #80]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 8004804:	4013      	ands	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d021      	beq.n	8004858 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004814:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	490e      	ldr	r1, [pc, #56]	@ (8004854 <HAL_GPIO_Init+0x2d0>)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]
 8004820:	e021      	b.n	8004866 <HAL_GPIO_Init+0x2e2>
 8004822:	bf00      	nop
 8004824:	10320000 	.word	0x10320000
 8004828:	10310000 	.word	0x10310000
 800482c:	10220000 	.word	0x10220000
 8004830:	10210000 	.word	0x10210000
 8004834:	10120000 	.word	0x10120000
 8004838:	10110000 	.word	0x10110000
 800483c:	40021000 	.word	0x40021000
 8004840:	40010000 	.word	0x40010000
 8004844:	40010800 	.word	0x40010800
 8004848:	40010c00 	.word	0x40010c00
 800484c:	40011000 	.word	0x40011000
 8004850:	40011400 	.word	0x40011400
 8004854:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_GPIO_Init+0x304>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	43db      	mvns	r3, r3
 8004860:	4909      	ldr	r1, [pc, #36]	@ (8004888 <HAL_GPIO_Init+0x304>)
 8004862:	4013      	ands	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	3301      	adds	r3, #1
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	f47f ae8e 	bne.w	8004598 <HAL_GPIO_Init+0x14>
  }
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	372c      	adds	r7, #44	@ 0x2c
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	40010400 	.word	0x40010400

0800488c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	887b      	ldrh	r3, [r7, #2]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e001      	b.n	80048ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	807b      	strh	r3, [r7, #2]
 80048c6:	4613      	mov	r3, r2
 80048c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048ca:	787b      	ldrb	r3, [r7, #1]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048d0:	887a      	ldrh	r2, [r7, #2]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048d6:	e003      	b.n	80048e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	041a      	lsls	r2, r3, #16
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	611a      	str	r2, [r3, #16]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
	...

080048ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048f6:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004902:	4a05      	ldr	r2, [pc, #20]	@ (8004918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f806 	bl	800491c <HAL_GPIO_EXTI_Callback>
  }
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e272      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8087 	beq.w	8004a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004950:	4b92      	ldr	r3, [pc, #584]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b04      	cmp	r3, #4
 800495a:	d00c      	beq.n	8004976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800495c:	4b8f      	ldr	r3, [pc, #572]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d112      	bne.n	800498e <HAL_RCC_OscConfig+0x5e>
 8004968:	4b8c      	ldr	r3, [pc, #560]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004974:	d10b      	bne.n	800498e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004976:	4b89      	ldr	r3, [pc, #548]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d06c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x12c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d168      	bne.n	8004a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e24c      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004996:	d106      	bne.n	80049a6 <HAL_RCC_OscConfig+0x76>
 8004998:	4b80      	ldr	r3, [pc, #512]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a7f      	ldr	r2, [pc, #508]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 800499e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e02e      	b.n	8004a04 <HAL_RCC_OscConfig+0xd4>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x98>
 80049ae:	4b7b      	ldr	r3, [pc, #492]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7a      	ldr	r2, [pc, #488]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b78      	ldr	r3, [pc, #480]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a77      	ldr	r2, [pc, #476]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e01d      	b.n	8004a04 <HAL_RCC_OscConfig+0xd4>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0xbc>
 80049d2:	4b72      	ldr	r3, [pc, #456]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a71      	ldr	r2, [pc, #452]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b6f      	ldr	r3, [pc, #444]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6e      	ldr	r2, [pc, #440]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0xd4>
 80049ec:	4b6b      	ldr	r3, [pc, #428]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	4b68      	ldr	r3, [pc, #416]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a67      	ldr	r2, [pc, #412]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 80049fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7ff f880 	bl	8003b10 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7ff f87c 	bl	8003b10 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	@ 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e200      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b5d      	ldr	r3, [pc, #372]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0xe4>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7ff f86c 	bl	8003b10 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3c:	f7ff f868 	bl	8003b10 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	@ 0x64
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e1ec      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a4e:	4b53      	ldr	r3, [pc, #332]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x10c>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d063      	beq.n	8004b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a76:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d11c      	bne.n	8004abc <HAL_RCC_OscConfig+0x18c>
 8004a82:	4b46      	ldr	r3, [pc, #280]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d116      	bne.n	8004abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8e:	4b43      	ldr	r3, [pc, #268]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x176>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e1c0      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4939      	ldr	r1, [pc, #228]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aba:	e03a      	b.n	8004b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d020      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac4:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aca:	f7ff f821 	bl	8003b10 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7ff f81d 	bl	8003b10 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e1a1      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4927      	ldr	r1, [pc, #156]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]
 8004b04:	e015      	b.n	8004b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b06:	4b26      	ldr	r3, [pc, #152]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7ff f800 	bl	8003b10 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b14:	f7fe fffc 	bl	8003b10 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e180      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b26:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d03a      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d019      	beq.n	8004b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b46:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <HAL_RCC_OscConfig+0x274>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4c:	f7fe ffe0 	bl	8003b10 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b54:	f7fe ffdc 	bl	8003b10 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e160      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b66:	4b0d      	ldr	r3, [pc, #52]	@ (8004b9c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b72:	2001      	movs	r0, #1
 8004b74:	f000 fafe 	bl	8005174 <RCC_Delay>
 8004b78:	e01c      	b.n	8004bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b80:	f7fe ffc6 	bl	8003b10 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b86:	e00f      	b.n	8004ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fe ffc2 	bl	8003b10 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d908      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e146      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	42420000 	.word	0x42420000
 8004ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba8:	4b92      	ldr	r3, [pc, #584]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e9      	bne.n	8004b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80a6 	beq.w	8004d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4a87      	ldr	r2, [pc, #540]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	61d3      	str	r3, [r2, #28]
 8004bde:	4b85      	ldr	r3, [pc, #532]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bee:	4b82      	ldr	r3, [pc, #520]	@ (8004df8 <HAL_RCC_OscConfig+0x4c8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d118      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004df8 <HAL_RCC_OscConfig+0x4c8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004df8 <HAL_RCC_OscConfig+0x4c8>)
 8004c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c06:	f7fe ff83 	bl	8003b10 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c0e:	f7fe ff7f 	bl	8003b10 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b64      	cmp	r3, #100	@ 0x64
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e103      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c20:	4b75      	ldr	r3, [pc, #468]	@ (8004df8 <HAL_RCC_OscConfig+0x4c8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d106      	bne.n	8004c42 <HAL_RCC_OscConfig+0x312>
 8004c34:	4b6f      	ldr	r3, [pc, #444]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4a6e      	ldr	r2, [pc, #440]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6213      	str	r3, [r2, #32]
 8004c40:	e02d      	b.n	8004c9e <HAL_RCC_OscConfig+0x36e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0x334>
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4a69      	ldr	r2, [pc, #420]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	6213      	str	r3, [r2, #32]
 8004c56:	4b67      	ldr	r3, [pc, #412]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	4a66      	ldr	r2, [pc, #408]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	6213      	str	r3, [r2, #32]
 8004c62:	e01c      	b.n	8004c9e <HAL_RCC_OscConfig+0x36e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d10c      	bne.n	8004c86 <HAL_RCC_OscConfig+0x356>
 8004c6c:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	4a60      	ldr	r2, [pc, #384]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	f043 0304 	orr.w	r3, r3, #4
 8004c76:	6213      	str	r3, [r2, #32]
 8004c78:	4b5e      	ldr	r3, [pc, #376]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	4a5d      	ldr	r2, [pc, #372]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6213      	str	r3, [r2, #32]
 8004c84:	e00b      	b.n	8004c9e <HAL_RCC_OscConfig+0x36e>
 8004c86:	4b5b      	ldr	r3, [pc, #364]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	4a5a      	ldr	r2, [pc, #360]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	6213      	str	r3, [r2, #32]
 8004c92:	4b58      	ldr	r3, [pc, #352]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	4a57      	ldr	r2, [pc, #348]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004c98:	f023 0304 	bic.w	r3, r3, #4
 8004c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d015      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca6:	f7fe ff33 	bl	8003b10 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fe ff2f 	bl	8003b10 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e0b1      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ee      	beq.n	8004cae <HAL_RCC_OscConfig+0x37e>
 8004cd0:	e014      	b.n	8004cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd2:	f7fe ff1d 	bl	8003b10 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fe ff19 	bl	8003b10 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e09b      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf0:	4b40      	ldr	r3, [pc, #256]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1ee      	bne.n	8004cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d02:	4b3c      	ldr	r3, [pc, #240]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4a3b      	ldr	r2, [pc, #236]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8087 	beq.w	8004e26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d18:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d061      	beq.n	8004de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d146      	bne.n	8004dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fe feed 	bl	8003b10 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fe fee9 	bl	8003b10 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e06d      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d4c:	4b29      	ldr	r3, [pc, #164]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d60:	d108      	bne.n	8004d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d62:	4b24      	ldr	r3, [pc, #144]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4921      	ldr	r1, [pc, #132]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d74:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a19      	ldr	r1, [r3, #32]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	430b      	orrs	r3, r1
 8004d86:	491b      	ldr	r1, [pc, #108]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fe febd 	bl	8003b10 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9a:	f7fe feb9 	bl	8003b10 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e03d      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x46a>
 8004db8:	e035      	b.n	8004e26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dba:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <HAL_RCC_OscConfig+0x4cc>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe fea6 	bl	8003b10 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fe fea2 	bl	8003b10 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e026      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x498>
 8004de6:	e01e      	b.n	8004e26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e019      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e00:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCC_OscConfig+0x500>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d106      	bne.n	8004e22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d001      	beq.n	8004e26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0d0      	b.n	8004fea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e48:	4b6a      	ldr	r3, [pc, #424]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d910      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b67      	ldr	r3, [pc, #412]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 0207 	bic.w	r2, r3, #7
 8004e5e:	4965      	ldr	r1, [pc, #404]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b63      	ldr	r3, [pc, #396]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0b8      	b.n	8004fea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d020      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e90:	4b59      	ldr	r3, [pc, #356]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a58      	ldr	r2, [pc, #352]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea8:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4a52      	ldr	r2, [pc, #328]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004eb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb4:	4b50      	ldr	r3, [pc, #320]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	494d      	ldr	r1, [pc, #308]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d040      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b47      	ldr	r3, [pc, #284]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d115      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07f      	b.n	8004fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b41      	ldr	r3, [pc, #260]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e073      	b.n	8004fea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f02:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e06b      	b.n	8004fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f12:	4b39      	ldr	r3, [pc, #228]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f023 0203 	bic.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4936      	ldr	r1, [pc, #216]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f24:	f7fe fdf4 	bl	8003b10 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2c:	f7fe fdf0 	bl	8003b10 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e053      	b.n	8004fea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f42:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 020c 	and.w	r2, r3, #12
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d1eb      	bne.n	8004f2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f54:	4b27      	ldr	r3, [pc, #156]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d210      	bcs.n	8004f84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b24      	ldr	r3, [pc, #144]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 0207 	bic.w	r2, r3, #7
 8004f6a:	4922      	ldr	r1, [pc, #136]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b20      	ldr	r3, [pc, #128]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e032      	b.n	8004fea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4916      	ldr	r1, [pc, #88]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fae:	4b12      	ldr	r3, [pc, #72]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	490e      	ldr	r1, [pc, #56]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fc2:	f000 f821 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	490a      	ldr	r1, [pc, #40]	@ (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	5ccb      	ldrb	r3, [r1, r3]
 8004fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fda:	4a09      	ldr	r2, [pc, #36]	@ (8005000 <HAL_RCC_ClockConfig+0x1cc>)
 8004fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fde:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <HAL_RCC_ClockConfig+0x1d0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fbf0 	bl	80037c8 <HAL_InitTick>

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40022000 	.word	0x40022000
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	0800cee8 	.word	0x0800cee8
 8005000:	20000000 	.word	0x20000000
 8005004:	20000004 	.word	0x20000004

08005008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005022:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <HAL_RCC_GetSysClockFreq+0x94>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b04      	cmp	r3, #4
 8005030:	d002      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x30>
 8005032:	2b08      	cmp	r3, #8
 8005034:	d003      	beq.n	800503e <HAL_RCC_GetSysClockFreq+0x36>
 8005036:	e027      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005038:	4b19      	ldr	r3, [pc, #100]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800503a:	613b      	str	r3, [r7, #16]
      break;
 800503c:	e027      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	0c9b      	lsrs	r3, r3, #18
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	4a17      	ldr	r2, [pc, #92]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005048:	5cd3      	ldrb	r3, [r2, r3]
 800504a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d010      	beq.n	8005078 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005056:	4b11      	ldr	r3, [pc, #68]	@ (800509c <HAL_RCC_GetSysClockFreq+0x94>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	0c5b      	lsrs	r3, r3, #17
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	4a11      	ldr	r2, [pc, #68]	@ (80050a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005062:	5cd3      	ldrb	r3, [r2, r3]
 8005064:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a0d      	ldr	r2, [pc, #52]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800506a:	fb03 f202 	mul.w	r2, r3, r2
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e004      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a0c      	ldr	r2, [pc, #48]	@ (80050ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800507c:	fb02 f303 	mul.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	613b      	str	r3, [r7, #16]
      break;
 8005086:	e002      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800508a:	613b      	str	r3, [r7, #16]
      break;
 800508c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800508e:	693b      	ldr	r3, [r7, #16]
}
 8005090:	4618      	mov	r0, r3
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	007a1200 	.word	0x007a1200
 80050a4:	0800cf00 	.word	0x0800cf00
 80050a8:	0800cf10 	.word	0x0800cf10
 80050ac:	003d0900 	.word	0x003d0900

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b02      	ldr	r3, [pc, #8]	@ (80050c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	20000000 	.word	0x20000000

080050c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050c8:	f7ff fff2 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	@ (80050e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000
 80050e8:	0800cef8 	.word	0x0800cef8

080050ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050f0:	f7ff ffde 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	@ (800510c <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	0adb      	lsrs	r3, r3, #11
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4903      	ldr	r1, [pc, #12]	@ (8005110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40021000 	.word	0x40021000
 8005110:	0800cef8 	.word	0x0800cef8

08005114 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	220f      	movs	r2, #15
 8005122:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005124:	4b11      	ldr	r3, [pc, #68]	@ (800516c <HAL_RCC_GetClockConfig+0x58>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0203 	and.w	r2, r3, #3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005130:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <HAL_RCC_GetClockConfig+0x58>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCC_GetClockConfig+0x58>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005148:	4b08      	ldr	r3, [pc, #32]	@ (800516c <HAL_RCC_GetClockConfig+0x58>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	08db      	lsrs	r3, r3, #3
 800514e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_RCC_GetClockConfig+0x5c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0207 	and.w	r2, r3, #7
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	40021000 	.word	0x40021000
 8005170:	40022000 	.word	0x40022000

08005174 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800517c:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <RCC_Delay+0x34>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0a      	ldr	r2, [pc, #40]	@ (80051ac <RCC_Delay+0x38>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	0a5b      	lsrs	r3, r3, #9
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005190:	bf00      	nop
  }
  while (Delay --);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1e5a      	subs	r2, r3, #1
 8005196:	60fa      	str	r2, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f9      	bne.n	8005190 <RCC_Delay+0x1c>
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	20000000 	.word	0x20000000
 80051ac:	10624dd3 	.word	0x10624dd3

080051b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d07d      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051cc:	2300      	movs	r3, #0
 80051ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10d      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	61d3      	str	r3, [r2, #28]
 80051e8:	4b49      	ldr	r3, [pc, #292]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f4:	2301      	movs	r3, #1
 80051f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	4b46      	ldr	r3, [pc, #280]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d118      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005204:	4b43      	ldr	r3, [pc, #268]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a42      	ldr	r2, [pc, #264]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800520a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005210:	f7fe fc7e 	bl	8003b10 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	e008      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005218:	f7fe fc7a 	bl	8003b10 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b64      	cmp	r3, #100	@ 0x64
 8005224:	d901      	bls.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e06d      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	4b3a      	ldr	r3, [pc, #232]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005236:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02e      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	429a      	cmp	r2, r3
 8005252:	d027      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005254:	4b2e      	ldr	r3, [pc, #184]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800525e:	4b2e      	ldr	r3, [pc, #184]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005264:	4b2c      	ldr	r3, [pc, #176]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800526a:	4a29      	ldr	r2, [pc, #164]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fe fc49 	bl	8003b10 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005280:	e00a      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fe fc45 	bl	8003b10 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005290:	4293      	cmp	r3, r2
 8005292:	d901      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e036      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005298:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ee      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4917      	ldr	r1, [pc, #92]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d105      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052bc:	4b14      	ldr	r3, [pc, #80]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	490b      	ldr	r1, [pc, #44]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052f2:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	4904      	ldr	r1, [pc, #16]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005300:	4313      	orrs	r3, r2
 8005302:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
 8005318:	42420440 	.word	0x42420440

0800531c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b10      	cmp	r3, #16
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b10      	cmp	r3, #16
 8005342:	f200 808a 	bhi.w	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d045      	beq.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d075      	beq.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005352:	e082      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005354:	4b46      	ldr	r3, [pc, #280]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800535a:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d07b      	beq.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	0c9b      	lsrs	r3, r3, #18
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	4a41      	ldr	r2, [pc, #260]	@ (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005370:	5cd3      	ldrb	r3, [r2, r3]
 8005372:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d015      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800537e:	4b3c      	ldr	r3, [pc, #240]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	0c5b      	lsrs	r3, r3, #17
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	4a3b      	ldr	r2, [pc, #236]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800538a:	5cd3      	ldrb	r3, [r2, r3]
 800538c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00d      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005398:	4a38      	ldr	r2, [pc, #224]	@ (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	e004      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4a34      	ldr	r2, [pc, #208]	@ (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80053ae:	fb02 f303 	mul.w	r3, r2, r3
 80053b2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80053b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c0:	d102      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	61bb      	str	r3, [r7, #24]
      break;
 80053c6:	e04a      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	61bb      	str	r3, [r7, #24]
      break;
 80053d6:	e042      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80053d8:	4b25      	ldr	r3, [pc, #148]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e8:	d108      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80053f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e01f      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005406:	d109      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005408:	4b19      	ldr	r3, [pc, #100]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005414:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	e00f      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005426:	d11c      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005428:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d016      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005434:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005438:	61bb      	str	r3, [r7, #24]
      break;
 800543a:	e012      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800543c:	e011      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800543e:	f7ff fe55 	bl	80050ec <HAL_RCC_GetPCLK2Freq>
 8005442:	4602      	mov	r2, r0
 8005444:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	0b9b      	lsrs	r3, r3, #14
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	3301      	adds	r3, #1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	61bb      	str	r3, [r7, #24]
      break;
 8005458:	e004      	b.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005462:	bf00      	nop
    }
  }
  return (frequency);
 8005464:	69bb      	ldr	r3, [r7, #24]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40021000 	.word	0x40021000
 8005474:	0800cf14 	.word	0x0800cf14
 8005478:	0800cf24 	.word	0x0800cf24
 800547c:	007a1200 	.word	0x007a1200
 8005480:	003d0900 	.word	0x003d0900
 8005484:	aaaaaaab 	.word	0xaaaaaaab

08005488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e041      	b.n	800551e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f839 	bl	8005526 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f000 f99c 	bl	8005804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	d001      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e03a      	b.n	80055c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <HAL_TIM_Base_Start_IT+0x98>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_TIM_Base_Start_IT+0x58>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557a:	d009      	beq.n	8005590 <HAL_TIM_Base_Start_IT+0x58>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a14      	ldr	r2, [pc, #80]	@ (80055d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_TIM_Base_Start_IT+0x58>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a13      	ldr	r2, [pc, #76]	@ (80055d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d111      	bne.n	80055b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d010      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b2:	e007      	b.n	80055c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800

080055dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d020      	beq.n	8005640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01b      	beq.n	8005640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0202 	mvn.w	r2, #2
 8005610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8d1 	bl	80057ce <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8c4 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8d3 	bl	80057e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d020      	beq.n	800568c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01b      	beq.n	800568c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0204 	mvn.w	r2, #4
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8ab 	bl	80057ce <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f89e 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8ad 	bl	80057e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d020      	beq.n	80056d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01b      	beq.n	80056d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0208 	mvn.w	r2, #8
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2204      	movs	r2, #4
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f885 	bl	80057ce <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f878 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f887 	bl	80057e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d020      	beq.n	8005724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0210 	mvn.w	r2, #16
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2208      	movs	r2, #8
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f85f 	bl	80057ce <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f852 	bl	80057bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f861 	bl	80057e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0201 	mvn.w	r2, #1
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fd fed6 	bl	80034f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8c3 	bl	80058f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00c      	beq.n	8005790 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f831 	bl	80057f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0220 	mvn.w	r2, #32
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f896 	bl	80058e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a2f      	ldr	r2, [pc, #188]	@ (80058d4 <TIM_Base_SetConfig+0xd0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_Base_SetConfig+0x30>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d007      	beq.n	8005834 <TIM_Base_SetConfig+0x30>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2c      	ldr	r2, [pc, #176]	@ (80058d8 <TIM_Base_SetConfig+0xd4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_Base_SetConfig+0x30>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a2b      	ldr	r2, [pc, #172]	@ (80058dc <TIM_Base_SetConfig+0xd8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <TIM_Base_SetConfig+0xd0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00b      	beq.n	8005866 <TIM_Base_SetConfig+0x62>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005854:	d007      	beq.n	8005866 <TIM_Base_SetConfig+0x62>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1f      	ldr	r2, [pc, #124]	@ (80058d8 <TIM_Base_SetConfig+0xd4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_Base_SetConfig+0x62>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1e      	ldr	r2, [pc, #120]	@ (80058dc <TIM_Base_SetConfig+0xd8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d108      	bne.n	8005878 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a0d      	ldr	r2, [pc, #52]	@ (80058d4 <TIM_Base_SetConfig+0xd0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d103      	bne.n	80058ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	611a      	str	r2, [r3, #16]
  }
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800

080058e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e042      	b.n	800599c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fd ff0e 	bl	800374c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2224      	movs	r2, #36	@ 0x24
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f82b 	bl	80059a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800595c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695a      	ldr	r2, [r3, #20]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800596c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800597c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80059de:	f023 030c 	bic.w	r3, r3, #12
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	430b      	orrs	r3, r1
 80059ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab8 <UART_SetConfig+0x114>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d103      	bne.n	8005a14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a0c:	f7ff fb6e 	bl	80050ec <HAL_RCC_GetPCLK2Freq>
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	e002      	b.n	8005a1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7ff fb56 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8005a18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009a      	lsls	r2, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	4a22      	ldr	r2, [pc, #136]	@ (8005abc <UART_SetConfig+0x118>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	0119      	lsls	r1, r3, #4
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009a      	lsls	r2, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <UART_SetConfig+0x118>)
 8005a52:	fba3 0302 	umull	r0, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2064      	movs	r0, #100	@ 0x64
 8005a5a:	fb00 f303 	mul.w	r3, r0, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	3332      	adds	r3, #50	@ 0x32
 8005a64:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <UART_SetConfig+0x118>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a70:	4419      	add	r1, r3
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009a      	lsls	r2, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a88:	4b0c      	ldr	r3, [pc, #48]	@ (8005abc <UART_SetConfig+0x118>)
 8005a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2064      	movs	r0, #100	@ 0x64
 8005a92:	fb00 f303 	mul.w	r3, r0, r3
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	3332      	adds	r3, #50	@ 0x32
 8005a9c:	4a07      	ldr	r2, [pc, #28]	@ (8005abc <UART_SetConfig+0x118>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	440a      	add	r2, r1
 8005aae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40013800 	.word	0x40013800
 8005abc:	51eb851f 	.word	0x51eb851f

08005ac0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad2:	2b84      	cmp	r3, #132	@ 0x84
 8005ad4:	d005      	beq.n	8005ae2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ad6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	3303      	adds	r3, #3
 8005ae0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr

08005aee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af4:	f3ef 8305 	mrs	r3, IPSR
 8005af8:	607b      	str	r3, [r7, #4]
  return(result);
 8005afa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b14:	f001 fbda 	bl	80072cc <vTaskStartScheduler>
  
  return osOK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005b22:	f7ff ffe4 	bl	8005aee <inHandlerMode>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005b2c:	f001 fcf2 	bl	8007514 <xTaskGetTickCountFromISR>
 8005b30:	4603      	mov	r3, r0
 8005b32:	e002      	b.n	8005b3a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005b34:	f001 fce0 	bl	80074f8 <xTaskGetTickCount>
 8005b38:	4603      	mov	r3, r0
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b40:	b089      	sub	sp, #36	@ 0x24
 8005b42:	af04      	add	r7, sp, #16
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d020      	beq.n	8005b92 <osThreadCreate+0x54>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01c      	beq.n	8005b92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685c      	ldr	r4, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691e      	ldr	r6, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff ffa8 	bl	8005ac0 <makeFreeRtosPriority>
 8005b70:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b7a:	9202      	str	r2, [sp, #8]
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	9100      	str	r1, [sp, #0]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	4632      	mov	r2, r6
 8005b84:	4629      	mov	r1, r5
 8005b86:	4620      	mov	r0, r4
 8005b88:	f001 f9bb 	bl	8006f02 <xTaskCreateStatic>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e01c      	b.n	8005bcc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685c      	ldr	r4, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b9e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ff8a 	bl	8005ac0 <makeFreeRtosPriority>
 8005bac:	4602      	mov	r2, r0
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	9200      	str	r2, [sp, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	4632      	mov	r2, r6
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f001 fa00 	bl	8006fc2 <xTaskCreate>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d001      	beq.n	8005bcc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <osDelay+0x16>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	e000      	b.n	8005bee <osDelay+0x18>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fb36 	bl	8007260 <vTaskDelay>
  
  return osOK;
 8005bf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4619      	mov	r1, r3
 8005c14:	2001      	movs	r0, #1
 8005c16:	f000 fb8e 	bl	8006336 <xQueueCreateMutexStatic>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	e003      	b.n	8005c26 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f000 fb71 	bl	8006306 <xQueueCreateMutex>
 8005c24:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <osMutexWait+0x18>
    return osErrorParameter;
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	e03a      	b.n	8005cbe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d103      	bne.n	8005c5c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e009      	b.n	8005c70 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d006      	beq.n	8005c70 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <osMutexWait+0x40>
      ticks = 1;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005c70:	f7ff ff3d 	bl	8005aee <inHandlerMode>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d017      	beq.n	8005caa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2100      	movs	r1, #0
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 ff94 	bl	8006bb0 <xQueueReceiveFromISR>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d001      	beq.n	8005c92 <osMutexWait+0x62>
      return osErrorOS;
 8005c8e:	23ff      	movs	r3, #255	@ 0xff
 8005c90:	e015      	b.n	8005cbe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d011      	beq.n	8005cbc <osMutexWait+0x8c>
 8005c98:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <osMutexWait+0x98>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	e008      	b.n	8005cbc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fe6f 	bl	8006990 <xQueueSemaphoreTake>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d001      	beq.n	8005cbc <osMutexWait+0x8c>
    return osErrorOS;
 8005cb8:	23ff      	movs	r3, #255	@ 0xff
 8005cba:	e000      	b.n	8005cbe <osMutexWait+0x8e>
  }
  
  return osOK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005cdc:	f7ff ff07 	bl	8005aee <inHandlerMode>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005ce6:	f107 0308 	add.w	r3, r7, #8
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fcdd 	bl	80066ac <xQueueGiveFromISR>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d001      	beq.n	8005cfc <osMutexRelease+0x30>
      return osErrorOS;
 8005cf8:	23ff      	movs	r3, #255	@ 0xff
 8005cfa:	e017      	b.n	8005d2c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d013      	beq.n	8005d2a <osMutexRelease+0x5e>
 8005d02:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <osMutexRelease+0x68>)
 8005d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	e00a      	b.n	8005d2a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005d14:	2300      	movs	r3, #0
 8005d16:	2200      	movs	r2, #0
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb26 	bl	800636c <xQueueGenericSend>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d001      	beq.n	8005d2a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005d26:	23ff      	movs	r3, #255	@ 0xff
 8005d28:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d011      	beq.n	8005d6e <osMessageCreate+0x36>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6859      	ldr	r1, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2400      	movs	r4, #0
 8005d64:	9400      	str	r4, [sp, #0]
 8005d66:	f000 f9dd 	bl	8006124 <xQueueGenericCreateStatic>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	e008      	b.n	8005d80 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	4619      	mov	r1, r3
 8005d7a:	f000 fa50 	bl	800621e <xQueueGenericCreate>
 8005d7e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd90      	pop	{r4, r7, pc}

08005d88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <osMessagePut+0x1e>
    ticks = 1;
 8005da2:	2301      	movs	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005da6:	f7ff fea2 	bl	8005aee <inHandlerMode>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d018      	beq.n	8005de2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005db0:	f107 0210 	add.w	r2, r7, #16
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	2300      	movs	r3, #0
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fbd8 	bl	8006570 <xQueueGenericSendFromISR>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <osMessagePut+0x42>
      return osErrorOS;
 8005dc6:	23ff      	movs	r3, #255	@ 0xff
 8005dc8:	e018      	b.n	8005dfc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d014      	beq.n	8005dfa <osMessagePut+0x72>
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <osMessagePut+0x7c>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	e00b      	b.n	8005dfa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005de2:	f107 0108 	add.w	r1, r7, #8
 8005de6:	2300      	movs	r3, #0
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fabe 	bl	800636c <xQueueGenericSend>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d001      	beq.n	8005dfa <osMessagePut+0x72>
      return osErrorOS;
 8005df6:	23ff      	movs	r3, #255	@ 0xff
 8005df8:	e000      	b.n	8005dfc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b08b      	sub	sp, #44	@ 0x2c
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e22:	2380      	movs	r3, #128	@ 0x80
 8005e24:	617b      	str	r3, [r7, #20]
    return event;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	461c      	mov	r4, r3
 8005e2a:	f107 0314 	add.w	r3, r7, #20
 8005e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e36:	e054      	b.n	8005ee2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d103      	bne.n	8005e50 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4e:	e009      	b.n	8005e64 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d006      	beq.n	8005e64 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <osMessageGet+0x5c>
      ticks = 1;
 8005e60:	2301      	movs	r3, #1
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005e64:	f7ff fe43 	bl	8005aee <inHandlerMode>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01c      	beq.n	8005ea8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005e6e:	f107 0220 	add.w	r2, r7, #32
 8005e72:	f107 0314 	add.w	r3, r7, #20
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68b8      	ldr	r0, [r7, #8]
 8005e7c:	f000 fe98 	bl	8006bb0 <xQueueReceiveFromISR>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d102      	bne.n	8005e8c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005e86:	2310      	movs	r3, #16
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e001      	b.n	8005e90 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01d      	beq.n	8005ed2 <osMessageGet+0xca>
 8005e96:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <osMessageGet+0xe4>)
 8005e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	e014      	b.n	8005ed2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005ea8:	f107 0314 	add.w	r3, r7, #20
 8005eac:	3304      	adds	r3, #4
 8005eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	f000 fc8a 	bl	80067cc <xQueueReceive>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d102      	bne.n	8005ec4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005ebe:	2310      	movs	r3, #16
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e006      	b.n	8005ed2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <osMessageGet+0xc6>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e000      	b.n	8005ed0 <osMessageGet+0xc8>
 8005ece:	2340      	movs	r3, #64	@ 0x40
 8005ed0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	461c      	mov	r4, r3
 8005ed6:	f107 0314 	add.w	r3, r7, #20
 8005eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	372c      	adds	r7, #44	@ 0x2c
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd90      	pop	{r4, r7, pc}
 8005eea:	bf00      	nop
 8005eec:	e000ed04 	.word	0xe000ed04

08005ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f103 0208 	add.w	r2, r3, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295
 8005f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f103 0208 	add.w	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f103 0208 	add.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr

08005f2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr

08005f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d103      	bne.n	8005fac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e00c      	b.n	8005fc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	e002      	b.n	8005fba <vListInsert+0x2e>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d2f6      	bcs.n	8005fb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6892      	ldr	r2, [r2, #8]
 8006012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6852      	ldr	r2, [r2, #4]
 800601c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d103      	bne.n	8006030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	1e5a      	subs	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr
	...

08006050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800607c:	f002 f87e 	bl	800817c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ac:	3b01      	subs	r3, #1
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	22ff      	movs	r2, #255	@ 0xff
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	22ff      	movs	r2, #255	@ 0xff
 80060c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d114      	bne.n	80060fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01a      	beq.n	8006110 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3310      	adds	r3, #16
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fb6c 	bl	80077bc <xTaskRemoveFromEventList>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d012      	beq.n	8006110 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <xQueueGenericReset+0xd0>)
 80060ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	e009      	b.n	8006110 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3310      	adds	r3, #16
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fef5 	bl	8005ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3324      	adds	r3, #36	@ 0x24
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fef0 	bl	8005ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006110:	f002 f864 	bl	80081dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006114:	2301      	movs	r3, #1
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08e      	sub	sp, #56	@ 0x38
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10b      	bne.n	800616e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <xQueueGenericCreateStatic+0x56>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <xQueueGenericCreateStatic+0x5a>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <xQueueGenericCreateStatic+0x5c>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <xQueueGenericCreateStatic+0x84>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <xQueueGenericCreateStatic+0x88>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <xQueueGenericCreateStatic+0x8a>
 80061ac:	2300      	movs	r3, #0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	61fb      	str	r3, [r7, #28]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061ca:	2348      	movs	r3, #72	@ 0x48
 80061cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b48      	cmp	r3, #72	@ 0x48
 80061d2:	d00b      	beq.n	80061ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	61bb      	str	r3, [r7, #24]
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006200:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f840 	bl	8006294 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006216:	4618      	mov	r0, r3
 8006218:	3730      	adds	r7, #48	@ 0x30
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800621e:	b580      	push	{r7, lr}
 8006220:	b08a      	sub	sp, #40	@ 0x28
 8006222:	af02      	add	r7, sp, #8
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	4613      	mov	r3, r2
 800622a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	613b      	str	r3, [r7, #16]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	3348      	adds	r3, #72	@ 0x48
 8006258:	4618      	mov	r0, r3
 800625a:	f002 f891 	bl	8008380 <pvPortMalloc>
 800625e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d011      	beq.n	800628a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	3348      	adds	r3, #72	@ 0x48
 800626e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006278:	79fa      	ldrb	r2, [r7, #7]
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4613      	mov	r3, r2
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f805 	bl	8006294 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800628a:	69bb      	ldr	r3, [r7, #24]
	}
 800628c:	4618      	mov	r0, r3
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e002      	b.n	80062b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062c2:	2101      	movs	r1, #1
 80062c4:	69b8      	ldr	r0, [r7, #24]
 80062c6:	f7ff fec3 	bl	8006050 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062f2:	2300      	movs	r3, #0
 80062f4:	2200      	movs	r2, #0
 80062f6:	2100      	movs	r1, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f837 	bl	800636c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	4603      	mov	r3, r0
 800630e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006310:	2301      	movs	r3, #1
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	2300      	movs	r3, #0
 8006316:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	461a      	mov	r2, r3
 800631c:	6939      	ldr	r1, [r7, #16]
 800631e:	6978      	ldr	r0, [r7, #20]
 8006320:	f7ff ff7d 	bl	800621e <xQueueGenericCreate>
 8006324:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff ffd3 	bl	80062d2 <prvInitialiseMutex>

		return xNewQueue;
 800632c:	68fb      	ldr	r3, [r7, #12]
	}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006336:	b580      	push	{r7, lr}
 8006338:	b088      	sub	sp, #32
 800633a:	af02      	add	r7, sp, #8
 800633c:	4603      	mov	r3, r0
 800633e:	6039      	str	r1, [r7, #0]
 8006340:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006342:	2301      	movs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2200      	movs	r2, #0
 8006352:	6939      	ldr	r1, [r7, #16]
 8006354:	6978      	ldr	r0, [r7, #20]
 8006356:	f7ff fee5 	bl	8006124 <xQueueGenericCreateStatic>
 800635a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff ffb8 	bl	80062d2 <prvInitialiseMutex>

		return xNewQueue;
 8006362:	68fb      	ldr	r3, [r7, #12]
	}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08e      	sub	sp, #56	@ 0x38
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800637a:	2300      	movs	r3, #0
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <xQueueGenericSend+0x34>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <xQueueGenericSend+0x42>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <xQueueGenericSend+0x46>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xQueueGenericSend+0x48>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <xQueueGenericSend+0x64>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	e7fd      	b.n	80063cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d103      	bne.n	80063de <xQueueGenericSend+0x72>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <xQueueGenericSend+0x76>
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <xQueueGenericSend+0x78>
 80063e2:	2300      	movs	r3, #0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <xQueueGenericSend+0x94>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	623b      	str	r3, [r7, #32]
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006400:	f001 fba2 	bl	8007b48 <xTaskGetSchedulerState>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <xQueueGenericSend+0xa4>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <xQueueGenericSend+0xa8>
 8006410:	2301      	movs	r3, #1
 8006412:	e000      	b.n	8006416 <xQueueGenericSend+0xaa>
 8006414:	2300      	movs	r3, #0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <xQueueGenericSend+0xc6>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	61fb      	str	r3, [r7, #28]
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	e7fd      	b.n	800642e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006432:	f001 fea3 	bl	800817c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <xQueueGenericSend+0xdc>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d129      	bne.n	800649c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800644e:	f000 fc48 	bl	8006ce2 <prvCopyDataToQueue>
 8006452:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d010      	beq.n	800647e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	3324      	adds	r3, #36	@ 0x24
 8006460:	4618      	mov	r0, r3
 8006462:	f001 f9ab 	bl	80077bc <xTaskRemoveFromEventList>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d013      	beq.n	8006494 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800646c:	4b3f      	ldr	r3, [pc, #252]	@ (800656c <xQueueGenericSend+0x200>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	e00a      	b.n	8006494 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006484:	4b39      	ldr	r3, [pc, #228]	@ (800656c <xQueueGenericSend+0x200>)
 8006486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006494:	f001 fea2 	bl	80081dc <vPortExitCritical>
				return pdPASS;
 8006498:	2301      	movs	r3, #1
 800649a:	e063      	b.n	8006564 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064a2:	f001 fe9b 	bl	80081dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e05c      	b.n	8006564 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d106      	bne.n	80064be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 f9e5 	bl	8007884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ba:	2301      	movs	r3, #1
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064be:	f001 fe8d 	bl	80081dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064c2:	f000 ff6d 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c6:	f001 fe59 	bl	800817c <vPortEnterCritical>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064d0:	b25b      	sxtb	r3, r3
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d103      	bne.n	80064e0 <xQueueGenericSend+0x174>
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e6:	b25b      	sxtb	r3, r3
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d103      	bne.n	80064f6 <xQueueGenericSend+0x18a>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f6:	f001 fe71 	bl	80081dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064fa:	1d3a      	adds	r2, r7, #4
 80064fc:	f107 0314 	add.w	r3, r7, #20
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f001 f9d4 	bl	80078b0 <xTaskCheckForTimeOut>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d124      	bne.n	8006558 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800650e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006510:	f000 fcdf 	bl	8006ed2 <prvIsQueueFull>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d018      	beq.n	800654c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800651a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651c:	3310      	adds	r3, #16
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4611      	mov	r1, r2
 8006522:	4618      	mov	r0, r3
 8006524:	f001 f924 	bl	8007770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800652a:	f000 fc6a 	bl	8006e02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800652e:	f000 ff45 	bl	80073bc <xTaskResumeAll>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	f47f af7c 	bne.w	8006432 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800653a:	4b0c      	ldr	r3, [pc, #48]	@ (800656c <xQueueGenericSend+0x200>)
 800653c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	e772      	b.n	8006432 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800654c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800654e:	f000 fc58 	bl	8006e02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006552:	f000 ff33 	bl	80073bc <xTaskResumeAll>
 8006556:	e76c      	b.n	8006432 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800655a:	f000 fc52 	bl	8006e02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800655e:	f000 ff2d 	bl	80073bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006564:	4618      	mov	r0, r3
 8006566:	3738      	adds	r7, #56	@ 0x38
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b090      	sub	sp, #64	@ 0x40
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <xQueueGenericSendFromISR+0x3e>
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <xQueueGenericSendFromISR+0x42>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <xQueueGenericSendFromISR+0x44>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d103      	bne.n	80065de <xQueueGenericSendFromISR+0x6e>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <xQueueGenericSendFromISR+0x72>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueGenericSendFromISR+0x74>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	623b      	str	r3, [r7, #32]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006600:	f001 fe7e 	bl	8008300 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006604:	f3ef 8211 	mrs	r2, BASEPRI
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	61fa      	str	r2, [r7, #28]
 800661a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800661c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <xQueueGenericSendFromISR+0xc2>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d12f      	bne.n	8006692 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006648:	f000 fb4b 	bl	8006ce2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800664c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d112      	bne.n	800667c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d016      	beq.n	800668c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	3324      	adds	r3, #36	@ 0x24
 8006662:	4618      	mov	r0, r3
 8006664:	f001 f8aa 	bl	80077bc <xTaskRemoveFromEventList>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e007      	b.n	800668c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800667c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006680:	3301      	adds	r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	b25a      	sxtb	r2, r3
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800668c:	2301      	movs	r3, #1
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006690:	e001      	b.n	8006696 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006692:	2300      	movs	r3, #0
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006698:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3740      	adds	r7, #64	@ 0x40
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08e      	sub	sp, #56	@ 0x38
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	623b      	str	r3, [r7, #32]
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	e7fd      	b.n	80066d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	61fb      	str	r3, [r7, #28]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <xQueueGiveFromISR+0x5c>
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <xQueueGiveFromISR+0x60>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <xQueueGiveFromISR+0x62>
 800670c:	2300      	movs	r3, #0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	61bb      	str	r3, [r7, #24]
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	e7fd      	b.n	8006726 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800672a:	f001 fde9 	bl	8008300 <vPortValidateInterruptPriority>
	__asm volatile
 800672e:	f3ef 8211 	mrs	r2, BASEPRI
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	617a      	str	r2, [r7, #20]
 8006744:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006746:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006748:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006756:	429a      	cmp	r2, r3
 8006758:	d22b      	bcs.n	80067b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800676c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d112      	bne.n	800679c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	3324      	adds	r3, #36	@ 0x24
 8006782:	4618      	mov	r0, r3
 8006784:	f001 f81a 	bl	80077bc <xTaskRemoveFromEventList>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00e      	beq.n	80067ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e007      	b.n	80067ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800679c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067a0:	3301      	adds	r3, #1
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	b25a      	sxtb	r2, r3
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067ac:	2301      	movs	r3, #1
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b0:	e001      	b.n	80067b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f383 8811 	msr	BASEPRI, r3
}
 80067c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3738      	adds	r7, #56	@ 0x38
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	@ 0x30
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067d8:	2300      	movs	r3, #0
 80067da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <xQueueReceive+0x32>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	623b      	str	r3, [r7, #32]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <xQueueReceive+0x40>
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <xQueueReceive+0x44>
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <xQueueReceive+0x46>
 8006810:	2300      	movs	r3, #0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10b      	bne.n	800682e <xQueueReceive+0x62>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	61fb      	str	r3, [r7, #28]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800682e:	f001 f98b 	bl	8007b48 <xTaskGetSchedulerState>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <xQueueReceive+0x72>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <xQueueReceive+0x76>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <xQueueReceive+0x78>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <xQueueReceive+0x94>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	61bb      	str	r3, [r7, #24]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006860:	f001 fc8c 	bl	800817c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01f      	beq.n	80068b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006874:	f000 fa9f 	bl	8006db6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	1e5a      	subs	r2, r3, #1
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00f      	beq.n	80068a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	3310      	adds	r3, #16
 800688c:	4618      	mov	r0, r3
 800688e:	f000 ff95 	bl	80077bc <xTaskRemoveFromEventList>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006898:	4b3c      	ldr	r3, [pc, #240]	@ (800698c <xQueueReceive+0x1c0>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068a8:	f001 fc98 	bl	80081dc <vPortExitCritical>
				return pdPASS;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e069      	b.n	8006984 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068b6:	f001 fc91 	bl	80081dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e062      	b.n	8006984 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068c4:	f107 0310 	add.w	r3, r7, #16
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 ffdb 	bl	8007884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ce:	2301      	movs	r3, #1
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068d2:	f001 fc83 	bl	80081dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068d6:	f000 fd63 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068da:	f001 fc4f 	bl	800817c <vPortEnterCritical>
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d103      	bne.n	80068f4 <xQueueReceive+0x128>
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d103      	bne.n	800690a <xQueueReceive+0x13e>
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800690a:	f001 fc67 	bl	80081dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800690e:	1d3a      	adds	r2, r7, #4
 8006910:	f107 0310 	add.w	r3, r7, #16
 8006914:	4611      	mov	r1, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ffca 	bl	80078b0 <xTaskCheckForTimeOut>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d123      	bne.n	800696a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006924:	f000 fabf 	bl	8006ea6 <prvIsQueueEmpty>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d017      	beq.n	800695e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	3324      	adds	r3, #36	@ 0x24
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f000 ff1a 	bl	8007770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800693c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800693e:	f000 fa60 	bl	8006e02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006942:	f000 fd3b 	bl	80073bc <xTaskResumeAll>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d189      	bne.n	8006860 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800694c:	4b0f      	ldr	r3, [pc, #60]	@ (800698c <xQueueReceive+0x1c0>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	e780      	b.n	8006860 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800695e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006960:	f000 fa4f 	bl	8006e02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006964:	f000 fd2a 	bl	80073bc <xTaskResumeAll>
 8006968:	e77a      	b.n	8006860 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800696a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800696c:	f000 fa49 	bl	8006e02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006970:	f000 fd24 	bl	80073bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006976:	f000 fa96 	bl	8006ea6 <prvIsQueueEmpty>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	f43f af6f 	beq.w	8006860 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006982:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006984:	4618      	mov	r0, r3
 8006986:	3730      	adds	r7, #48	@ 0x30
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08e      	sub	sp, #56	@ 0x38
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	61fb      	str	r3, [r7, #28]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e4:	f001 f8b0 	bl	8007b48 <xTaskGetSchedulerState>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <xQueueSemaphoreTake+0x64>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <xQueueSemaphoreTake+0x68>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <xQueueSemaphoreTake+0x6a>
 80069f8:	2300      	movs	r3, #0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	61bb      	str	r3, [r7, #24]
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a16:	f001 fbb1 	bl	800817c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d024      	beq.n	8006a70 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	1e5a      	subs	r2, r3, #1
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a36:	f001 fa33 	bl	8007ea0 <pvTaskIncrementMutexHeldCount>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00f      	beq.n	8006a68 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	3310      	adds	r3, #16
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 feb5 	bl	80077bc <xTaskRemoveFromEventList>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d007      	beq.n	8006a68 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a58:	4b54      	ldr	r3, [pc, #336]	@ (8006bac <xQueueSemaphoreTake+0x21c>)
 8006a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a68:	f001 fbb8 	bl	80081dc <vPortExitCritical>
				return pdPASS;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e098      	b.n	8006ba2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d112      	bne.n	8006a9c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	617b      	str	r3, [r7, #20]
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a94:	f001 fba2 	bl	80081dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e082      	b.n	8006ba2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa2:	f107 030c 	add.w	r3, r7, #12
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 feec 	bl	8007884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ab0:	f001 fb94 	bl	80081dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ab4:	f000 fc74 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab8:	f001 fb60 	bl	800817c <vPortEnterCritical>
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ac2:	b25b      	sxtb	r3, r3
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d103      	bne.n	8006ad2 <xQueueSemaphoreTake+0x142>
 8006aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ade:	d103      	bne.n	8006ae8 <xQueueSemaphoreTake+0x158>
 8006ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ae8:	f001 fb78 	bl	80081dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aec:	463a      	mov	r2, r7
 8006aee:	f107 030c 	add.w	r3, r7, #12
 8006af2:	4611      	mov	r1, r2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fedb 	bl	80078b0 <xTaskCheckForTimeOut>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d132      	bne.n	8006b66 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b02:	f000 f9d0 	bl	8006ea6 <prvIsQueueEmpty>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d026      	beq.n	8006b5a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b14:	f001 fb32 	bl	800817c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f831 	bl	8007b84 <xTaskPriorityInherit>
 8006b22:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b24:	f001 fb5a 	bl	80081dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2a:	3324      	adds	r3, #36	@ 0x24
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	4611      	mov	r1, r2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fe1d 	bl	8007770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b38:	f000 f963 	bl	8006e02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b3c:	f000 fc3e 	bl	80073bc <xTaskResumeAll>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f47f af67 	bne.w	8006a16 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b48:	4b18      	ldr	r3, [pc, #96]	@ (8006bac <xQueueSemaphoreTake+0x21c>)
 8006b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	e75d      	b.n	8006a16 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b5c:	f000 f951 	bl	8006e02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b60:	f000 fc2c 	bl	80073bc <xTaskResumeAll>
 8006b64:	e757      	b.n	8006a16 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b68:	f000 f94b 	bl	8006e02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b6c:	f000 fc26 	bl	80073bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b72:	f000 f998 	bl	8006ea6 <prvIsQueueEmpty>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f43f af4c 	beq.w	8006a16 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b84:	f001 fafa 	bl	800817c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b8a:	f000 f893 	bl	8006cb4 <prvGetDisinheritPriorityAfterTimeout>
 8006b8e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f8f2 	bl	8007d80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b9c:	f001 fb1e 	bl	80081dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ba0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3738      	adds	r7, #56	@ 0x38
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08e      	sub	sp, #56	@ 0x38
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	623b      	str	r3, [r7, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <xQueueReceiveFromISR+0x3c>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <xQueueReceiveFromISR+0x40>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <xQueueReceiveFromISR+0x42>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10b      	bne.n	8006c0e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	61fb      	str	r3, [r7, #28]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c0e:	f001 fb77 	bl	8008300 <vPortValidateInterruptPriority>
	__asm volatile
 8006c12:	f3ef 8211 	mrs	r2, BASEPRI
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	61ba      	str	r2, [r7, #24]
 8006c28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c32:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d02f      	beq.n	8006c9a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c48:	f000 f8b5 	bl	8006db6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	1e5a      	subs	r2, r3, #1
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5c:	d112      	bne.n	8006c84 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	3310      	adds	r3, #16
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fda6 	bl	80077bc <xTaskRemoveFromEventList>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00e      	beq.n	8006c94 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e007      	b.n	8006c94 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c88:	3301      	adds	r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	b25a      	sxtb	r2, r3
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006c94:	2301      	movs	r3, #1
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c98:	e001      	b.n	8006c9e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f383 8811 	msr	BASEPRI, r3
}
 8006ca8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3738      	adds	r7, #56	@ 0x38
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d006      	beq.n	8006cd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1c3 0307 	rsb	r3, r3, #7
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e001      	b.n	8006cd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
	}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10d      	bne.n	8006d1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d14d      	bne.n	8006da4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 ffaf 	bl	8007c70 <xTaskPriorityDisinherit>
 8006d12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	609a      	str	r2, [r3, #8]
 8006d1a:	e043      	b.n	8006da4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d119      	bne.n	8006d56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6858      	ldr	r0, [r3, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	f002 fb8a 	bl	8009446 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	441a      	add	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d32b      	bcc.n	8006da4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	605a      	str	r2, [r3, #4]
 8006d54:	e026      	b.n	8006da4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68d8      	ldr	r0, [r3, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	f002 fb70 	bl	8009446 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	425b      	negs	r3, r3
 8006d70:	441a      	add	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d207      	bcs.n	8006d92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	425b      	negs	r3, r3
 8006d8c:	441a      	add	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d105      	bne.n	8006da4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dac:	697b      	ldr	r3, [r7, #20]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d018      	beq.n	8006dfa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd0:	441a      	add	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d303      	bcc.n	8006dea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68d9      	ldr	r1, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	461a      	mov	r2, r3
 8006df4:	6838      	ldr	r0, [r7, #0]
 8006df6:	f002 fb26 	bl	8009446 <memcpy>
	}
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e0a:	f001 f9b7 	bl	800817c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e16:	e011      	b.n	8006e3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d012      	beq.n	8006e46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3324      	adds	r3, #36	@ 0x24
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fcc9 	bl	80077bc <xTaskRemoveFromEventList>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e30:	f000 fda2 	bl	8007978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dce9      	bgt.n	8006e18 <prvUnlockQueue+0x16>
 8006e44:	e000      	b.n	8006e48 <prvUnlockQueue+0x46>
					break;
 8006e46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	22ff      	movs	r2, #255	@ 0xff
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e50:	f001 f9c4 	bl	80081dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e54:	f001 f992 	bl	800817c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e60:	e011      	b.n	8006e86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d012      	beq.n	8006e90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3310      	adds	r3, #16
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fca4 	bl	80077bc <xTaskRemoveFromEventList>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e7a:	f000 fd7d 	bl	8007978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dce9      	bgt.n	8006e62 <prvUnlockQueue+0x60>
 8006e8e:	e000      	b.n	8006e92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	22ff      	movs	r2, #255	@ 0xff
 8006e96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e9a:	f001 f99f 	bl	80081dc <vPortExitCritical>
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eae:	f001 f965 	bl	800817c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d102      	bne.n	8006ec0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e001      	b.n	8006ec4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ec4:	f001 f98a 	bl	80081dc <vPortExitCritical>

	return xReturn;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eda:	f001 f94f 	bl	800817c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d102      	bne.n	8006ef0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006eea:	2301      	movs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e001      	b.n	8006ef4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ef4:	f001 f972 	bl	80081dc <vPortExitCritical>

	return xReturn;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b08e      	sub	sp, #56	@ 0x38
 8006f06:	af04      	add	r7, sp, #16
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <xTaskCreateStatic+0x2c>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	623b      	str	r3, [r7, #32]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	61fb      	str	r3, [r7, #28]
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	e7fd      	b.n	8006f48 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f4c:	23a0      	movs	r3, #160	@ 0xa0
 8006f4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f54:	d00b      	beq.n	8006f6e <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	61bb      	str	r3, [r7, #24]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01e      	beq.n	8006fb4 <xTaskCreateStatic+0xb2>
 8006f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01b      	beq.n	8006fb4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f84:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	9302      	str	r3, [sp, #8]
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f850 	bl	800704c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fae:	f000 f8ed 	bl	800718c <prvAddNewTaskToReadyList>
 8006fb2:	e001      	b.n	8006fb8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fb8:	697b      	ldr	r3, [r7, #20]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3728      	adds	r7, #40	@ 0x28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b08c      	sub	sp, #48	@ 0x30
 8006fc6:	af04      	add	r7, sp, #16
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f9d2 	bl	8008380 <pvPortMalloc>
 8006fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fe4:	20a0      	movs	r0, #160	@ 0xa0
 8006fe6:	f001 f9cb 	bl	8008380 <pvPortMalloc>
 8006fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ff8:	e005      	b.n	8007006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ffa:	6978      	ldr	r0, [r7, #20]
 8006ffc:	f001 fa8e 	bl	800851c <vPortFree>
 8007000:	e001      	b.n	8007006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d017      	beq.n	800703c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	2300      	movs	r3, #0
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	9302      	str	r3, [sp, #8]
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	9301      	str	r3, [sp, #4]
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f80e 	bl	800704c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007030:	69f8      	ldr	r0, [r7, #28]
 8007032:	f000 f8ab 	bl	800718c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007036:	2301      	movs	r3, #1
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	e002      	b.n	8007042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800703c:	f04f 33ff 	mov.w	r3, #4294967295
 8007040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007042:	69bb      	ldr	r3, [r7, #24]
	}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007064:	3b01      	subs	r3, #1
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f023 0307 	bic.w	r3, r3, #7
 8007072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	617b      	str	r3, [r7, #20]
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	e7fd      	b.n	8007092 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01f      	beq.n	80070dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800709c:	2300      	movs	r3, #0
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	e012      	b.n	80070c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	4413      	add	r3, r2
 80070a8:	7819      	ldrb	r1, [r3, #0]
 80070aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	4413      	add	r3, r2
 80070b0:	3334      	adds	r3, #52	@ 0x34
 80070b2:	460a      	mov	r2, r1
 80070b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d9e9      	bls.n	80070a2 <prvInitialiseNewTask+0x56>
 80070ce:	e000      	b.n	80070d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80070d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070da:	e003      	b.n	80070e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	2b06      	cmp	r3, #6
 80070e8:	d901      	bls.n	80070ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070ea:	2306      	movs	r3, #6
 80070ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	2200      	movs	r2, #0
 80070fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	3304      	adds	r3, #4
 8007104:	4618      	mov	r0, r3
 8007106:	f7fe ff12 	bl	8005f2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	3318      	adds	r3, #24
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe ff0d 	bl	8005f2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007118:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f1c3 0207 	rsb	r2, r3, #7
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007128:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	2200      	movs	r2, #0
 800712e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	2200      	movs	r2, #0
 8007136:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	334c      	adds	r3, #76	@ 0x4c
 800713e:	224c      	movs	r2, #76	@ 0x4c
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f002 f89b 	bl	800927e <memset>
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	4a0d      	ldr	r2, [pc, #52]	@ (8007180 <prvInitialiseNewTask+0x134>)
 800714c:	651a      	str	r2, [r3, #80]	@ 0x50
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	4a0c      	ldr	r2, [pc, #48]	@ (8007184 <prvInitialiseNewTask+0x138>)
 8007152:	655a      	str	r2, [r3, #84]	@ 0x54
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	4a0c      	ldr	r2, [pc, #48]	@ (8007188 <prvInitialiseNewTask+0x13c>)
 8007158:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	68f9      	ldr	r1, [r7, #12]
 800715e:	69b8      	ldr	r0, [r7, #24]
 8007160:	f000 ff18 	bl	8007f94 <pxPortInitialiseStack>
 8007164:	4602      	mov	r2, r0
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800716a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007176:	bf00      	nop
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200047bc 	.word	0x200047bc
 8007184:	20004824 	.word	0x20004824
 8007188:	2000488c 	.word	0x2000488c

0800718c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007194:	f000 fff2 	bl	800817c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007198:	4b2a      	ldr	r3, [pc, #168]	@ (8007244 <prvAddNewTaskToReadyList+0xb8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	4a29      	ldr	r2, [pc, #164]	@ (8007244 <prvAddNewTaskToReadyList+0xb8>)
 80071a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071a2:	4b29      	ldr	r3, [pc, #164]	@ (8007248 <prvAddNewTaskToReadyList+0xbc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d109      	bne.n	80071be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071aa:	4a27      	ldr	r2, [pc, #156]	@ (8007248 <prvAddNewTaskToReadyList+0xbc>)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071b0:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <prvAddNewTaskToReadyList+0xb8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d110      	bne.n	80071da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071b8:	f000 fc02 	bl	80079c0 <prvInitialiseTaskLists>
 80071bc:	e00d      	b.n	80071da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071be:	4b23      	ldr	r3, [pc, #140]	@ (800724c <prvAddNewTaskToReadyList+0xc0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071c6:	4b20      	ldr	r3, [pc, #128]	@ (8007248 <prvAddNewTaskToReadyList+0xbc>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d802      	bhi.n	80071da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007248 <prvAddNewTaskToReadyList+0xbc>)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071da:	4b1d      	ldr	r3, [pc, #116]	@ (8007250 <prvAddNewTaskToReadyList+0xc4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3301      	adds	r3, #1
 80071e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007250 <prvAddNewTaskToReadyList+0xc4>)
 80071e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	2201      	movs	r2, #1
 80071ea:	409a      	lsls	r2, r3
 80071ec:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <prvAddNewTaskToReadyList+0xc8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	4a18      	ldr	r2, [pc, #96]	@ (8007254 <prvAddNewTaskToReadyList+0xc8>)
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4a15      	ldr	r2, [pc, #84]	@ (8007258 <prvAddNewTaskToReadyList+0xcc>)
 8007204:	441a      	add	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3304      	adds	r3, #4
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7fe fe9a 	bl	8005f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007212:	f000 ffe3 	bl	80081dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007216:	4b0d      	ldr	r3, [pc, #52]	@ (800724c <prvAddNewTaskToReadyList+0xc0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00e      	beq.n	800723c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800721e:	4b0a      	ldr	r3, [pc, #40]	@ (8007248 <prvAddNewTaskToReadyList+0xbc>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007228:	429a      	cmp	r2, r3
 800722a:	d207      	bcs.n	800723c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800722c:	4b0b      	ldr	r3, [pc, #44]	@ (800725c <prvAddNewTaskToReadyList+0xd0>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000760 	.word	0x20000760
 8007248:	20000660 	.word	0x20000660
 800724c:	2000076c 	.word	0x2000076c
 8007250:	2000077c 	.word	0x2000077c
 8007254:	20000768 	.word	0x20000768
 8007258:	20000664 	.word	0x20000664
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d018      	beq.n	80072a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007272:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <vTaskDelay+0x64>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00b      	beq.n	8007292 <vTaskDelay+0x32>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	60bb      	str	r3, [r7, #8]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007292:	f000 f885 	bl	80073a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007296:	2100      	movs	r1, #0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fe15 	bl	8007ec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800729e:	f000 f88d 	bl	80073bc <xTaskResumeAll>
 80072a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d107      	bne.n	80072ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80072aa:	4b07      	ldr	r3, [pc, #28]	@ (80072c8 <vTaskDelay+0x68>)
 80072ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000788 	.word	0x20000788
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08a      	sub	sp, #40	@ 0x28
 80072d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072da:	463a      	mov	r2, r7
 80072dc:	1d39      	adds	r1, r7, #4
 80072de:	f107 0308 	add.w	r3, r7, #8
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fa fe76 	bl	8001fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	9202      	str	r2, [sp, #8]
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	2300      	movs	r3, #0
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	2300      	movs	r3, #0
 80072f8:	460a      	mov	r2, r1
 80072fa:	4921      	ldr	r1, [pc, #132]	@ (8007380 <vTaskStartScheduler+0xb4>)
 80072fc:	4821      	ldr	r0, [pc, #132]	@ (8007384 <vTaskStartScheduler+0xb8>)
 80072fe:	f7ff fe00 	bl	8006f02 <xTaskCreateStatic>
 8007302:	4603      	mov	r3, r0
 8007304:	4a20      	ldr	r2, [pc, #128]	@ (8007388 <vTaskStartScheduler+0xbc>)
 8007306:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007308:	4b1f      	ldr	r3, [pc, #124]	@ (8007388 <vTaskStartScheduler+0xbc>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007310:	2301      	movs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e001      	b.n	800731a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d11b      	bne.n	8007358 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	613b      	str	r3, [r7, #16]
}
 8007332:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007334:	4b15      	ldr	r3, [pc, #84]	@ (800738c <vTaskStartScheduler+0xc0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	334c      	adds	r3, #76	@ 0x4c
 800733a:	4a15      	ldr	r2, [pc, #84]	@ (8007390 <vTaskStartScheduler+0xc4>)
 800733c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800733e:	4b15      	ldr	r3, [pc, #84]	@ (8007394 <vTaskStartScheduler+0xc8>)
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007346:	4b14      	ldr	r3, [pc, #80]	@ (8007398 <vTaskStartScheduler+0xcc>)
 8007348:	2201      	movs	r2, #1
 800734a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800734c:	4b13      	ldr	r3, [pc, #76]	@ (800739c <vTaskStartScheduler+0xd0>)
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007352:	f000 fea1 	bl	8008098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007356:	e00f      	b.n	8007378 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d10b      	bne.n	8007378 <vTaskStartScheduler+0xac>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60fb      	str	r3, [r7, #12]
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <vTaskStartScheduler+0xa8>
}
 8007378:	bf00      	nop
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	0800c6a0 	.word	0x0800c6a0
 8007384:	08007991 	.word	0x08007991
 8007388:	20000784 	.word	0x20000784
 800738c:	20000660 	.word	0x20000660
 8007390:	2000001c 	.word	0x2000001c
 8007394:	20000780 	.word	0x20000780
 8007398:	2000076c 	.word	0x2000076c
 800739c:	20000764 	.word	0x20000764

080073a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073a4:	4b04      	ldr	r3, [pc, #16]	@ (80073b8 <vTaskSuspendAll+0x18>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a03      	ldr	r2, [pc, #12]	@ (80073b8 <vTaskSuspendAll+0x18>)
 80073ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073ae:	bf00      	nop
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20000788 	.word	0x20000788

080073bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ca:	4b42      	ldr	r3, [pc, #264]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10b      	bne.n	80073ea <xTaskResumeAll+0x2e>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	603b      	str	r3, [r7, #0]
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073ea:	f000 fec7 	bl	800817c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073ee:	4b39      	ldr	r3, [pc, #228]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	4a37      	ldr	r2, [pc, #220]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f8:	4b36      	ldr	r3, [pc, #216]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d161      	bne.n	80074c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007400:	4b35      	ldr	r3, [pc, #212]	@ (80074d8 <xTaskResumeAll+0x11c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d05d      	beq.n	80074c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007408:	e02e      	b.n	8007468 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740a:	4b34      	ldr	r3, [pc, #208]	@ (80074dc <xTaskResumeAll+0x120>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3318      	adds	r3, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fdf0 	bl	8005ffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fdeb 	bl	8005ffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742a:	2201      	movs	r2, #1
 800742c:	409a      	lsls	r2, r3
 800742e:	4b2c      	ldr	r3, [pc, #176]	@ (80074e0 <xTaskResumeAll+0x124>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4313      	orrs	r3, r2
 8007434:	4a2a      	ldr	r2, [pc, #168]	@ (80074e0 <xTaskResumeAll+0x124>)
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4a27      	ldr	r2, [pc, #156]	@ (80074e4 <xTaskResumeAll+0x128>)
 8007446:	441a      	add	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3304      	adds	r3, #4
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7fe fd79 	bl	8005f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007458:	4b23      	ldr	r3, [pc, #140]	@ (80074e8 <xTaskResumeAll+0x12c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	429a      	cmp	r2, r3
 8007460:	d302      	bcc.n	8007468 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007462:	4b22      	ldr	r3, [pc, #136]	@ (80074ec <xTaskResumeAll+0x130>)
 8007464:	2201      	movs	r2, #1
 8007466:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007468:	4b1c      	ldr	r3, [pc, #112]	@ (80074dc <xTaskResumeAll+0x120>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1cc      	bne.n	800740a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007476:	f000 fb47 	bl	8007b08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800747a:	4b1d      	ldr	r3, [pc, #116]	@ (80074f0 <xTaskResumeAll+0x134>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d010      	beq.n	80074a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007486:	f000 f857 	bl	8007538 <xTaskIncrementTick>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007490:	4b16      	ldr	r3, [pc, #88]	@ (80074ec <xTaskResumeAll+0x130>)
 8007492:	2201      	movs	r2, #1
 8007494:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f1      	bne.n	8007486 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074a2:	4b13      	ldr	r3, [pc, #76]	@ (80074f0 <xTaskResumeAll+0x134>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074a8:	4b10      	ldr	r3, [pc, #64]	@ (80074ec <xTaskResumeAll+0x130>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074b4:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <xTaskResumeAll+0x138>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074c4:	f000 fe8a 	bl	80081dc <vPortExitCritical>

	return xAlreadyYielded;
 80074c8:	68bb      	ldr	r3, [r7, #8]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20000788 	.word	0x20000788
 80074d8:	20000760 	.word	0x20000760
 80074dc:	20000720 	.word	0x20000720
 80074e0:	20000768 	.word	0x20000768
 80074e4:	20000664 	.word	0x20000664
 80074e8:	20000660 	.word	0x20000660
 80074ec:	20000774 	.word	0x20000774
 80074f0:	20000770 	.word	0x20000770
 80074f4:	e000ed04 	.word	0xe000ed04

080074f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074fe:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <xTaskGetTickCount+0x18>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007504:	687b      	ldr	r3, [r7, #4]
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr
 8007510:	20000764 	.word	0x20000764

08007514 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800751a:	f000 fef1 	bl	8008300 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800751e:	2300      	movs	r3, #0
 8007520:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007522:	4b04      	ldr	r3, [pc, #16]	@ (8007534 <xTaskGetTickCountFromISR+0x20>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007528:	683b      	ldr	r3, [r7, #0]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000764 	.word	0x20000764

08007538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800753e:	2300      	movs	r3, #0
 8007540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007542:	4b4f      	ldr	r3, [pc, #316]	@ (8007680 <xTaskIncrementTick+0x148>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f040 808f 	bne.w	800766a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800754c:	4b4d      	ldr	r3, [pc, #308]	@ (8007684 <xTaskIncrementTick+0x14c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007554:	4a4b      	ldr	r2, [pc, #300]	@ (8007684 <xTaskIncrementTick+0x14c>)
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d121      	bne.n	80075a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007560:	4b49      	ldr	r3, [pc, #292]	@ (8007688 <xTaskIncrementTick+0x150>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <xTaskIncrementTick+0x4a>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	603b      	str	r3, [r7, #0]
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	e7fd      	b.n	800757e <xTaskIncrementTick+0x46>
 8007582:	4b41      	ldr	r3, [pc, #260]	@ (8007688 <xTaskIncrementTick+0x150>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	4b40      	ldr	r3, [pc, #256]	@ (800768c <xTaskIncrementTick+0x154>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a3e      	ldr	r2, [pc, #248]	@ (8007688 <xTaskIncrementTick+0x150>)
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	4a3e      	ldr	r2, [pc, #248]	@ (800768c <xTaskIncrementTick+0x154>)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	4b3e      	ldr	r3, [pc, #248]	@ (8007690 <xTaskIncrementTick+0x158>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	4a3c      	ldr	r2, [pc, #240]	@ (8007690 <xTaskIncrementTick+0x158>)
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	f000 fab2 	bl	8007b08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007694 <xTaskIncrementTick+0x15c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d348      	bcc.n	8007640 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ae:	4b36      	ldr	r3, [pc, #216]	@ (8007688 <xTaskIncrementTick+0x150>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b8:	4b36      	ldr	r3, [pc, #216]	@ (8007694 <xTaskIncrementTick+0x15c>)
 80075ba:	f04f 32ff 	mov.w	r2, #4294967295
 80075be:	601a      	str	r2, [r3, #0]
					break;
 80075c0:	e03e      	b.n	8007640 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c2:	4b31      	ldr	r3, [pc, #196]	@ (8007688 <xTaskIncrementTick+0x150>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d203      	bcs.n	80075e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075da:	4a2e      	ldr	r2, [pc, #184]	@ (8007694 <xTaskIncrementTick+0x15c>)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075e0:	e02e      	b.n	8007640 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3304      	adds	r3, #4
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fd08 	bl	8005ffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	3318      	adds	r3, #24
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fcff 	bl	8005ffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007602:	2201      	movs	r2, #1
 8007604:	409a      	lsls	r2, r3
 8007606:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <xTaskIncrementTick+0x160>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4313      	orrs	r3, r2
 800760c:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <xTaskIncrementTick+0x160>)
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4a1f      	ldr	r2, [pc, #124]	@ (800769c <xTaskIncrementTick+0x164>)
 800761e:	441a      	add	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f7fe fc8d 	bl	8005f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007630:	4b1b      	ldr	r3, [pc, #108]	@ (80076a0 <xTaskIncrementTick+0x168>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	429a      	cmp	r2, r3
 8007638:	d3b9      	bcc.n	80075ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800763a:	2301      	movs	r3, #1
 800763c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800763e:	e7b6      	b.n	80075ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007640:	4b17      	ldr	r3, [pc, #92]	@ (80076a0 <xTaskIncrementTick+0x168>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007646:	4915      	ldr	r1, [pc, #84]	@ (800769c <xTaskIncrementTick+0x164>)
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d901      	bls.n	800765c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007658:	2301      	movs	r3, #1
 800765a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800765c:	4b11      	ldr	r3, [pc, #68]	@ (80076a4 <xTaskIncrementTick+0x16c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	e004      	b.n	8007674 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800766a:	4b0f      	ldr	r3, [pc, #60]	@ (80076a8 <xTaskIncrementTick+0x170>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	4a0d      	ldr	r2, [pc, #52]	@ (80076a8 <xTaskIncrementTick+0x170>)
 8007672:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007674:	697b      	ldr	r3, [r7, #20]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000788 	.word	0x20000788
 8007684:	20000764 	.word	0x20000764
 8007688:	20000718 	.word	0x20000718
 800768c:	2000071c 	.word	0x2000071c
 8007690:	20000778 	.word	0x20000778
 8007694:	20000780 	.word	0x20000780
 8007698:	20000768 	.word	0x20000768
 800769c:	20000664 	.word	0x20000664
 80076a0:	20000660 	.word	0x20000660
 80076a4:	20000774 	.word	0x20000774
 80076a8:	20000770 	.word	0x20000770

080076ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076b2:	4b29      	ldr	r3, [pc, #164]	@ (8007758 <vTaskSwitchContext+0xac>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076ba:	4b28      	ldr	r3, [pc, #160]	@ (800775c <vTaskSwitchContext+0xb0>)
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076c0:	e045      	b.n	800774e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80076c2:	4b26      	ldr	r3, [pc, #152]	@ (800775c <vTaskSwitchContext+0xb0>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c8:	4b25      	ldr	r3, [pc, #148]	@ (8007760 <vTaskSwitchContext+0xb4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	fab3 f383 	clz	r3, r3
 80076d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	f1c3 031f 	rsb	r3, r3, #31
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	4921      	ldr	r1, [pc, #132]	@ (8007764 <vTaskSwitchContext+0xb8>)
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10b      	bne.n	800770a <vTaskSwitchContext+0x5e>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	607b      	str	r3, [r7, #4]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <vTaskSwitchContext+0x5a>
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4a13      	ldr	r2, [pc, #76]	@ (8007764 <vTaskSwitchContext+0xb8>)
 8007716:	4413      	add	r3, r2
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	605a      	str	r2, [r3, #4]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	3308      	adds	r3, #8
 800772c:	429a      	cmp	r2, r3
 800772e:	d104      	bne.n	800773a <vTaskSwitchContext+0x8e>
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	605a      	str	r2, [r3, #4]
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4a09      	ldr	r2, [pc, #36]	@ (8007768 <vTaskSwitchContext+0xbc>)
 8007742:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007744:	4b08      	ldr	r3, [pc, #32]	@ (8007768 <vTaskSwitchContext+0xbc>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	334c      	adds	r3, #76	@ 0x4c
 800774a:	4a08      	ldr	r2, [pc, #32]	@ (800776c <vTaskSwitchContext+0xc0>)
 800774c:	6013      	str	r3, [r2, #0]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr
 8007758:	20000788 	.word	0x20000788
 800775c:	20000774 	.word	0x20000774
 8007760:	20000768 	.word	0x20000768
 8007764:	20000664 	.word	0x20000664
 8007768:	20000660 	.word	0x20000660
 800776c:	2000001c 	.word	0x2000001c

08007770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10b      	bne.n	8007798 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	bf00      	nop
 8007796:	e7fd      	b.n	8007794 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007798:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <vTaskPlaceOnEventList+0x48>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3318      	adds	r3, #24
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe fbf3 	bl	8005f8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077a6:	2101      	movs	r1, #1
 80077a8:	6838      	ldr	r0, [r7, #0]
 80077aa:	f000 fb8d 	bl	8007ec8 <prvAddCurrentTaskToDelayedList>
}
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000660 	.word	0x20000660

080077bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60fb      	str	r3, [r7, #12]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3318      	adds	r3, #24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fc04 	bl	8005ffc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f4:	4b1d      	ldr	r3, [pc, #116]	@ (800786c <xTaskRemoveFromEventList+0xb0>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d11c      	bne.n	8007836 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	3304      	adds	r3, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fbfb 	bl	8005ffc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780a:	2201      	movs	r2, #1
 800780c:	409a      	lsls	r2, r3
 800780e:	4b18      	ldr	r3, [pc, #96]	@ (8007870 <xTaskRemoveFromEventList+0xb4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4313      	orrs	r3, r2
 8007814:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <xTaskRemoveFromEventList+0xb4>)
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4a13      	ldr	r2, [pc, #76]	@ (8007874 <xTaskRemoveFromEventList+0xb8>)
 8007826:	441a      	add	r2, r3
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7fe fb89 	bl	8005f46 <vListInsertEnd>
 8007834:	e005      	b.n	8007842 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3318      	adds	r3, #24
 800783a:	4619      	mov	r1, r3
 800783c:	480e      	ldr	r0, [pc, #56]	@ (8007878 <xTaskRemoveFromEventList+0xbc>)
 800783e:	f7fe fb82 	bl	8005f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <xTaskRemoveFromEventList+0xc0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784c:	429a      	cmp	r2, r3
 800784e:	d905      	bls.n	800785c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007850:	2301      	movs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007854:	4b0a      	ldr	r3, [pc, #40]	@ (8007880 <xTaskRemoveFromEventList+0xc4>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e001      	b.n	8007860 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000788 	.word	0x20000788
 8007870:	20000768 	.word	0x20000768
 8007874:	20000664 	.word	0x20000664
 8007878:	20000720 	.word	0x20000720
 800787c:	20000660 	.word	0x20000660
 8007880:	20000774 	.word	0x20000774

08007884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800788c:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <vTaskInternalSetTimeOutState+0x24>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <vTaskInternalSetTimeOutState+0x28>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	605a      	str	r2, [r3, #4]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000778 	.word	0x20000778
 80078ac:	20000764 	.word	0x20000764

080078b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10b      	bne.n	80078d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10b      	bne.n	80078f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	60fb      	str	r3, [r7, #12]
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80078f6:	f000 fc41 	bl	800817c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007970 <xTaskCheckForTimeOut+0xc0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007912:	d102      	bne.n	800791a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007914:	2300      	movs	r3, #0
 8007916:	61fb      	str	r3, [r7, #28]
 8007918:	e023      	b.n	8007962 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b15      	ldr	r3, [pc, #84]	@ (8007974 <xTaskCheckForTimeOut+0xc4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d007      	beq.n	8007936 <xTaskCheckForTimeOut+0x86>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	d302      	bcc.n	8007936 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	e015      	b.n	8007962 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	429a      	cmp	r2, r3
 800793e:	d20b      	bcs.n	8007958 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ff99 	bl	8007884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	e004      	b.n	8007962 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007962:	f000 fc3b 	bl	80081dc <vPortExitCritical>

	return xReturn;
 8007966:	69fb      	ldr	r3, [r7, #28]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000764 	.word	0x20000764
 8007974:	20000778 	.word	0x20000778

08007978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800797c:	4b03      	ldr	r3, [pc, #12]	@ (800798c <vTaskMissedYield+0x14>)
 800797e:	2201      	movs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000774 	.word	0x20000774

08007990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007998:	f000 f852 	bl	8007a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800799c:	4b06      	ldr	r3, [pc, #24]	@ (80079b8 <prvIdleTask+0x28>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d9f9      	bls.n	8007998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079a4:	4b05      	ldr	r3, [pc, #20]	@ (80079bc <prvIdleTask+0x2c>)
 80079a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079b4:	e7f0      	b.n	8007998 <prvIdleTask+0x8>
 80079b6:	bf00      	nop
 80079b8:	20000664 	.word	0x20000664
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c6:	2300      	movs	r3, #0
 80079c8:	607b      	str	r3, [r7, #4]
 80079ca:	e00c      	b.n	80079e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4a12      	ldr	r2, [pc, #72]	@ (8007a20 <prvInitialiseTaskLists+0x60>)
 80079d8:	4413      	add	r3, r2
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fa88 	bl	8005ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3301      	adds	r3, #1
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b06      	cmp	r3, #6
 80079ea:	d9ef      	bls.n	80079cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079ec:	480d      	ldr	r0, [pc, #52]	@ (8007a24 <prvInitialiseTaskLists+0x64>)
 80079ee:	f7fe fa7f 	bl	8005ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079f2:	480d      	ldr	r0, [pc, #52]	@ (8007a28 <prvInitialiseTaskLists+0x68>)
 80079f4:	f7fe fa7c 	bl	8005ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079f8:	480c      	ldr	r0, [pc, #48]	@ (8007a2c <prvInitialiseTaskLists+0x6c>)
 80079fa:	f7fe fa79 	bl	8005ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079fe:	480c      	ldr	r0, [pc, #48]	@ (8007a30 <prvInitialiseTaskLists+0x70>)
 8007a00:	f7fe fa76 	bl	8005ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a04:	480b      	ldr	r0, [pc, #44]	@ (8007a34 <prvInitialiseTaskLists+0x74>)
 8007a06:	f7fe fa73 	bl	8005ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <prvInitialiseTaskLists+0x78>)
 8007a0c:	4a05      	ldr	r2, [pc, #20]	@ (8007a24 <prvInitialiseTaskLists+0x64>)
 8007a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a10:	4b0a      	ldr	r3, [pc, #40]	@ (8007a3c <prvInitialiseTaskLists+0x7c>)
 8007a12:	4a05      	ldr	r2, [pc, #20]	@ (8007a28 <prvInitialiseTaskLists+0x68>)
 8007a14:	601a      	str	r2, [r3, #0]
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000664 	.word	0x20000664
 8007a24:	200006f0 	.word	0x200006f0
 8007a28:	20000704 	.word	0x20000704
 8007a2c:	20000720 	.word	0x20000720
 8007a30:	20000734 	.word	0x20000734
 8007a34:	2000074c 	.word	0x2000074c
 8007a38:	20000718 	.word	0x20000718
 8007a3c:	2000071c 	.word	0x2000071c

08007a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a46:	e019      	b.n	8007a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a48:	f000 fb98 	bl	800817c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	4b10      	ldr	r3, [pc, #64]	@ (8007a90 <prvCheckTasksWaitingTermination+0x50>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe facf 	bl	8005ffc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a94 <prvCheckTasksWaitingTermination+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	4a0b      	ldr	r2, [pc, #44]	@ (8007a94 <prvCheckTasksWaitingTermination+0x54>)
 8007a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a68:	4b0b      	ldr	r3, [pc, #44]	@ (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a72:	f000 fbb3 	bl	80081dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f810 	bl	8007a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a7c:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e1      	bne.n	8007a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000734 	.word	0x20000734
 8007a94:	20000760 	.word	0x20000760
 8007a98:	20000748 	.word	0x20000748

08007a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	334c      	adds	r3, #76	@ 0x4c
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f001 fc05 	bl	80092b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d108      	bne.n	8007aca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fd2d 	bl	800851c <vPortFree>
				vPortFree( pxTCB );
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fd2a 	bl	800851c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ac8:	e019      	b.n	8007afe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d103      	bne.n	8007adc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd21 	bl	800851c <vPortFree>
	}
 8007ada:	e010      	b.n	8007afe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d00b      	beq.n	8007afe <prvDeleteTCB+0x62>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	60fb      	str	r3, [r7, #12]
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	e7fd      	b.n	8007afa <prvDeleteTCB+0x5e>
	}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b40 <prvResetNextTaskUnblockTime+0x38>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b18:	4b0a      	ldr	r3, [pc, #40]	@ (8007b44 <prvResetNextTaskUnblockTime+0x3c>)
 8007b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b20:	e008      	b.n	8007b34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b22:	4b07      	ldr	r3, [pc, #28]	@ (8007b40 <prvResetNextTaskUnblockTime+0x38>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4a04      	ldr	r2, [pc, #16]	@ (8007b44 <prvResetNextTaskUnblockTime+0x3c>)
 8007b32:	6013      	str	r3, [r2, #0]
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000718 	.word	0x20000718
 8007b44:	20000780 	.word	0x20000780

08007b48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b7c <xTaskGetSchedulerState+0x34>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b56:	2301      	movs	r3, #1
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	e008      	b.n	8007b6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b5c:	4b08      	ldr	r3, [pc, #32]	@ (8007b80 <xTaskGetSchedulerState+0x38>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b64:	2302      	movs	r3, #2
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	e001      	b.n	8007b6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b6e:	687b      	ldr	r3, [r7, #4]
	}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	2000076c 	.word	0x2000076c
 8007b80:	20000788 	.word	0x20000788

08007b84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d05e      	beq.n	8007c58 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9e:	4b31      	ldr	r3, [pc, #196]	@ (8007c64 <xTaskPriorityInherit+0xe0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d24e      	bcs.n	8007c46 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	db06      	blt.n	8007bbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8007c64 <xTaskPriorityInherit+0xe0>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb6:	f1c3 0207 	rsb	r2, r3, #7
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	6959      	ldr	r1, [r3, #20]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4a26      	ldr	r2, [pc, #152]	@ (8007c68 <xTaskPriorityInherit+0xe4>)
 8007bd0:	4413      	add	r3, r2
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	d12f      	bne.n	8007c36 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fa0e 	bl	8005ffc <uxListRemove>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bea:	2201      	movs	r2, #1
 8007bec:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf0:	43da      	mvns	r2, r3
 8007bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c6c <xTaskPriorityInherit+0xe8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c6c <xTaskPriorityInherit+0xe8>)
 8007bfa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bfc:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <xTaskPriorityInherit+0xe0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	409a      	lsls	r2, r3
 8007c0e:	4b17      	ldr	r3, [pc, #92]	@ (8007c6c <xTaskPriorityInherit+0xe8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	4a15      	ldr	r2, [pc, #84]	@ (8007c6c <xTaskPriorityInherit+0xe8>)
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a10      	ldr	r2, [pc, #64]	@ (8007c68 <xTaskPriorityInherit+0xe4>)
 8007c26:	441a      	add	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f7fe f989 	bl	8005f46 <vListInsertEnd>
 8007c34:	e004      	b.n	8007c40 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c36:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <xTaskPriorityInherit+0xe0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c40:	2301      	movs	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e008      	b.n	8007c58 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c4a:	4b06      	ldr	r3, [pc, #24]	@ (8007c64 <xTaskPriorityInherit+0xe0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d201      	bcs.n	8007c58 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c58:	68fb      	ldr	r3, [r7, #12]
	}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000660 	.word	0x20000660
 8007c68:	20000664 	.word	0x20000664
 8007c6c:	20000768 	.word	0x20000768

08007c70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d070      	beq.n	8007d68 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c86:	4b3b      	ldr	r3, [pc, #236]	@ (8007d74 <xTaskPriorityDisinherit+0x104>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d00b      	beq.n	8007ca8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60fb      	str	r3, [r7, #12]
}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	e7fd      	b.n	8007ca4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60bb      	str	r3, [r7, #8]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ccc:	1e5a      	subs	r2, r3, #1
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d044      	beq.n	8007d68 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d140      	bne.n	8007d68 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe f986 	bl	8005ffc <uxListRemove>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d115      	bne.n	8007d22 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfa:	491f      	ldr	r1, [pc, #124]	@ (8007d78 <xTaskPriorityDisinherit+0x108>)
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <xTaskPriorityDisinherit+0xb2>
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d10:	2201      	movs	r2, #1
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	43da      	mvns	r2, r3
 8007d18:	4b18      	ldr	r3, [pc, #96]	@ (8007d7c <xTaskPriorityDisinherit+0x10c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	4a17      	ldr	r2, [pc, #92]	@ (8007d7c <xTaskPriorityDisinherit+0x10c>)
 8007d20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2e:	f1c3 0207 	rsb	r2, r3, #7
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	409a      	lsls	r2, r3
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d7c <xTaskPriorityDisinherit+0x10c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	4a0d      	ldr	r2, [pc, #52]	@ (8007d7c <xTaskPriorityDisinherit+0x10c>)
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4a08      	ldr	r2, [pc, #32]	@ (8007d78 <xTaskPriorityDisinherit+0x108>)
 8007d56:	441a      	add	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7fe f8f1 	bl	8005f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d68:	697b      	ldr	r3, [r7, #20]
	}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000660 	.word	0x20000660
 8007d78:	20000664 	.word	0x20000664
 8007d7c:	20000768 	.word	0x20000768

08007d80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d079      	beq.n	8007e8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d902      	bls.n	8007dc8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	e002      	b.n	8007dce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dcc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d059      	beq.n	8007e8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d154      	bne.n	8007e8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007de2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d10b      	bne.n	8007e04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60bb      	str	r3, [r7, #8]
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	db04      	blt.n	8007e22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f1c3 0207 	rsb	r2, r3, #7
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	6959      	ldr	r1, [r3, #20]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4a19      	ldr	r2, [pc, #100]	@ (8007e98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007e32:	4413      	add	r3, r2
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d129      	bne.n	8007e8c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe f8dd 	bl	8005ffc <uxListRemove>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	43da      	mvns	r2, r3
 8007e54:	4b11      	ldr	r3, [pc, #68]	@ (8007e9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	4a10      	ldr	r2, [pc, #64]	@ (8007e9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007e5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e62:	2201      	movs	r2, #1
 8007e64:	409a      	lsls	r2, r3
 8007e66:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8007e9c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4a06      	ldr	r2, [pc, #24]	@ (8007e98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007e7e:	441a      	add	r2, r3
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f7fe f85d 	bl	8005f46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e8c:	bf00      	nop
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000660 	.word	0x20000660
 8007e98:	20000664 	.word	0x20000664
 8007e9c:	20000768 	.word	0x20000768

08007ea0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ea4:	4b07      	ldr	r3, [pc, #28]	@ (8007ec4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007eac:	4b05      	ldr	r3, [pc, #20]	@ (8007ec4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007eb2:	3201      	adds	r2, #1
 8007eb4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007eb6:	4b03      	ldr	r3, [pc, #12]	@ (8007ec4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
	}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000660 	.word	0x20000660

08007ec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ed2:	4b29      	ldr	r3, [pc, #164]	@ (8007f78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ed8:	4b28      	ldr	r3, [pc, #160]	@ (8007f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe f88c 	bl	8005ffc <uxListRemove>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10b      	bne.n	8007f02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007eea:	4b24      	ldr	r3, [pc, #144]	@ (8007f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	43da      	mvns	r2, r3
 8007ef8:	4b21      	ldr	r3, [pc, #132]	@ (8007f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4013      	ands	r3, r2
 8007efe:	4a20      	ldr	r2, [pc, #128]	@ (8007f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f08:	d10a      	bne.n	8007f20 <prvAddCurrentTaskToDelayedList+0x58>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f10:	4b1a      	ldr	r3, [pc, #104]	@ (8007f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4619      	mov	r1, r3
 8007f18:	481a      	ldr	r0, [pc, #104]	@ (8007f84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f1a:	f7fe f814 	bl	8005f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f1e:	e026      	b.n	8007f6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f28:	4b14      	ldr	r3, [pc, #80]	@ (8007f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d209      	bcs.n	8007f4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f38:	4b13      	ldr	r3, [pc, #76]	@ (8007f88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fe f821 	bl	8005f8c <vListInsert>
}
 8007f4a:	e010      	b.n	8007f6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	4b0a      	ldr	r3, [pc, #40]	@ (8007f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7fe f817 	bl	8005f8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d202      	bcs.n	8007f6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f68:	4a09      	ldr	r2, [pc, #36]	@ (8007f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6013      	str	r3, [r2, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000764 	.word	0x20000764
 8007f7c:	20000660 	.word	0x20000660
 8007f80:	20000768 	.word	0x20000768
 8007f84:	2000074c 	.word	0x2000074c
 8007f88:	2000071c 	.word	0x2000071c
 8007f8c:	20000718 	.word	0x20000718
 8007f90:	20000780 	.word	0x20000780

08007f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3b04      	subs	r3, #4
 8007fa4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3b04      	subs	r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0201 	bic.w	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fc4:	4a08      	ldr	r2, [pc, #32]	@ (8007fe8 <pxPortInitialiseStack+0x54>)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3b14      	subs	r3, #20
 8007fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3b20      	subs	r3, #32
 8007fda:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr
 8007fe8:	08007fed 	.word	0x08007fed

08007fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <prvTaskExitError+0x54>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d00b      	beq.n	8008018 <prvTaskExitError+0x2c>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60fb      	str	r3, [r7, #12]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <prvTaskExitError+0x28>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	60bb      	str	r3, [r7, #8]
}
 800802a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800802c:	bf00      	nop
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0fc      	beq.n	800802e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr
 8008040:	2000000c 	.word	0x2000000c
	...

08008050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008050:	4b07      	ldr	r3, [pc, #28]	@ (8008070 <pxCurrentTCBConst2>)
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	6808      	ldr	r0, [r1, #0]
 8008056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800805a:	f380 8809 	msr	PSP, r0
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f380 8811 	msr	BASEPRI, r0
 800806a:	f04e 0e0d 	orr.w	lr, lr, #13
 800806e:	4770      	bx	lr

08008070 <pxCurrentTCBConst2>:
 8008070:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop

08008078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008078:	4806      	ldr	r0, [pc, #24]	@ (8008094 <prvPortStartFirstTask+0x1c>)
 800807a:	6800      	ldr	r0, [r0, #0]
 800807c:	6800      	ldr	r0, [r0, #0]
 800807e:	f380 8808 	msr	MSP, r0
 8008082:	b662      	cpsie	i
 8008084:	b661      	cpsie	f
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	df00      	svc	0
 8008090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008092:	bf00      	nop
 8008094:	e000ed08 	.word	0xe000ed08

08008098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800809e:	4b32      	ldr	r3, [pc, #200]	@ (8008168 <xPortStartScheduler+0xd0>)
 80080a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	22ff      	movs	r2, #255	@ 0xff
 80080ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	4b2a      	ldr	r3, [pc, #168]	@ (800816c <xPortStartScheduler+0xd4>)
 80080c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008170 <xPortStartScheduler+0xd8>)
 80080c8:	2207      	movs	r2, #7
 80080ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080cc:	e009      	b.n	80080e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80080ce:	4b28      	ldr	r3, [pc, #160]	@ (8008170 <xPortStartScheduler+0xd8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	4a26      	ldr	r2, [pc, #152]	@ (8008170 <xPortStartScheduler+0xd8>)
 80080d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ea:	2b80      	cmp	r3, #128	@ 0x80
 80080ec:	d0ef      	beq.n	80080ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080ee:	4b20      	ldr	r3, [pc, #128]	@ (8008170 <xPortStartScheduler+0xd8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1c3 0307 	rsb	r3, r3, #7
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d00b      	beq.n	8008112 <xPortStartScheduler+0x7a>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	60bb      	str	r3, [r7, #8]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008112:	4b17      	ldr	r3, [pc, #92]	@ (8008170 <xPortStartScheduler+0xd8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <xPortStartScheduler+0xd8>)
 800811a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800811c:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <xPortStartScheduler+0xd8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008124:	4a12      	ldr	r2, [pc, #72]	@ (8008170 <xPortStartScheduler+0xd8>)
 8008126:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	b2da      	uxtb	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008130:	4b10      	ldr	r3, [pc, #64]	@ (8008174 <xPortStartScheduler+0xdc>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a0f      	ldr	r2, [pc, #60]	@ (8008174 <xPortStartScheduler+0xdc>)
 8008136:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800813a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800813c:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <xPortStartScheduler+0xdc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0c      	ldr	r2, [pc, #48]	@ (8008174 <xPortStartScheduler+0xdc>)
 8008142:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008146:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008148:	f000 f8b8 	bl	80082bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800814c:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <xPortStartScheduler+0xe0>)
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008152:	f7ff ff91 	bl	8008078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008156:	f7ff faa9 	bl	80076ac <vTaskSwitchContext>
	prvTaskExitError();
 800815a:	f7ff ff47 	bl	8007fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	e000e400 	.word	0xe000e400
 800816c:	2000078c 	.word	0x2000078c
 8008170:	20000790 	.word	0x20000790
 8008174:	e000ed20 	.word	0xe000ed20
 8008178:	2000000c 	.word	0x2000000c

0800817c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	607b      	str	r3, [r7, #4]
}
 8008194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008196:	4b0f      	ldr	r3, [pc, #60]	@ (80081d4 <vPortEnterCritical+0x58>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3301      	adds	r3, #1
 800819c:	4a0d      	ldr	r2, [pc, #52]	@ (80081d4 <vPortEnterCritical+0x58>)
 800819e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081a0:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <vPortEnterCritical+0x58>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d110      	bne.n	80081ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081a8:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <vPortEnterCritical+0x5c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00b      	beq.n	80081ca <vPortEnterCritical+0x4e>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	603b      	str	r3, [r7, #0]
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <vPortEnterCritical+0x4a>
	}
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr
 80081d4:	2000000c 	.word	0x2000000c
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081e2:	4b12      	ldr	r3, [pc, #72]	@ (800822c <vPortExitCritical+0x50>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <vPortExitCritical+0x26>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	607b      	str	r3, [r7, #4]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008202:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <vPortExitCritical+0x50>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3b01      	subs	r3, #1
 8008208:	4a08      	ldr	r2, [pc, #32]	@ (800822c <vPortExitCritical+0x50>)
 800820a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800820c:	4b07      	ldr	r3, [pc, #28]	@ (800822c <vPortExitCritical+0x50>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <vPortExitCritical+0x44>
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f383 8811 	msr	BASEPRI, r3
}
 800821e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	2000000c 	.word	0x2000000c

08008230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008230:	f3ef 8009 	mrs	r0, PSP
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	4b0d      	ldr	r3, [pc, #52]	@ (8008270 <pxCurrentTCBConst>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008240:	6010      	str	r0, [r2, #0]
 8008242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008246:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800824a:	f380 8811 	msr	BASEPRI, r0
 800824e:	f7ff fa2d 	bl	80076ac <vTaskSwitchContext>
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f380 8811 	msr	BASEPRI, r0
 800825a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008266:	f380 8809 	msr	PSP, r0
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	4770      	bx	lr

08008270 <pxCurrentTCBConst>:
 8008270:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008292:	f7ff f951 	bl	8007538 <xTaskIncrementTick>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800829c:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <SysTick_Handler+0x40>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f383 8811 	msr	BASEPRI, r3
}
 80082ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082c0:	4b0a      	ldr	r3, [pc, #40]	@ (80082ec <vPortSetupTimerInterrupt+0x30>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082c6:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082cc:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <vPortSetupTimerInterrupt+0x38>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a09      	ldr	r2, [pc, #36]	@ (80082f8 <vPortSetupTimerInterrupt+0x3c>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	099b      	lsrs	r3, r3, #6
 80082d8:	4a08      	ldr	r2, [pc, #32]	@ (80082fc <vPortSetupTimerInterrupt+0x40>)
 80082da:	3b01      	subs	r3, #1
 80082dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082de:	4b03      	ldr	r3, [pc, #12]	@ (80082ec <vPortSetupTimerInterrupt+0x30>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr
 80082ec:	e000e010 	.word	0xe000e010
 80082f0:	e000e018 	.word	0xe000e018
 80082f4:	20000000 	.word	0x20000000
 80082f8:	10624dd3 	.word	0x10624dd3
 80082fc:	e000e014 	.word	0xe000e014

08008300 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008306:	f3ef 8305 	mrs	r3, IPSR
 800830a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b0f      	cmp	r3, #15
 8008310:	d915      	bls.n	800833e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008312:	4a17      	ldr	r2, [pc, #92]	@ (8008370 <vPortValidateInterruptPriority+0x70>)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800831c:	4b15      	ldr	r3, [pc, #84]	@ (8008374 <vPortValidateInterruptPriority+0x74>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	7afa      	ldrb	r2, [r7, #11]
 8008322:	429a      	cmp	r2, r3
 8008324:	d20b      	bcs.n	800833e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	607b      	str	r3, [r7, #4]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800833e:	4b0e      	ldr	r3, [pc, #56]	@ (8008378 <vPortValidateInterruptPriority+0x78>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008346:	4b0d      	ldr	r3, [pc, #52]	@ (800837c <vPortValidateInterruptPriority+0x7c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d90b      	bls.n	8008366 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	603b      	str	r3, [r7, #0]
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	e7fd      	b.n	8008362 <vPortValidateInterruptPriority+0x62>
	}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr
 8008370:	e000e3f0 	.word	0xe000e3f0
 8008374:	2000078c 	.word	0x2000078c
 8008378:	e000ed0c 	.word	0xe000ed0c
 800837c:	20000790 	.word	0x20000790

08008380 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	@ 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800838c:	f7ff f808 	bl	80073a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008390:	4b5c      	ldr	r3, [pc, #368]	@ (8008504 <pvPortMalloc+0x184>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008398:	f000 f924 	bl	80085e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800839c:	4b5a      	ldr	r3, [pc, #360]	@ (8008508 <pvPortMalloc+0x188>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4013      	ands	r3, r2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 8095 	bne.w	80084d4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01e      	beq.n	80083ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80083b0:	2208      	movs	r2, #8
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4413      	add	r3, r2
 80083b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f003 0307 	and.w	r3, r3, #7
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d015      	beq.n	80083ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f023 0307 	bic.w	r3, r3, #7
 80083c8:	3308      	adds	r3, #8
 80083ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00b      	beq.n	80083ee <pvPortMalloc+0x6e>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	617b      	str	r3, [r7, #20]
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	e7fd      	b.n	80083ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d06f      	beq.n	80084d4 <pvPortMalloc+0x154>
 80083f4:	4b45      	ldr	r3, [pc, #276]	@ (800850c <pvPortMalloc+0x18c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d86a      	bhi.n	80084d4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083fe:	4b44      	ldr	r3, [pc, #272]	@ (8008510 <pvPortMalloc+0x190>)
 8008400:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008402:	4b43      	ldr	r3, [pc, #268]	@ (8008510 <pvPortMalloc+0x190>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008408:	e004      	b.n	8008414 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d903      	bls.n	8008426 <pvPortMalloc+0xa6>
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1f1      	bne.n	800840a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008426:	4b37      	ldr	r3, [pc, #220]	@ (8008504 <pvPortMalloc+0x184>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800842c:	429a      	cmp	r2, r3
 800842e:	d051      	beq.n	80084d4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2208      	movs	r2, #8
 8008436:	4413      	add	r3, r2
 8008438:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	1ad2      	subs	r2, r2, r3
 800844a:	2308      	movs	r3, #8
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	429a      	cmp	r2, r3
 8008450:	d920      	bls.n	8008494 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4413      	add	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <pvPortMalloc+0xfc>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	613b      	str	r3, [r7, #16]
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	e7fd      	b.n	8008478 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	1ad2      	subs	r2, r2, r3
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800848e:	69b8      	ldr	r0, [r7, #24]
 8008490:	f000 f90a 	bl	80086a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008494:	4b1d      	ldr	r3, [pc, #116]	@ (800850c <pvPortMalloc+0x18c>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	4a1b      	ldr	r2, [pc, #108]	@ (800850c <pvPortMalloc+0x18c>)
 80084a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084a2:	4b1a      	ldr	r3, [pc, #104]	@ (800850c <pvPortMalloc+0x18c>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008514 <pvPortMalloc+0x194>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d203      	bcs.n	80084b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084ae:	4b17      	ldr	r3, [pc, #92]	@ (800850c <pvPortMalloc+0x18c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a18      	ldr	r2, [pc, #96]	@ (8008514 <pvPortMalloc+0x194>)
 80084b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	4b13      	ldr	r3, [pc, #76]	@ (8008508 <pvPortMalloc+0x188>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	431a      	orrs	r2, r3
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084ca:	4b13      	ldr	r3, [pc, #76]	@ (8008518 <pvPortMalloc+0x198>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	4a11      	ldr	r2, [pc, #68]	@ (8008518 <pvPortMalloc+0x198>)
 80084d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084d4:	f7fe ff72 	bl	80073bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <pvPortMalloc+0x17a>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60fb      	str	r3, [r7, #12]
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	e7fd      	b.n	80084f6 <pvPortMalloc+0x176>
	return pvReturn;
 80084fa:	69fb      	ldr	r3, [r7, #28]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3728      	adds	r7, #40	@ 0x28
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	200047a4 	.word	0x200047a4
 8008508:	200047b8 	.word	0x200047b8
 800850c:	200047a8 	.word	0x200047a8
 8008510:	2000479c 	.word	0x2000479c
 8008514:	200047ac 	.word	0x200047ac
 8008518:	200047b0 	.word	0x200047b0

0800851c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d04f      	beq.n	80085ce <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800852e:	2308      	movs	r3, #8
 8008530:	425b      	negs	r3, r3
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	4b25      	ldr	r3, [pc, #148]	@ (80085d8 <vPortFree+0xbc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4013      	ands	r3, r2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <vPortFree+0x46>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	60fb      	str	r3, [r7, #12]
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	e7fd      	b.n	800855e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <vPortFree+0x66>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	60bb      	str	r3, [r7, #8]
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	e7fd      	b.n	800857e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4b14      	ldr	r3, [pc, #80]	@ (80085d8 <vPortFree+0xbc>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01e      	beq.n	80085ce <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11a      	bne.n	80085ce <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	4b0e      	ldr	r3, [pc, #56]	@ (80085d8 <vPortFree+0xbc>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	401a      	ands	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085a8:	f7fe fefa 	bl	80073a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <vPortFree+0xc0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	4a09      	ldr	r2, [pc, #36]	@ (80085dc <vPortFree+0xc0>)
 80085b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ba:	6938      	ldr	r0, [r7, #16]
 80085bc:	f000 f874 	bl	80086a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <vPortFree+0xc4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a06      	ldr	r2, [pc, #24]	@ (80085e0 <vPortFree+0xc4>)
 80085c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085ca:	f7fe fef7 	bl	80073bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ce:	bf00      	nop
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	200047b8 	.word	0x200047b8
 80085dc:	200047a8 	.word	0x200047a8
 80085e0:	200047b4 	.word	0x200047b4

080085e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ea:	f244 0308 	movw	r3, #16392	@ 0x4008
 80085ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085f0:	4b27      	ldr	r3, [pc, #156]	@ (8008690 <prvHeapInit+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3307      	adds	r3, #7
 8008602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	4a1f      	ldr	r2, [pc, #124]	@ (8008690 <prvHeapInit+0xac>)
 8008614:	4413      	add	r3, r2
 8008616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800861c:	4a1d      	ldr	r2, [pc, #116]	@ (8008694 <prvHeapInit+0xb0>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008622:	4b1c      	ldr	r3, [pc, #112]	@ (8008694 <prvHeapInit+0xb0>)
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4413      	add	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008630:	2208      	movs	r2, #8
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	1a9b      	subs	r3, r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0307 	bic.w	r3, r3, #7
 800863e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a15      	ldr	r2, [pc, #84]	@ (8008698 <prvHeapInit+0xb4>)
 8008644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008646:	4b14      	ldr	r3, [pc, #80]	@ (8008698 <prvHeapInit+0xb4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800864e:	4b12      	ldr	r3, [pc, #72]	@ (8008698 <prvHeapInit+0xb4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008664:	4b0c      	ldr	r3, [pc, #48]	@ (8008698 <prvHeapInit+0xb4>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	4a0a      	ldr	r2, [pc, #40]	@ (800869c <prvHeapInit+0xb8>)
 8008672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4a09      	ldr	r2, [pc, #36]	@ (80086a0 <prvHeapInit+0xbc>)
 800867a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800867c:	4b09      	ldr	r3, [pc, #36]	@ (80086a4 <prvHeapInit+0xc0>)
 800867e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008682:	601a      	str	r2, [r3, #0]
}
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20000794 	.word	0x20000794
 8008694:	2000479c 	.word	0x2000479c
 8008698:	200047a4 	.word	0x200047a4
 800869c:	200047ac 	.word	0x200047ac
 80086a0:	200047a8 	.word	0x200047a8
 80086a4:	200047b8 	.word	0x200047b8

080086a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086b0:	4b27      	ldr	r3, [pc, #156]	@ (8008750 <prvInsertBlockIntoFreeList+0xa8>)
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <prvInsertBlockIntoFreeList+0x14>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d8f7      	bhi.n	80086b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d108      	bne.n	80086ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	441a      	add	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	441a      	add	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d118      	bne.n	8008730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b14      	ldr	r3, [pc, #80]	@ (8008754 <prvInsertBlockIntoFreeList+0xac>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d00d      	beq.n	8008726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	441a      	add	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e008      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008726:	4b0b      	ldr	r3, [pc, #44]	@ (8008754 <prvInsertBlockIntoFreeList+0xac>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e003      	b.n	8008738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d002      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	2000479c 	.word	0x2000479c
 8008754:	200047a4 	.word	0x200047a4

08008758 <__cvt>:
 8008758:	2b00      	cmp	r3, #0
 800875a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875e:	461d      	mov	r5, r3
 8008760:	bfbb      	ittet	lt
 8008762:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008766:	461d      	movlt	r5, r3
 8008768:	2300      	movge	r3, #0
 800876a:	232d      	movlt	r3, #45	@ 0x2d
 800876c:	b088      	sub	sp, #32
 800876e:	4614      	mov	r4, r2
 8008770:	bfb8      	it	lt
 8008772:	4614      	movlt	r4, r2
 8008774:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008776:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800877c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008780:	f023 0820 	bic.w	r8, r3, #32
 8008784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008788:	d005      	beq.n	8008796 <__cvt+0x3e>
 800878a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800878e:	d100      	bne.n	8008792 <__cvt+0x3a>
 8008790:	3601      	adds	r6, #1
 8008792:	2302      	movs	r3, #2
 8008794:	e000      	b.n	8008798 <__cvt+0x40>
 8008796:	2303      	movs	r3, #3
 8008798:	aa07      	add	r2, sp, #28
 800879a:	9204      	str	r2, [sp, #16]
 800879c:	aa06      	add	r2, sp, #24
 800879e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80087a2:	e9cd 3600 	strd	r3, r6, [sp]
 80087a6:	4622      	mov	r2, r4
 80087a8:	462b      	mov	r3, r5
 80087aa:	f000 fee5 	bl	8009578 <_dtoa_r>
 80087ae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087b2:	4607      	mov	r7, r0
 80087b4:	d119      	bne.n	80087ea <__cvt+0x92>
 80087b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087b8:	07db      	lsls	r3, r3, #31
 80087ba:	d50e      	bpl.n	80087da <__cvt+0x82>
 80087bc:	eb00 0906 	add.w	r9, r0, r6
 80087c0:	2200      	movs	r2, #0
 80087c2:	2300      	movs	r3, #0
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f8 f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80087cc:	b108      	cbz	r0, 80087d2 <__cvt+0x7a>
 80087ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80087d2:	2230      	movs	r2, #48	@ 0x30
 80087d4:	9b07      	ldr	r3, [sp, #28]
 80087d6:	454b      	cmp	r3, r9
 80087d8:	d31e      	bcc.n	8008818 <__cvt+0xc0>
 80087da:	4638      	mov	r0, r7
 80087dc:	9b07      	ldr	r3, [sp, #28]
 80087de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80087e0:	1bdb      	subs	r3, r3, r7
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	b008      	add	sp, #32
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087ee:	eb00 0906 	add.w	r9, r0, r6
 80087f2:	d1e5      	bne.n	80087c0 <__cvt+0x68>
 80087f4:	7803      	ldrb	r3, [r0, #0]
 80087f6:	2b30      	cmp	r3, #48	@ 0x30
 80087f8:	d10a      	bne.n	8008810 <__cvt+0xb8>
 80087fa:	2200      	movs	r2, #0
 80087fc:	2300      	movs	r3, #0
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f8d1 	bl	80009a8 <__aeabi_dcmpeq>
 8008806:	b918      	cbnz	r0, 8008810 <__cvt+0xb8>
 8008808:	f1c6 0601 	rsb	r6, r6, #1
 800880c:	f8ca 6000 	str.w	r6, [sl]
 8008810:	f8da 3000 	ldr.w	r3, [sl]
 8008814:	4499      	add	r9, r3
 8008816:	e7d3      	b.n	80087c0 <__cvt+0x68>
 8008818:	1c59      	adds	r1, r3, #1
 800881a:	9107      	str	r1, [sp, #28]
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	e7d9      	b.n	80087d4 <__cvt+0x7c>

08008820 <__exponent>:
 8008820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008822:	2900      	cmp	r1, #0
 8008824:	bfb6      	itet	lt
 8008826:	232d      	movlt	r3, #45	@ 0x2d
 8008828:	232b      	movge	r3, #43	@ 0x2b
 800882a:	4249      	neglt	r1, r1
 800882c:	2909      	cmp	r1, #9
 800882e:	7002      	strb	r2, [r0, #0]
 8008830:	7043      	strb	r3, [r0, #1]
 8008832:	dd29      	ble.n	8008888 <__exponent+0x68>
 8008834:	f10d 0307 	add.w	r3, sp, #7
 8008838:	461d      	mov	r5, r3
 800883a:	270a      	movs	r7, #10
 800883c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008840:	461a      	mov	r2, r3
 8008842:	fb07 1416 	mls	r4, r7, r6, r1
 8008846:	3430      	adds	r4, #48	@ 0x30
 8008848:	f802 4c01 	strb.w	r4, [r2, #-1]
 800884c:	460c      	mov	r4, r1
 800884e:	2c63      	cmp	r4, #99	@ 0x63
 8008850:	4631      	mov	r1, r6
 8008852:	f103 33ff 	add.w	r3, r3, #4294967295
 8008856:	dcf1      	bgt.n	800883c <__exponent+0x1c>
 8008858:	3130      	adds	r1, #48	@ 0x30
 800885a:	1e94      	subs	r4, r2, #2
 800885c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008860:	4623      	mov	r3, r4
 8008862:	1c41      	adds	r1, r0, #1
 8008864:	42ab      	cmp	r3, r5
 8008866:	d30a      	bcc.n	800887e <__exponent+0x5e>
 8008868:	f10d 0309 	add.w	r3, sp, #9
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	42ac      	cmp	r4, r5
 8008870:	bf88      	it	hi
 8008872:	2300      	movhi	r3, #0
 8008874:	3302      	adds	r3, #2
 8008876:	4403      	add	r3, r0
 8008878:	1a18      	subs	r0, r3, r0
 800887a:	b003      	add	sp, #12
 800887c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008882:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008886:	e7ed      	b.n	8008864 <__exponent+0x44>
 8008888:	2330      	movs	r3, #48	@ 0x30
 800888a:	3130      	adds	r1, #48	@ 0x30
 800888c:	7083      	strb	r3, [r0, #2]
 800888e:	70c1      	strb	r1, [r0, #3]
 8008890:	1d03      	adds	r3, r0, #4
 8008892:	e7f1      	b.n	8008878 <__exponent+0x58>

08008894 <_printf_float>:
 8008894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	b091      	sub	sp, #68	@ 0x44
 800889a:	460c      	mov	r4, r1
 800889c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80088a0:	4616      	mov	r6, r2
 80088a2:	461f      	mov	r7, r3
 80088a4:	4605      	mov	r5, r0
 80088a6:	f000 fcf3 	bl	8009290 <_localeconv_r>
 80088aa:	6803      	ldr	r3, [r0, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	9308      	str	r3, [sp, #32]
 80088b0:	f7f7 fc4e 	bl	8000150 <strlen>
 80088b4:	2300      	movs	r3, #0
 80088b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80088b8:	f8d8 3000 	ldr.w	r3, [r8]
 80088bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80088be:	3307      	adds	r3, #7
 80088c0:	f023 0307 	bic.w	r3, r3, #7
 80088c4:	f103 0208 	add.w	r2, r3, #8
 80088c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088cc:	f8d4 b000 	ldr.w	fp, [r4]
 80088d0:	f8c8 2000 	str.w	r2, [r8]
 80088d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80088ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008b60 <_printf_float+0x2cc>)
 80088f0:	f7f8 f88c 	bl	8000a0c <__aeabi_dcmpun>
 80088f4:	bb70      	cbnz	r0, 8008954 <_printf_float+0xc0>
 80088f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	4b98      	ldr	r3, [pc, #608]	@ (8008b60 <_printf_float+0x2cc>)
 8008900:	f7f8 f866 	bl	80009d0 <__aeabi_dcmple>
 8008904:	bb30      	cbnz	r0, 8008954 <_printf_float+0xc0>
 8008906:	2200      	movs	r2, #0
 8008908:	2300      	movs	r3, #0
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	f7f8 f855 	bl	80009bc <__aeabi_dcmplt>
 8008912:	b110      	cbz	r0, 800891a <_printf_float+0x86>
 8008914:	232d      	movs	r3, #45	@ 0x2d
 8008916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800891a:	4a92      	ldr	r2, [pc, #584]	@ (8008b64 <_printf_float+0x2d0>)
 800891c:	4b92      	ldr	r3, [pc, #584]	@ (8008b68 <_printf_float+0x2d4>)
 800891e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008922:	bf94      	ite	ls
 8008924:	4690      	movls	r8, r2
 8008926:	4698      	movhi	r8, r3
 8008928:	2303      	movs	r3, #3
 800892a:	f04f 0900 	mov.w	r9, #0
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	f02b 0304 	bic.w	r3, fp, #4
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	4633      	mov	r3, r6
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	9700      	str	r7, [sp, #0]
 800893e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008940:	f000 f9d4 	bl	8008cec <_printf_common>
 8008944:	3001      	adds	r0, #1
 8008946:	f040 8090 	bne.w	8008a6a <_printf_float+0x1d6>
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	b011      	add	sp, #68	@ 0x44
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	4640      	mov	r0, r8
 800895a:	4649      	mov	r1, r9
 800895c:	f7f8 f856 	bl	8000a0c <__aeabi_dcmpun>
 8008960:	b148      	cbz	r0, 8008976 <_printf_float+0xe2>
 8008962:	464b      	mov	r3, r9
 8008964:	2b00      	cmp	r3, #0
 8008966:	bfb8      	it	lt
 8008968:	232d      	movlt	r3, #45	@ 0x2d
 800896a:	4a80      	ldr	r2, [pc, #512]	@ (8008b6c <_printf_float+0x2d8>)
 800896c:	bfb8      	it	lt
 800896e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008972:	4b7f      	ldr	r3, [pc, #508]	@ (8008b70 <_printf_float+0x2dc>)
 8008974:	e7d3      	b.n	800891e <_printf_float+0x8a>
 8008976:	6863      	ldr	r3, [r4, #4]
 8008978:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	d13f      	bne.n	8008a00 <_printf_float+0x16c>
 8008980:	2306      	movs	r3, #6
 8008982:	6063      	str	r3, [r4, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	9206      	str	r2, [sp, #24]
 800898e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008990:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008994:	aa0d      	add	r2, sp, #52	@ 0x34
 8008996:	9203      	str	r2, [sp, #12]
 8008998:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800899c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80089a0:	6863      	ldr	r3, [r4, #4]
 80089a2:	4642      	mov	r2, r8
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	4628      	mov	r0, r5
 80089a8:	464b      	mov	r3, r9
 80089aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80089ac:	f7ff fed4 	bl	8008758 <__cvt>
 80089b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089b2:	4680      	mov	r8, r0
 80089b4:	2947      	cmp	r1, #71	@ 0x47
 80089b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80089b8:	d128      	bne.n	8008a0c <_printf_float+0x178>
 80089ba:	1cc8      	adds	r0, r1, #3
 80089bc:	db02      	blt.n	80089c4 <_printf_float+0x130>
 80089be:	6863      	ldr	r3, [r4, #4]
 80089c0:	4299      	cmp	r1, r3
 80089c2:	dd40      	ble.n	8008a46 <_printf_float+0x1b2>
 80089c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80089c8:	fa5f fa8a 	uxtb.w	sl, sl
 80089cc:	4652      	mov	r2, sl
 80089ce:	3901      	subs	r1, #1
 80089d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80089d6:	f7ff ff23 	bl	8008820 <__exponent>
 80089da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089dc:	4681      	mov	r9, r0
 80089de:	1813      	adds	r3, r2, r0
 80089e0:	2a01      	cmp	r2, #1
 80089e2:	6123      	str	r3, [r4, #16]
 80089e4:	dc02      	bgt.n	80089ec <_printf_float+0x158>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	07d2      	lsls	r2, r2, #31
 80089ea:	d501      	bpl.n	80089f0 <_printf_float+0x15c>
 80089ec:	3301      	adds	r3, #1
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d09e      	beq.n	8008936 <_printf_float+0xa2>
 80089f8:	232d      	movs	r3, #45	@ 0x2d
 80089fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089fe:	e79a      	b.n	8008936 <_printf_float+0xa2>
 8008a00:	2947      	cmp	r1, #71	@ 0x47
 8008a02:	d1bf      	bne.n	8008984 <_printf_float+0xf0>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1bd      	bne.n	8008984 <_printf_float+0xf0>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e7ba      	b.n	8008982 <_printf_float+0xee>
 8008a0c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a10:	d9dc      	bls.n	80089cc <_printf_float+0x138>
 8008a12:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a16:	d118      	bne.n	8008a4a <_printf_float+0x1b6>
 8008a18:	2900      	cmp	r1, #0
 8008a1a:	6863      	ldr	r3, [r4, #4]
 8008a1c:	dd0b      	ble.n	8008a36 <_printf_float+0x1a2>
 8008a1e:	6121      	str	r1, [r4, #16]
 8008a20:	b913      	cbnz	r3, 8008a28 <_printf_float+0x194>
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	07d0      	lsls	r0, r2, #31
 8008a26:	d502      	bpl.n	8008a2e <_printf_float+0x19a>
 8008a28:	3301      	adds	r3, #1
 8008a2a:	440b      	add	r3, r1
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	f04f 0900 	mov.w	r9, #0
 8008a32:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a34:	e7dc      	b.n	80089f0 <_printf_float+0x15c>
 8008a36:	b913      	cbnz	r3, 8008a3e <_printf_float+0x1aa>
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	07d2      	lsls	r2, r2, #31
 8008a3c:	d501      	bpl.n	8008a42 <_printf_float+0x1ae>
 8008a3e:	3302      	adds	r3, #2
 8008a40:	e7f4      	b.n	8008a2c <_printf_float+0x198>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e7f2      	b.n	8008a2c <_printf_float+0x198>
 8008a46:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a4c:	4299      	cmp	r1, r3
 8008a4e:	db05      	blt.n	8008a5c <_printf_float+0x1c8>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	6121      	str	r1, [r4, #16]
 8008a54:	07d8      	lsls	r0, r3, #31
 8008a56:	d5ea      	bpl.n	8008a2e <_printf_float+0x19a>
 8008a58:	1c4b      	adds	r3, r1, #1
 8008a5a:	e7e7      	b.n	8008a2c <_printf_float+0x198>
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	bfcc      	ite	gt
 8008a60:	2201      	movgt	r2, #1
 8008a62:	f1c1 0202 	rsble	r2, r1, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	e7e0      	b.n	8008a2c <_printf_float+0x198>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	055a      	lsls	r2, r3, #21
 8008a6e:	d407      	bmi.n	8008a80 <_printf_float+0x1ec>
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	4642      	mov	r2, r8
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d12b      	bne.n	8008ad6 <_printf_float+0x242>
 8008a7e:	e764      	b.n	800894a <_printf_float+0xb6>
 8008a80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a84:	f240 80dc 	bls.w	8008c40 <_printf_float+0x3ac>
 8008a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f7f7 ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d033      	beq.n	8008b00 <_printf_float+0x26c>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	4a35      	ldr	r2, [pc, #212]	@ (8008b74 <_printf_float+0x2e0>)
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f43f af51 	beq.w	800894a <_printf_float+0xb6>
 8008aa8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008aac:	4543      	cmp	r3, r8
 8008aae:	db02      	blt.n	8008ab6 <_printf_float+0x222>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	07d8      	lsls	r0, r3, #31
 8008ab4:	d50f      	bpl.n	8008ad6 <_printf_float+0x242>
 8008ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f af42 	beq.w	800894a <_printf_float+0xb6>
 8008ac6:	f04f 0900 	mov.w	r9, #0
 8008aca:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ace:	f104 0a1a 	add.w	sl, r4, #26
 8008ad2:	45c8      	cmp	r8, r9
 8008ad4:	dc09      	bgt.n	8008aea <_printf_float+0x256>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	079b      	lsls	r3, r3, #30
 8008ada:	f100 8102 	bmi.w	8008ce2 <_printf_float+0x44e>
 8008ade:	68e0      	ldr	r0, [r4, #12]
 8008ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	bfb8      	it	lt
 8008ae6:	4618      	movlt	r0, r3
 8008ae8:	e731      	b.n	800894e <_printf_float+0xba>
 8008aea:	2301      	movs	r3, #1
 8008aec:	4652      	mov	r2, sl
 8008aee:	4631      	mov	r1, r6
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b8      	blx	r7
 8008af4:	3001      	adds	r0, #1
 8008af6:	f43f af28 	beq.w	800894a <_printf_float+0xb6>
 8008afa:	f109 0901 	add.w	r9, r9, #1
 8008afe:	e7e8      	b.n	8008ad2 <_printf_float+0x23e>
 8008b00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	dc38      	bgt.n	8008b78 <_printf_float+0x2e4>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	4a19      	ldr	r2, [pc, #100]	@ (8008b74 <_printf_float+0x2e0>)
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f af1a 	beq.w	800894a <_printf_float+0xb6>
 8008b16:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008b1a:	ea59 0303 	orrs.w	r3, r9, r3
 8008b1e:	d102      	bne.n	8008b26 <_printf_float+0x292>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	07d9      	lsls	r1, r3, #31
 8008b24:	d5d7      	bpl.n	8008ad6 <_printf_float+0x242>
 8008b26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	f43f af0a 	beq.w	800894a <_printf_float+0xb6>
 8008b36:	f04f 0a00 	mov.w	sl, #0
 8008b3a:	f104 0b1a 	add.w	fp, r4, #26
 8008b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b40:	425b      	negs	r3, r3
 8008b42:	4553      	cmp	r3, sl
 8008b44:	dc01      	bgt.n	8008b4a <_printf_float+0x2b6>
 8008b46:	464b      	mov	r3, r9
 8008b48:	e793      	b.n	8008a72 <_printf_float+0x1de>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	465a      	mov	r2, fp
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	f43f aef8 	beq.w	800894a <_printf_float+0xb6>
 8008b5a:	f10a 0a01 	add.w	sl, sl, #1
 8008b5e:	e7ee      	b.n	8008b3e <_printf_float+0x2aa>
 8008b60:	7fefffff 	.word	0x7fefffff
 8008b64:	0800cf26 	.word	0x0800cf26
 8008b68:	0800cf2a 	.word	0x0800cf2a
 8008b6c:	0800cf2e 	.word	0x0800cf2e
 8008b70:	0800cf32 	.word	0x0800cf32
 8008b74:	0800cf36 	.word	0x0800cf36
 8008b78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b7a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008b7e:	4553      	cmp	r3, sl
 8008b80:	bfa8      	it	ge
 8008b82:	4653      	movge	r3, sl
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	4699      	mov	r9, r3
 8008b88:	dc36      	bgt.n	8008bf8 <_printf_float+0x364>
 8008b8a:	f04f 0b00 	mov.w	fp, #0
 8008b8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b92:	f104 021a 	add.w	r2, r4, #26
 8008b96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b9a:	eba3 0309 	sub.w	r3, r3, r9
 8008b9e:	455b      	cmp	r3, fp
 8008ba0:	dc31      	bgt.n	8008c06 <_printf_float+0x372>
 8008ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ba4:	459a      	cmp	sl, r3
 8008ba6:	dc3a      	bgt.n	8008c1e <_printf_float+0x38a>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07da      	lsls	r2, r3, #31
 8008bac:	d437      	bmi.n	8008c1e <_printf_float+0x38a>
 8008bae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bb0:	ebaa 0903 	sub.w	r9, sl, r3
 8008bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bb6:	ebaa 0303 	sub.w	r3, sl, r3
 8008bba:	4599      	cmp	r9, r3
 8008bbc:	bfa8      	it	ge
 8008bbe:	4699      	movge	r9, r3
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	dc33      	bgt.n	8008c2e <_printf_float+0x39a>
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bce:	f104 0b1a 	add.w	fp, r4, #26
 8008bd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8008bd8:	eba3 0309 	sub.w	r3, r3, r9
 8008bdc:	4543      	cmp	r3, r8
 8008bde:	f77f af7a 	ble.w	8008ad6 <_printf_float+0x242>
 8008be2:	2301      	movs	r3, #1
 8008be4:	465a      	mov	r2, fp
 8008be6:	4631      	mov	r1, r6
 8008be8:	4628      	mov	r0, r5
 8008bea:	47b8      	blx	r7
 8008bec:	3001      	adds	r0, #1
 8008bee:	f43f aeac 	beq.w	800894a <_printf_float+0xb6>
 8008bf2:	f108 0801 	add.w	r8, r8, #1
 8008bf6:	e7ec      	b.n	8008bd2 <_printf_float+0x33e>
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	d1c2      	bne.n	8008b8a <_printf_float+0x2f6>
 8008c04:	e6a1      	b.n	800894a <_printf_float+0xb6>
 8008c06:	2301      	movs	r3, #1
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	920a      	str	r2, [sp, #40]	@ 0x28
 8008c0e:	47b8      	blx	r7
 8008c10:	3001      	adds	r0, #1
 8008c12:	f43f ae9a 	beq.w	800894a <_printf_float+0xb6>
 8008c16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c18:	f10b 0b01 	add.w	fp, fp, #1
 8008c1c:	e7bb      	b.n	8008b96 <_printf_float+0x302>
 8008c1e:	4631      	mov	r1, r6
 8008c20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d1c0      	bne.n	8008bae <_printf_float+0x31a>
 8008c2c:	e68d      	b.n	800894a <_printf_float+0xb6>
 8008c2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c30:	464b      	mov	r3, r9
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	4442      	add	r2, r8
 8008c38:	47b8      	blx	r7
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d1c3      	bne.n	8008bc6 <_printf_float+0x332>
 8008c3e:	e684      	b.n	800894a <_printf_float+0xb6>
 8008c40:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008c44:	f1ba 0f01 	cmp.w	sl, #1
 8008c48:	dc01      	bgt.n	8008c4e <_printf_float+0x3ba>
 8008c4a:	07db      	lsls	r3, r3, #31
 8008c4c:	d536      	bpl.n	8008cbc <_printf_float+0x428>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4642      	mov	r2, r8
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae76 	beq.w	800894a <_printf_float+0xb6>
 8008c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c62:	4631      	mov	r1, r6
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b8      	blx	r7
 8008c68:	3001      	adds	r0, #1
 8008c6a:	f43f ae6e 	beq.w	800894a <_printf_float+0xb6>
 8008c6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c72:	2200      	movs	r2, #0
 8008c74:	2300      	movs	r3, #0
 8008c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c7a:	f7f7 fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8008c7e:	b9c0      	cbnz	r0, 8008cb2 <_printf_float+0x41e>
 8008c80:	4653      	mov	r3, sl
 8008c82:	f108 0201 	add.w	r2, r8, #1
 8008c86:	4631      	mov	r1, r6
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d10c      	bne.n	8008caa <_printf_float+0x416>
 8008c90:	e65b      	b.n	800894a <_printf_float+0xb6>
 8008c92:	2301      	movs	r3, #1
 8008c94:	465a      	mov	r2, fp
 8008c96:	4631      	mov	r1, r6
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b8      	blx	r7
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	f43f ae54 	beq.w	800894a <_printf_float+0xb6>
 8008ca2:	f108 0801 	add.w	r8, r8, #1
 8008ca6:	45d0      	cmp	r8, sl
 8008ca8:	dbf3      	blt.n	8008c92 <_printf_float+0x3fe>
 8008caa:	464b      	mov	r3, r9
 8008cac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cb0:	e6e0      	b.n	8008a74 <_printf_float+0x1e0>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	f104 0b1a 	add.w	fp, r4, #26
 8008cba:	e7f4      	b.n	8008ca6 <_printf_float+0x412>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4642      	mov	r2, r8
 8008cc0:	e7e1      	b.n	8008c86 <_printf_float+0x3f2>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	464a      	mov	r2, r9
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f43f ae3c 	beq.w	800894a <_printf_float+0xb6>
 8008cd2:	f108 0801 	add.w	r8, r8, #1
 8008cd6:	68e3      	ldr	r3, [r4, #12]
 8008cd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008cda:	1a5b      	subs	r3, r3, r1
 8008cdc:	4543      	cmp	r3, r8
 8008cde:	dcf0      	bgt.n	8008cc2 <_printf_float+0x42e>
 8008ce0:	e6fd      	b.n	8008ade <_printf_float+0x24a>
 8008ce2:	f04f 0800 	mov.w	r8, #0
 8008ce6:	f104 0919 	add.w	r9, r4, #25
 8008cea:	e7f4      	b.n	8008cd6 <_printf_float+0x442>

08008cec <_printf_common>:
 8008cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	4616      	mov	r6, r2
 8008cf2:	4698      	mov	r8, r3
 8008cf4:	688a      	ldr	r2, [r1, #8]
 8008cf6:	690b      	ldr	r3, [r1, #16]
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bfb8      	it	lt
 8008cfe:	4613      	movlt	r3, r2
 8008d00:	6033      	str	r3, [r6, #0]
 8008d02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d06:	460c      	mov	r4, r1
 8008d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d0c:	b10a      	cbz	r2, 8008d12 <_printf_common+0x26>
 8008d0e:	3301      	adds	r3, #1
 8008d10:	6033      	str	r3, [r6, #0]
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	0699      	lsls	r1, r3, #26
 8008d16:	bf42      	ittt	mi
 8008d18:	6833      	ldrmi	r3, [r6, #0]
 8008d1a:	3302      	addmi	r3, #2
 8008d1c:	6033      	strmi	r3, [r6, #0]
 8008d1e:	6825      	ldr	r5, [r4, #0]
 8008d20:	f015 0506 	ands.w	r5, r5, #6
 8008d24:	d106      	bne.n	8008d34 <_printf_common+0x48>
 8008d26:	f104 0a19 	add.w	sl, r4, #25
 8008d2a:	68e3      	ldr	r3, [r4, #12]
 8008d2c:	6832      	ldr	r2, [r6, #0]
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	42ab      	cmp	r3, r5
 8008d32:	dc2b      	bgt.n	8008d8c <_printf_common+0xa0>
 8008d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d38:	6822      	ldr	r2, [r4, #0]
 8008d3a:	3b00      	subs	r3, #0
 8008d3c:	bf18      	it	ne
 8008d3e:	2301      	movne	r3, #1
 8008d40:	0692      	lsls	r2, r2, #26
 8008d42:	d430      	bmi.n	8008da6 <_printf_common+0xba>
 8008d44:	4641      	mov	r1, r8
 8008d46:	4638      	mov	r0, r7
 8008d48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d4c:	47c8      	blx	r9
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d023      	beq.n	8008d9a <_printf_common+0xae>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	f003 0306 	and.w	r3, r3, #6
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	bf14      	ite	ne
 8008d5e:	2500      	movne	r5, #0
 8008d60:	6833      	ldreq	r3, [r6, #0]
 8008d62:	f04f 0600 	mov.w	r6, #0
 8008d66:	bf08      	it	eq
 8008d68:	68e5      	ldreq	r5, [r4, #12]
 8008d6a:	f104 041a 	add.w	r4, r4, #26
 8008d6e:	bf08      	it	eq
 8008d70:	1aed      	subeq	r5, r5, r3
 8008d72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d76:	bf08      	it	eq
 8008d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	bfc4      	itt	gt
 8008d80:	1a9b      	subgt	r3, r3, r2
 8008d82:	18ed      	addgt	r5, r5, r3
 8008d84:	42b5      	cmp	r5, r6
 8008d86:	d11a      	bne.n	8008dbe <_printf_common+0xd2>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e008      	b.n	8008d9e <_printf_common+0xb2>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	4652      	mov	r2, sl
 8008d90:	4641      	mov	r1, r8
 8008d92:	4638      	mov	r0, r7
 8008d94:	47c8      	blx	r9
 8008d96:	3001      	adds	r0, #1
 8008d98:	d103      	bne.n	8008da2 <_printf_common+0xb6>
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da2:	3501      	adds	r5, #1
 8008da4:	e7c1      	b.n	8008d2a <_printf_common+0x3e>
 8008da6:	2030      	movs	r0, #48	@ 0x30
 8008da8:	18e1      	adds	r1, r4, r3
 8008daa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008db4:	4422      	add	r2, r4
 8008db6:	3302      	adds	r3, #2
 8008db8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dbc:	e7c2      	b.n	8008d44 <_printf_common+0x58>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	47c8      	blx	r9
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d0e6      	beq.n	8008d9a <_printf_common+0xae>
 8008dcc:	3601      	adds	r6, #1
 8008dce:	e7d9      	b.n	8008d84 <_printf_common+0x98>

08008dd0 <_printf_i>:
 8008dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	7e0f      	ldrb	r7, [r1, #24]
 8008dd6:	4691      	mov	r9, r2
 8008dd8:	2f78      	cmp	r7, #120	@ 0x78
 8008dda:	4680      	mov	r8, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	469a      	mov	sl, r3
 8008de0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008de2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008de6:	d807      	bhi.n	8008df8 <_printf_i+0x28>
 8008de8:	2f62      	cmp	r7, #98	@ 0x62
 8008dea:	d80a      	bhi.n	8008e02 <_printf_i+0x32>
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	f000 80d3 	beq.w	8008f98 <_printf_i+0x1c8>
 8008df2:	2f58      	cmp	r7, #88	@ 0x58
 8008df4:	f000 80ba 	beq.w	8008f6c <_printf_i+0x19c>
 8008df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e00:	e03a      	b.n	8008e78 <_printf_i+0xa8>
 8008e02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e06:	2b15      	cmp	r3, #21
 8008e08:	d8f6      	bhi.n	8008df8 <_printf_i+0x28>
 8008e0a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e10 <_printf_i+0x40>)
 8008e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008df9 	.word	0x08008df9
 8008e1c:	08008df9 	.word	0x08008df9
 8008e20:	08008df9 	.word	0x08008df9
 8008e24:	08008df9 	.word	0x08008df9
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008df9 	.word	0x08008df9
 8008e30:	08008df9 	.word	0x08008df9
 8008e34:	08008df9 	.word	0x08008df9
 8008e38:	08008df9 	.word	0x08008df9
 8008e3c:	08008f7f 	.word	0x08008f7f
 8008e40:	08008ea7 	.word	0x08008ea7
 8008e44:	08008f39 	.word	0x08008f39
 8008e48:	08008df9 	.word	0x08008df9
 8008e4c:	08008df9 	.word	0x08008df9
 8008e50:	08008fa1 	.word	0x08008fa1
 8008e54:	08008df9 	.word	0x08008df9
 8008e58:	08008ea7 	.word	0x08008ea7
 8008e5c:	08008df9 	.word	0x08008df9
 8008e60:	08008df9 	.word	0x08008df9
 8008e64:	08008f41 	.word	0x08008f41
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6032      	str	r2, [r6, #0]
 8008e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e09e      	b.n	8008fba <_printf_i+0x1ea>
 8008e7c:	6833      	ldr	r3, [r6, #0]
 8008e7e:	6820      	ldr	r0, [r4, #0]
 8008e80:	1d19      	adds	r1, r3, #4
 8008e82:	6031      	str	r1, [r6, #0]
 8008e84:	0606      	lsls	r6, r0, #24
 8008e86:	d501      	bpl.n	8008e8c <_printf_i+0xbc>
 8008e88:	681d      	ldr	r5, [r3, #0]
 8008e8a:	e003      	b.n	8008e94 <_printf_i+0xc4>
 8008e8c:	0645      	lsls	r5, r0, #25
 8008e8e:	d5fb      	bpl.n	8008e88 <_printf_i+0xb8>
 8008e90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	da03      	bge.n	8008ea0 <_printf_i+0xd0>
 8008e98:	232d      	movs	r3, #45	@ 0x2d
 8008e9a:	426d      	negs	r5, r5
 8008e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ea0:	230a      	movs	r3, #10
 8008ea2:	4859      	ldr	r0, [pc, #356]	@ (8009008 <_printf_i+0x238>)
 8008ea4:	e011      	b.n	8008eca <_printf_i+0xfa>
 8008ea6:	6821      	ldr	r1, [r4, #0]
 8008ea8:	6833      	ldr	r3, [r6, #0]
 8008eaa:	0608      	lsls	r0, r1, #24
 8008eac:	f853 5b04 	ldr.w	r5, [r3], #4
 8008eb0:	d402      	bmi.n	8008eb8 <_printf_i+0xe8>
 8008eb2:	0649      	lsls	r1, r1, #25
 8008eb4:	bf48      	it	mi
 8008eb6:	b2ad      	uxthmi	r5, r5
 8008eb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008eba:	6033      	str	r3, [r6, #0]
 8008ebc:	bf14      	ite	ne
 8008ebe:	230a      	movne	r3, #10
 8008ec0:	2308      	moveq	r3, #8
 8008ec2:	4851      	ldr	r0, [pc, #324]	@ (8009008 <_printf_i+0x238>)
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008eca:	6866      	ldr	r6, [r4, #4]
 8008ecc:	2e00      	cmp	r6, #0
 8008ece:	bfa8      	it	ge
 8008ed0:	6821      	ldrge	r1, [r4, #0]
 8008ed2:	60a6      	str	r6, [r4, #8]
 8008ed4:	bfa4      	itt	ge
 8008ed6:	f021 0104 	bicge.w	r1, r1, #4
 8008eda:	6021      	strge	r1, [r4, #0]
 8008edc:	b90d      	cbnz	r5, 8008ee2 <_printf_i+0x112>
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	d04b      	beq.n	8008f7a <_printf_i+0x1aa>
 8008ee2:	4616      	mov	r6, r2
 8008ee4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ee8:	fb03 5711 	mls	r7, r3, r1, r5
 8008eec:	5dc7      	ldrb	r7, [r0, r7]
 8008eee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ef2:	462f      	mov	r7, r5
 8008ef4:	42bb      	cmp	r3, r7
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	d9f4      	bls.n	8008ee4 <_printf_i+0x114>
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	d10b      	bne.n	8008f16 <_printf_i+0x146>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	07df      	lsls	r7, r3, #31
 8008f02:	d508      	bpl.n	8008f16 <_printf_i+0x146>
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	6861      	ldr	r1, [r4, #4]
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	bfde      	ittt	le
 8008f0c:	2330      	movle	r3, #48	@ 0x30
 8008f0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f16:	1b92      	subs	r2, r2, r6
 8008f18:	6122      	str	r2, [r4, #16]
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4640      	mov	r0, r8
 8008f20:	f8cd a000 	str.w	sl, [sp]
 8008f24:	aa03      	add	r2, sp, #12
 8008f26:	f7ff fee1 	bl	8008cec <_printf_common>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d14a      	bne.n	8008fc4 <_printf_i+0x1f4>
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f32:	b004      	add	sp, #16
 8008f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	f043 0320 	orr.w	r3, r3, #32
 8008f3e:	6023      	str	r3, [r4, #0]
 8008f40:	2778      	movs	r7, #120	@ 0x78
 8008f42:	4832      	ldr	r0, [pc, #200]	@ (800900c <_printf_i+0x23c>)
 8008f44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	6831      	ldr	r1, [r6, #0]
 8008f4c:	061f      	lsls	r7, r3, #24
 8008f4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f52:	d402      	bmi.n	8008f5a <_printf_i+0x18a>
 8008f54:	065f      	lsls	r7, r3, #25
 8008f56:	bf48      	it	mi
 8008f58:	b2ad      	uxthmi	r5, r5
 8008f5a:	6031      	str	r1, [r6, #0]
 8008f5c:	07d9      	lsls	r1, r3, #31
 8008f5e:	bf44      	itt	mi
 8008f60:	f043 0320 	orrmi.w	r3, r3, #32
 8008f64:	6023      	strmi	r3, [r4, #0]
 8008f66:	b11d      	cbz	r5, 8008f70 <_printf_i+0x1a0>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	e7ab      	b.n	8008ec4 <_printf_i+0xf4>
 8008f6c:	4826      	ldr	r0, [pc, #152]	@ (8009008 <_printf_i+0x238>)
 8008f6e:	e7e9      	b.n	8008f44 <_printf_i+0x174>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	f023 0320 	bic.w	r3, r3, #32
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	e7f6      	b.n	8008f68 <_printf_i+0x198>
 8008f7a:	4616      	mov	r6, r2
 8008f7c:	e7bd      	b.n	8008efa <_printf_i+0x12a>
 8008f7e:	6833      	ldr	r3, [r6, #0]
 8008f80:	6825      	ldr	r5, [r4, #0]
 8008f82:	1d18      	adds	r0, r3, #4
 8008f84:	6961      	ldr	r1, [r4, #20]
 8008f86:	6030      	str	r0, [r6, #0]
 8008f88:	062e      	lsls	r6, r5, #24
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	d501      	bpl.n	8008f92 <_printf_i+0x1c2>
 8008f8e:	6019      	str	r1, [r3, #0]
 8008f90:	e002      	b.n	8008f98 <_printf_i+0x1c8>
 8008f92:	0668      	lsls	r0, r5, #25
 8008f94:	d5fb      	bpl.n	8008f8e <_printf_i+0x1be>
 8008f96:	8019      	strh	r1, [r3, #0]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4616      	mov	r6, r2
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	e7bc      	b.n	8008f1a <_printf_i+0x14a>
 8008fa0:	6833      	ldr	r3, [r6, #0]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	1d1a      	adds	r2, r3, #4
 8008fa6:	6032      	str	r2, [r6, #0]
 8008fa8:	681e      	ldr	r6, [r3, #0]
 8008faa:	6862      	ldr	r2, [r4, #4]
 8008fac:	4630      	mov	r0, r6
 8008fae:	f000 fa3c 	bl	800942a <memchr>
 8008fb2:	b108      	cbz	r0, 8008fb8 <_printf_i+0x1e8>
 8008fb4:	1b80      	subs	r0, r0, r6
 8008fb6:	6060      	str	r0, [r4, #4]
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	6123      	str	r3, [r4, #16]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc2:	e7aa      	b.n	8008f1a <_printf_i+0x14a>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4640      	mov	r0, r8
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	47d0      	blx	sl
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d0ad      	beq.n	8008f2e <_printf_i+0x15e>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	079b      	lsls	r3, r3, #30
 8008fd6:	d413      	bmi.n	8009000 <_printf_i+0x230>
 8008fd8:	68e0      	ldr	r0, [r4, #12]
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	4298      	cmp	r0, r3
 8008fde:	bfb8      	it	lt
 8008fe0:	4618      	movlt	r0, r3
 8008fe2:	e7a6      	b.n	8008f32 <_printf_i+0x162>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	4632      	mov	r2, r6
 8008fe8:	4649      	mov	r1, r9
 8008fea:	4640      	mov	r0, r8
 8008fec:	47d0      	blx	sl
 8008fee:	3001      	adds	r0, #1
 8008ff0:	d09d      	beq.n	8008f2e <_printf_i+0x15e>
 8008ff2:	3501      	adds	r5, #1
 8008ff4:	68e3      	ldr	r3, [r4, #12]
 8008ff6:	9903      	ldr	r1, [sp, #12]
 8008ff8:	1a5b      	subs	r3, r3, r1
 8008ffa:	42ab      	cmp	r3, r5
 8008ffc:	dcf2      	bgt.n	8008fe4 <_printf_i+0x214>
 8008ffe:	e7eb      	b.n	8008fd8 <_printf_i+0x208>
 8009000:	2500      	movs	r5, #0
 8009002:	f104 0619 	add.w	r6, r4, #25
 8009006:	e7f5      	b.n	8008ff4 <_printf_i+0x224>
 8009008:	0800cf38 	.word	0x0800cf38
 800900c:	0800cf49 	.word	0x0800cf49

08009010 <std>:
 8009010:	2300      	movs	r3, #0
 8009012:	b510      	push	{r4, lr}
 8009014:	4604      	mov	r4, r0
 8009016:	e9c0 3300 	strd	r3, r3, [r0]
 800901a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800901e:	6083      	str	r3, [r0, #8]
 8009020:	8181      	strh	r1, [r0, #12]
 8009022:	6643      	str	r3, [r0, #100]	@ 0x64
 8009024:	81c2      	strh	r2, [r0, #14]
 8009026:	6183      	str	r3, [r0, #24]
 8009028:	4619      	mov	r1, r3
 800902a:	2208      	movs	r2, #8
 800902c:	305c      	adds	r0, #92	@ 0x5c
 800902e:	f000 f926 	bl	800927e <memset>
 8009032:	4b0d      	ldr	r3, [pc, #52]	@ (8009068 <std+0x58>)
 8009034:	6224      	str	r4, [r4, #32]
 8009036:	6263      	str	r3, [r4, #36]	@ 0x24
 8009038:	4b0c      	ldr	r3, [pc, #48]	@ (800906c <std+0x5c>)
 800903a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800903c:	4b0c      	ldr	r3, [pc, #48]	@ (8009070 <std+0x60>)
 800903e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009040:	4b0c      	ldr	r3, [pc, #48]	@ (8009074 <std+0x64>)
 8009042:	6323      	str	r3, [r4, #48]	@ 0x30
 8009044:	4b0c      	ldr	r3, [pc, #48]	@ (8009078 <std+0x68>)
 8009046:	429c      	cmp	r4, r3
 8009048:	d006      	beq.n	8009058 <std+0x48>
 800904a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800904e:	4294      	cmp	r4, r2
 8009050:	d002      	beq.n	8009058 <std+0x48>
 8009052:	33d0      	adds	r3, #208	@ 0xd0
 8009054:	429c      	cmp	r4, r3
 8009056:	d105      	bne.n	8009064 <std+0x54>
 8009058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009060:	f000 b9e0 	b.w	8009424 <__retarget_lock_init_recursive>
 8009064:	bd10      	pop	{r4, pc}
 8009066:	bf00      	nop
 8009068:	080091f9 	.word	0x080091f9
 800906c:	0800921b 	.word	0x0800921b
 8009070:	08009253 	.word	0x08009253
 8009074:	08009277 	.word	0x08009277
 8009078:	200047bc 	.word	0x200047bc

0800907c <stdio_exit_handler>:
 800907c:	4a02      	ldr	r2, [pc, #8]	@ (8009088 <stdio_exit_handler+0xc>)
 800907e:	4903      	ldr	r1, [pc, #12]	@ (800908c <stdio_exit_handler+0x10>)
 8009080:	4803      	ldr	r0, [pc, #12]	@ (8009090 <stdio_exit_handler+0x14>)
 8009082:	f000 b869 	b.w	8009158 <_fwalk_sglue>
 8009086:	bf00      	nop
 8009088:	20000010 	.word	0x20000010
 800908c:	0800b035 	.word	0x0800b035
 8009090:	20000020 	.word	0x20000020

08009094 <cleanup_stdio>:
 8009094:	6841      	ldr	r1, [r0, #4]
 8009096:	4b0c      	ldr	r3, [pc, #48]	@ (80090c8 <cleanup_stdio+0x34>)
 8009098:	b510      	push	{r4, lr}
 800909a:	4299      	cmp	r1, r3
 800909c:	4604      	mov	r4, r0
 800909e:	d001      	beq.n	80090a4 <cleanup_stdio+0x10>
 80090a0:	f001 ffc8 	bl	800b034 <_fflush_r>
 80090a4:	68a1      	ldr	r1, [r4, #8]
 80090a6:	4b09      	ldr	r3, [pc, #36]	@ (80090cc <cleanup_stdio+0x38>)
 80090a8:	4299      	cmp	r1, r3
 80090aa:	d002      	beq.n	80090b2 <cleanup_stdio+0x1e>
 80090ac:	4620      	mov	r0, r4
 80090ae:	f001 ffc1 	bl	800b034 <_fflush_r>
 80090b2:	68e1      	ldr	r1, [r4, #12]
 80090b4:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <cleanup_stdio+0x3c>)
 80090b6:	4299      	cmp	r1, r3
 80090b8:	d004      	beq.n	80090c4 <cleanup_stdio+0x30>
 80090ba:	4620      	mov	r0, r4
 80090bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c0:	f001 bfb8 	b.w	800b034 <_fflush_r>
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	bf00      	nop
 80090c8:	200047bc 	.word	0x200047bc
 80090cc:	20004824 	.word	0x20004824
 80090d0:	2000488c 	.word	0x2000488c

080090d4 <global_stdio_init.part.0>:
 80090d4:	b510      	push	{r4, lr}
 80090d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009104 <global_stdio_init.part.0+0x30>)
 80090d8:	4c0b      	ldr	r4, [pc, #44]	@ (8009108 <global_stdio_init.part.0+0x34>)
 80090da:	4a0c      	ldr	r2, [pc, #48]	@ (800910c <global_stdio_init.part.0+0x38>)
 80090dc:	4620      	mov	r0, r4
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	2104      	movs	r1, #4
 80090e2:	2200      	movs	r2, #0
 80090e4:	f7ff ff94 	bl	8009010 <std>
 80090e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090ec:	2201      	movs	r2, #1
 80090ee:	2109      	movs	r1, #9
 80090f0:	f7ff ff8e 	bl	8009010 <std>
 80090f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090f8:	2202      	movs	r2, #2
 80090fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090fe:	2112      	movs	r1, #18
 8009100:	f7ff bf86 	b.w	8009010 <std>
 8009104:	200048f4 	.word	0x200048f4
 8009108:	200047bc 	.word	0x200047bc
 800910c:	0800907d 	.word	0x0800907d

08009110 <__sfp_lock_acquire>:
 8009110:	4801      	ldr	r0, [pc, #4]	@ (8009118 <__sfp_lock_acquire+0x8>)
 8009112:	f000 b988 	b.w	8009426 <__retarget_lock_acquire_recursive>
 8009116:	bf00      	nop
 8009118:	200048fd 	.word	0x200048fd

0800911c <__sfp_lock_release>:
 800911c:	4801      	ldr	r0, [pc, #4]	@ (8009124 <__sfp_lock_release+0x8>)
 800911e:	f000 b983 	b.w	8009428 <__retarget_lock_release_recursive>
 8009122:	bf00      	nop
 8009124:	200048fd 	.word	0x200048fd

08009128 <__sinit>:
 8009128:	b510      	push	{r4, lr}
 800912a:	4604      	mov	r4, r0
 800912c:	f7ff fff0 	bl	8009110 <__sfp_lock_acquire>
 8009130:	6a23      	ldr	r3, [r4, #32]
 8009132:	b11b      	cbz	r3, 800913c <__sinit+0x14>
 8009134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009138:	f7ff bff0 	b.w	800911c <__sfp_lock_release>
 800913c:	4b04      	ldr	r3, [pc, #16]	@ (8009150 <__sinit+0x28>)
 800913e:	6223      	str	r3, [r4, #32]
 8009140:	4b04      	ldr	r3, [pc, #16]	@ (8009154 <__sinit+0x2c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f5      	bne.n	8009134 <__sinit+0xc>
 8009148:	f7ff ffc4 	bl	80090d4 <global_stdio_init.part.0>
 800914c:	e7f2      	b.n	8009134 <__sinit+0xc>
 800914e:	bf00      	nop
 8009150:	08009095 	.word	0x08009095
 8009154:	200048f4 	.word	0x200048f4

08009158 <_fwalk_sglue>:
 8009158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800915c:	4607      	mov	r7, r0
 800915e:	4688      	mov	r8, r1
 8009160:	4614      	mov	r4, r2
 8009162:	2600      	movs	r6, #0
 8009164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009168:	f1b9 0901 	subs.w	r9, r9, #1
 800916c:	d505      	bpl.n	800917a <_fwalk_sglue+0x22>
 800916e:	6824      	ldr	r4, [r4, #0]
 8009170:	2c00      	cmp	r4, #0
 8009172:	d1f7      	bne.n	8009164 <_fwalk_sglue+0xc>
 8009174:	4630      	mov	r0, r6
 8009176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d907      	bls.n	8009190 <_fwalk_sglue+0x38>
 8009180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009184:	3301      	adds	r3, #1
 8009186:	d003      	beq.n	8009190 <_fwalk_sglue+0x38>
 8009188:	4629      	mov	r1, r5
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	4306      	orrs	r6, r0
 8009190:	3568      	adds	r5, #104	@ 0x68
 8009192:	e7e9      	b.n	8009168 <_fwalk_sglue+0x10>

08009194 <iprintf>:
 8009194:	b40f      	push	{r0, r1, r2, r3}
 8009196:	b507      	push	{r0, r1, r2, lr}
 8009198:	4906      	ldr	r1, [pc, #24]	@ (80091b4 <iprintf+0x20>)
 800919a:	ab04      	add	r3, sp, #16
 800919c:	6808      	ldr	r0, [r1, #0]
 800919e:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a2:	6881      	ldr	r1, [r0, #8]
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	f001 fdad 	bl	800ad04 <_vfiprintf_r>
 80091aa:	b003      	add	sp, #12
 80091ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b0:	b004      	add	sp, #16
 80091b2:	4770      	bx	lr
 80091b4:	2000001c 	.word	0x2000001c

080091b8 <siprintf>:
 80091b8:	b40e      	push	{r1, r2, r3}
 80091ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80091be:	b500      	push	{lr}
 80091c0:	b09c      	sub	sp, #112	@ 0x70
 80091c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80091c4:	9002      	str	r0, [sp, #8]
 80091c6:	9006      	str	r0, [sp, #24]
 80091c8:	9107      	str	r1, [sp, #28]
 80091ca:	9104      	str	r1, [sp, #16]
 80091cc:	4808      	ldr	r0, [pc, #32]	@ (80091f0 <siprintf+0x38>)
 80091ce:	4909      	ldr	r1, [pc, #36]	@ (80091f4 <siprintf+0x3c>)
 80091d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d4:	9105      	str	r1, [sp, #20]
 80091d6:	6800      	ldr	r0, [r0, #0]
 80091d8:	a902      	add	r1, sp, #8
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	f001 fc6e 	bl	800aabc <_svfiprintf_r>
 80091e0:	2200      	movs	r2, #0
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	b01c      	add	sp, #112	@ 0x70
 80091e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ec:	b003      	add	sp, #12
 80091ee:	4770      	bx	lr
 80091f0:	2000001c 	.word	0x2000001c
 80091f4:	ffff0208 	.word	0xffff0208

080091f8 <__sread>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	460c      	mov	r4, r1
 80091fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009200:	f000 f8c2 	bl	8009388 <_read_r>
 8009204:	2800      	cmp	r0, #0
 8009206:	bfab      	itete	ge
 8009208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800920a:	89a3      	ldrhlt	r3, [r4, #12]
 800920c:	181b      	addge	r3, r3, r0
 800920e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009212:	bfac      	ite	ge
 8009214:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009216:	81a3      	strhlt	r3, [r4, #12]
 8009218:	bd10      	pop	{r4, pc}

0800921a <__swrite>:
 800921a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921e:	461f      	mov	r7, r3
 8009220:	898b      	ldrh	r3, [r1, #12]
 8009222:	4605      	mov	r5, r0
 8009224:	05db      	lsls	r3, r3, #23
 8009226:	460c      	mov	r4, r1
 8009228:	4616      	mov	r6, r2
 800922a:	d505      	bpl.n	8009238 <__swrite+0x1e>
 800922c:	2302      	movs	r3, #2
 800922e:	2200      	movs	r2, #0
 8009230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009234:	f000 f896 	bl	8009364 <_lseek_r>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	4632      	mov	r2, r6
 800923c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	4628      	mov	r0, r5
 8009244:	463b      	mov	r3, r7
 8009246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800924a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	f000 b8ad 	b.w	80093ac <_write_r>

08009252 <__sseek>:
 8009252:	b510      	push	{r4, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925a:	f000 f883 	bl	8009364 <_lseek_r>
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	bf15      	itete	ne
 8009264:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800926a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800926e:	81a3      	strheq	r3, [r4, #12]
 8009270:	bf18      	it	ne
 8009272:	81a3      	strhne	r3, [r4, #12]
 8009274:	bd10      	pop	{r4, pc}

08009276 <__sclose>:
 8009276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927a:	f000 b80d 	b.w	8009298 <_close_r>

0800927e <memset>:
 800927e:	4603      	mov	r3, r0
 8009280:	4402      	add	r2, r0
 8009282:	4293      	cmp	r3, r2
 8009284:	d100      	bne.n	8009288 <memset+0xa>
 8009286:	4770      	bx	lr
 8009288:	f803 1b01 	strb.w	r1, [r3], #1
 800928c:	e7f9      	b.n	8009282 <memset+0x4>
	...

08009290 <_localeconv_r>:
 8009290:	4800      	ldr	r0, [pc, #0]	@ (8009294 <_localeconv_r+0x4>)
 8009292:	4770      	bx	lr
 8009294:	2000015c 	.word	0x2000015c

08009298 <_close_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	2300      	movs	r3, #0
 800929c:	4d05      	ldr	r5, [pc, #20]	@ (80092b4 <_close_r+0x1c>)
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7fa fb79 	bl	800399a <_close>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_close_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_close_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	200048f8 	.word	0x200048f8

080092b8 <_reclaim_reent>:
 80092b8:	4b29      	ldr	r3, [pc, #164]	@ (8009360 <_reclaim_reent+0xa8>)
 80092ba:	b570      	push	{r4, r5, r6, lr}
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4604      	mov	r4, r0
 80092c0:	4283      	cmp	r3, r0
 80092c2:	d04b      	beq.n	800935c <_reclaim_reent+0xa4>
 80092c4:	69c3      	ldr	r3, [r0, #28]
 80092c6:	b1ab      	cbz	r3, 80092f4 <_reclaim_reent+0x3c>
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	b16b      	cbz	r3, 80092e8 <_reclaim_reent+0x30>
 80092cc:	2500      	movs	r5, #0
 80092ce:	69e3      	ldr	r3, [r4, #28]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	5959      	ldr	r1, [r3, r5]
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d13b      	bne.n	8009350 <_reclaim_reent+0x98>
 80092d8:	3504      	adds	r5, #4
 80092da:	2d80      	cmp	r5, #128	@ 0x80
 80092dc:	d1f7      	bne.n	80092ce <_reclaim_reent+0x16>
 80092de:	69e3      	ldr	r3, [r4, #28]
 80092e0:	4620      	mov	r0, r4
 80092e2:	68d9      	ldr	r1, [r3, #12]
 80092e4:	f000 ff10 	bl	800a108 <_free_r>
 80092e8:	69e3      	ldr	r3, [r4, #28]
 80092ea:	6819      	ldr	r1, [r3, #0]
 80092ec:	b111      	cbz	r1, 80092f4 <_reclaim_reent+0x3c>
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 ff0a 	bl	800a108 <_free_r>
 80092f4:	6961      	ldr	r1, [r4, #20]
 80092f6:	b111      	cbz	r1, 80092fe <_reclaim_reent+0x46>
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 ff05 	bl	800a108 <_free_r>
 80092fe:	69e1      	ldr	r1, [r4, #28]
 8009300:	b111      	cbz	r1, 8009308 <_reclaim_reent+0x50>
 8009302:	4620      	mov	r0, r4
 8009304:	f000 ff00 	bl	800a108 <_free_r>
 8009308:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800930a:	b111      	cbz	r1, 8009312 <_reclaim_reent+0x5a>
 800930c:	4620      	mov	r0, r4
 800930e:	f000 fefb 	bl	800a108 <_free_r>
 8009312:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009314:	b111      	cbz	r1, 800931c <_reclaim_reent+0x64>
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fef6 	bl	800a108 <_free_r>
 800931c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800931e:	b111      	cbz	r1, 8009326 <_reclaim_reent+0x6e>
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fef1 	bl	800a108 <_free_r>
 8009326:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009328:	b111      	cbz	r1, 8009330 <_reclaim_reent+0x78>
 800932a:	4620      	mov	r0, r4
 800932c:	f000 feec 	bl	800a108 <_free_r>
 8009330:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009332:	b111      	cbz	r1, 800933a <_reclaim_reent+0x82>
 8009334:	4620      	mov	r0, r4
 8009336:	f000 fee7 	bl	800a108 <_free_r>
 800933a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800933c:	b111      	cbz	r1, 8009344 <_reclaim_reent+0x8c>
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fee2 	bl	800a108 <_free_r>
 8009344:	6a23      	ldr	r3, [r4, #32]
 8009346:	b14b      	cbz	r3, 800935c <_reclaim_reent+0xa4>
 8009348:	4620      	mov	r0, r4
 800934a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800934e:	4718      	bx	r3
 8009350:	680e      	ldr	r6, [r1, #0]
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fed8 	bl	800a108 <_free_r>
 8009358:	4631      	mov	r1, r6
 800935a:	e7bb      	b.n	80092d4 <_reclaim_reent+0x1c>
 800935c:	bd70      	pop	{r4, r5, r6, pc}
 800935e:	bf00      	nop
 8009360:	2000001c 	.word	0x2000001c

08009364 <_lseek_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	4611      	mov	r1, r2
 800936c:	2200      	movs	r2, #0
 800936e:	4d05      	ldr	r5, [pc, #20]	@ (8009384 <_lseek_r+0x20>)
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f7fa fb35 	bl	80039e2 <_lseek>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_lseek_r+0x1e>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_lseek_r+0x1e>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	200048f8 	.word	0x200048f8

08009388 <_read_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4604      	mov	r4, r0
 800938c:	4608      	mov	r0, r1
 800938e:	4611      	mov	r1, r2
 8009390:	2200      	movs	r2, #0
 8009392:	4d05      	ldr	r5, [pc, #20]	@ (80093a8 <_read_r+0x20>)
 8009394:	602a      	str	r2, [r5, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	f7fa fae2 	bl	8003960 <_read>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d102      	bne.n	80093a6 <_read_r+0x1e>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	b103      	cbz	r3, 80093a6 <_read_r+0x1e>
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	200048f8 	.word	0x200048f8

080093ac <_write_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	4611      	mov	r1, r2
 80093b4:	2200      	movs	r2, #0
 80093b6:	4d05      	ldr	r5, [pc, #20]	@ (80093cc <_write_r+0x20>)
 80093b8:	602a      	str	r2, [r5, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f7f8 fec8 	bl	8002150 <_write>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_write_r+0x1e>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_write_r+0x1e>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	200048f8 	.word	0x200048f8

080093d0 <__errno>:
 80093d0:	4b01      	ldr	r3, [pc, #4]	@ (80093d8 <__errno+0x8>)
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	2000001c 	.word	0x2000001c

080093dc <__libc_init_array>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	2600      	movs	r6, #0
 80093e0:	4d0c      	ldr	r5, [pc, #48]	@ (8009414 <__libc_init_array+0x38>)
 80093e2:	4c0d      	ldr	r4, [pc, #52]	@ (8009418 <__libc_init_array+0x3c>)
 80093e4:	1b64      	subs	r4, r4, r5
 80093e6:	10a4      	asrs	r4, r4, #2
 80093e8:	42a6      	cmp	r6, r4
 80093ea:	d109      	bne.n	8009400 <__libc_init_array+0x24>
 80093ec:	f003 f886 	bl	800c4fc <_init>
 80093f0:	2600      	movs	r6, #0
 80093f2:	4d0a      	ldr	r5, [pc, #40]	@ (800941c <__libc_init_array+0x40>)
 80093f4:	4c0a      	ldr	r4, [pc, #40]	@ (8009420 <__libc_init_array+0x44>)
 80093f6:	1b64      	subs	r4, r4, r5
 80093f8:	10a4      	asrs	r4, r4, #2
 80093fa:	42a6      	cmp	r6, r4
 80093fc:	d105      	bne.n	800940a <__libc_init_array+0x2e>
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	f855 3b04 	ldr.w	r3, [r5], #4
 8009404:	4798      	blx	r3
 8009406:	3601      	adds	r6, #1
 8009408:	e7ee      	b.n	80093e8 <__libc_init_array+0xc>
 800940a:	f855 3b04 	ldr.w	r3, [r5], #4
 800940e:	4798      	blx	r3
 8009410:	3601      	adds	r6, #1
 8009412:	e7f2      	b.n	80093fa <__libc_init_array+0x1e>
 8009414:	0800d2d0 	.word	0x0800d2d0
 8009418:	0800d2d0 	.word	0x0800d2d0
 800941c:	0800d2d0 	.word	0x0800d2d0
 8009420:	0800d2d4 	.word	0x0800d2d4

08009424 <__retarget_lock_init_recursive>:
 8009424:	4770      	bx	lr

08009426 <__retarget_lock_acquire_recursive>:
 8009426:	4770      	bx	lr

08009428 <__retarget_lock_release_recursive>:
 8009428:	4770      	bx	lr

0800942a <memchr>:
 800942a:	4603      	mov	r3, r0
 800942c:	b510      	push	{r4, lr}
 800942e:	b2c9      	uxtb	r1, r1
 8009430:	4402      	add	r2, r0
 8009432:	4293      	cmp	r3, r2
 8009434:	4618      	mov	r0, r3
 8009436:	d101      	bne.n	800943c <memchr+0x12>
 8009438:	2000      	movs	r0, #0
 800943a:	e003      	b.n	8009444 <memchr+0x1a>
 800943c:	7804      	ldrb	r4, [r0, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	428c      	cmp	r4, r1
 8009442:	d1f6      	bne.n	8009432 <memchr+0x8>
 8009444:	bd10      	pop	{r4, pc}

08009446 <memcpy>:
 8009446:	440a      	add	r2, r1
 8009448:	4291      	cmp	r1, r2
 800944a:	f100 33ff 	add.w	r3, r0, #4294967295
 800944e:	d100      	bne.n	8009452 <memcpy+0xc>
 8009450:	4770      	bx	lr
 8009452:	b510      	push	{r4, lr}
 8009454:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009458:	4291      	cmp	r1, r2
 800945a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800945e:	d1f9      	bne.n	8009454 <memcpy+0xe>
 8009460:	bd10      	pop	{r4, pc}

08009462 <quorem>:
 8009462:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009466:	6903      	ldr	r3, [r0, #16]
 8009468:	690c      	ldr	r4, [r1, #16]
 800946a:	4607      	mov	r7, r0
 800946c:	42a3      	cmp	r3, r4
 800946e:	db7e      	blt.n	800956e <quorem+0x10c>
 8009470:	3c01      	subs	r4, #1
 8009472:	00a3      	lsls	r3, r4, #2
 8009474:	f100 0514 	add.w	r5, r0, #20
 8009478:	f101 0814 	add.w	r8, r1, #20
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800948c:	3301      	adds	r3, #1
 800948e:	429a      	cmp	r2, r3
 8009490:	fbb2 f6f3 	udiv	r6, r2, r3
 8009494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009498:	d32e      	bcc.n	80094f8 <quorem+0x96>
 800949a:	f04f 0a00 	mov.w	sl, #0
 800949e:	46c4      	mov	ip, r8
 80094a0:	46ae      	mov	lr, r5
 80094a2:	46d3      	mov	fp, sl
 80094a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094a8:	b298      	uxth	r0, r3
 80094aa:	fb06 a000 	mla	r0, r6, r0, sl
 80094ae:	0c1b      	lsrs	r3, r3, #16
 80094b0:	0c02      	lsrs	r2, r0, #16
 80094b2:	fb06 2303 	mla	r3, r6, r3, r2
 80094b6:	f8de 2000 	ldr.w	r2, [lr]
 80094ba:	b280      	uxth	r0, r0
 80094bc:	b292      	uxth	r2, r2
 80094be:	1a12      	subs	r2, r2, r0
 80094c0:	445a      	add	r2, fp
 80094c2:	f8de 0000 	ldr.w	r0, [lr]
 80094c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80094d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094d4:	b292      	uxth	r2, r2
 80094d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094da:	45e1      	cmp	r9, ip
 80094dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094e0:	f84e 2b04 	str.w	r2, [lr], #4
 80094e4:	d2de      	bcs.n	80094a4 <quorem+0x42>
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	58eb      	ldr	r3, [r5, r3]
 80094ea:	b92b      	cbnz	r3, 80094f8 <quorem+0x96>
 80094ec:	9b01      	ldr	r3, [sp, #4]
 80094ee:	3b04      	subs	r3, #4
 80094f0:	429d      	cmp	r5, r3
 80094f2:	461a      	mov	r2, r3
 80094f4:	d32f      	bcc.n	8009556 <quorem+0xf4>
 80094f6:	613c      	str	r4, [r7, #16]
 80094f8:	4638      	mov	r0, r7
 80094fa:	f001 f97b 	bl	800a7f4 <__mcmp>
 80094fe:	2800      	cmp	r0, #0
 8009500:	db25      	blt.n	800954e <quorem+0xec>
 8009502:	4629      	mov	r1, r5
 8009504:	2000      	movs	r0, #0
 8009506:	f858 2b04 	ldr.w	r2, [r8], #4
 800950a:	f8d1 c000 	ldr.w	ip, [r1]
 800950e:	fa1f fe82 	uxth.w	lr, r2
 8009512:	fa1f f38c 	uxth.w	r3, ip
 8009516:	eba3 030e 	sub.w	r3, r3, lr
 800951a:	4403      	add	r3, r0
 800951c:	0c12      	lsrs	r2, r2, #16
 800951e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009522:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009526:	b29b      	uxth	r3, r3
 8009528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800952c:	45c1      	cmp	r9, r8
 800952e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009532:	f841 3b04 	str.w	r3, [r1], #4
 8009536:	d2e6      	bcs.n	8009506 <quorem+0xa4>
 8009538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800953c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009540:	b922      	cbnz	r2, 800954c <quorem+0xea>
 8009542:	3b04      	subs	r3, #4
 8009544:	429d      	cmp	r5, r3
 8009546:	461a      	mov	r2, r3
 8009548:	d30b      	bcc.n	8009562 <quorem+0x100>
 800954a:	613c      	str	r4, [r7, #16]
 800954c:	3601      	adds	r6, #1
 800954e:	4630      	mov	r0, r6
 8009550:	b003      	add	sp, #12
 8009552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	3b04      	subs	r3, #4
 800955a:	2a00      	cmp	r2, #0
 800955c:	d1cb      	bne.n	80094f6 <quorem+0x94>
 800955e:	3c01      	subs	r4, #1
 8009560:	e7c6      	b.n	80094f0 <quorem+0x8e>
 8009562:	6812      	ldr	r2, [r2, #0]
 8009564:	3b04      	subs	r3, #4
 8009566:	2a00      	cmp	r2, #0
 8009568:	d1ef      	bne.n	800954a <quorem+0xe8>
 800956a:	3c01      	subs	r4, #1
 800956c:	e7ea      	b.n	8009544 <quorem+0xe2>
 800956e:	2000      	movs	r0, #0
 8009570:	e7ee      	b.n	8009550 <quorem+0xee>
 8009572:	0000      	movs	r0, r0
 8009574:	0000      	movs	r0, r0
	...

08009578 <_dtoa_r>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	4614      	mov	r4, r2
 800957e:	461d      	mov	r5, r3
 8009580:	69c7      	ldr	r7, [r0, #28]
 8009582:	b097      	sub	sp, #92	@ 0x5c
 8009584:	4683      	mov	fp, r0
 8009586:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800958a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800958c:	b97f      	cbnz	r7, 80095ae <_dtoa_r+0x36>
 800958e:	2010      	movs	r0, #16
 8009590:	f000 fe02 	bl	800a198 <malloc>
 8009594:	4602      	mov	r2, r0
 8009596:	f8cb 001c 	str.w	r0, [fp, #28]
 800959a:	b920      	cbnz	r0, 80095a6 <_dtoa_r+0x2e>
 800959c:	21ef      	movs	r1, #239	@ 0xef
 800959e:	4ba8      	ldr	r3, [pc, #672]	@ (8009840 <_dtoa_r+0x2c8>)
 80095a0:	48a8      	ldr	r0, [pc, #672]	@ (8009844 <_dtoa_r+0x2cc>)
 80095a2:	f001 fe2d 	bl	800b200 <__assert_func>
 80095a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80095aa:	6007      	str	r7, [r0, #0]
 80095ac:	60c7      	str	r7, [r0, #12]
 80095ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095b2:	6819      	ldr	r1, [r3, #0]
 80095b4:	b159      	cbz	r1, 80095ce <_dtoa_r+0x56>
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	2301      	movs	r3, #1
 80095ba:	4093      	lsls	r3, r2
 80095bc:	604a      	str	r2, [r1, #4]
 80095be:	608b      	str	r3, [r1, #8]
 80095c0:	4658      	mov	r0, fp
 80095c2:	f000 fedf 	bl	800a384 <_Bfree>
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	1e2b      	subs	r3, r5, #0
 80095d0:	bfaf      	iteee	ge
 80095d2:	2300      	movge	r3, #0
 80095d4:	2201      	movlt	r2, #1
 80095d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095da:	9303      	strlt	r3, [sp, #12]
 80095dc:	bfa8      	it	ge
 80095de:	6033      	strge	r3, [r6, #0]
 80095e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80095e4:	4b98      	ldr	r3, [pc, #608]	@ (8009848 <_dtoa_r+0x2d0>)
 80095e6:	bfb8      	it	lt
 80095e8:	6032      	strlt	r2, [r6, #0]
 80095ea:	ea33 0308 	bics.w	r3, r3, r8
 80095ee:	d112      	bne.n	8009616 <_dtoa_r+0x9e>
 80095f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80095fc:	4323      	orrs	r3, r4
 80095fe:	f000 8550 	beq.w	800a0a2 <_dtoa_r+0xb2a>
 8009602:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009604:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800984c <_dtoa_r+0x2d4>
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8552 	beq.w	800a0b2 <_dtoa_r+0xb3a>
 800960e:	f10a 0303 	add.w	r3, sl, #3
 8009612:	f000 bd4c 	b.w	800a0ae <_dtoa_r+0xb36>
 8009616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800961a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800961e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009622:	2200      	movs	r2, #0
 8009624:	2300      	movs	r3, #0
 8009626:	f7f7 f9bf 	bl	80009a8 <__aeabi_dcmpeq>
 800962a:	4607      	mov	r7, r0
 800962c:	b158      	cbz	r0, 8009646 <_dtoa_r+0xce>
 800962e:	2301      	movs	r3, #1
 8009630:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009636:	b113      	cbz	r3, 800963e <_dtoa_r+0xc6>
 8009638:	4b85      	ldr	r3, [pc, #532]	@ (8009850 <_dtoa_r+0x2d8>)
 800963a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009854 <_dtoa_r+0x2dc>
 8009642:	f000 bd36 	b.w	800a0b2 <_dtoa_r+0xb3a>
 8009646:	ab14      	add	r3, sp, #80	@ 0x50
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	ab15      	add	r3, sp, #84	@ 0x54
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	4658      	mov	r0, fp
 8009650:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009654:	f001 f97e 	bl	800a954 <__d2b>
 8009658:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800965c:	4681      	mov	r9, r0
 800965e:	2e00      	cmp	r6, #0
 8009660:	d077      	beq.n	8009752 <_dtoa_r+0x1da>
 8009662:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009668:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800966c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009670:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009674:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009678:	9712      	str	r7, [sp, #72]	@ 0x48
 800967a:	4619      	mov	r1, r3
 800967c:	2200      	movs	r2, #0
 800967e:	4b76      	ldr	r3, [pc, #472]	@ (8009858 <_dtoa_r+0x2e0>)
 8009680:	f7f6 fd72 	bl	8000168 <__aeabi_dsub>
 8009684:	a368      	add	r3, pc, #416	@ (adr r3, 8009828 <_dtoa_r+0x2b0>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 ff25 	bl	80004d8 <__aeabi_dmul>
 800968e:	a368      	add	r3, pc, #416	@ (adr r3, 8009830 <_dtoa_r+0x2b8>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f6 fd6a 	bl	800016c <__adddf3>
 8009698:	4604      	mov	r4, r0
 800969a:	4630      	mov	r0, r6
 800969c:	460d      	mov	r5, r1
 800969e:	f7f6 feb1 	bl	8000404 <__aeabi_i2d>
 80096a2:	a365      	add	r3, pc, #404	@ (adr r3, 8009838 <_dtoa_r+0x2c0>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f7f6 ff16 	bl	80004d8 <__aeabi_dmul>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 fd5a 	bl	800016c <__adddf3>
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	f7f7 f9bc 	bl	8000a38 <__aeabi_d2iz>
 80096c0:	2200      	movs	r2, #0
 80096c2:	4607      	mov	r7, r0
 80096c4:	2300      	movs	r3, #0
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 f977 	bl	80009bc <__aeabi_dcmplt>
 80096ce:	b140      	cbz	r0, 80096e2 <_dtoa_r+0x16a>
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7f6 fe97 	bl	8000404 <__aeabi_i2d>
 80096d6:	4622      	mov	r2, r4
 80096d8:	462b      	mov	r3, r5
 80096da:	f7f7 f965 	bl	80009a8 <__aeabi_dcmpeq>
 80096de:	b900      	cbnz	r0, 80096e2 <_dtoa_r+0x16a>
 80096e0:	3f01      	subs	r7, #1
 80096e2:	2f16      	cmp	r7, #22
 80096e4:	d853      	bhi.n	800978e <_dtoa_r+0x216>
 80096e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ea:	4b5c      	ldr	r3, [pc, #368]	@ (800985c <_dtoa_r+0x2e4>)
 80096ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f7 f962 	bl	80009bc <__aeabi_dcmplt>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d04a      	beq.n	8009792 <_dtoa_r+0x21a>
 80096fc:	2300      	movs	r3, #0
 80096fe:	3f01      	subs	r7, #1
 8009700:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009702:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009704:	1b9b      	subs	r3, r3, r6
 8009706:	1e5a      	subs	r2, r3, #1
 8009708:	bf46      	itte	mi
 800970a:	f1c3 0801 	rsbmi	r8, r3, #1
 800970e:	2300      	movmi	r3, #0
 8009710:	f04f 0800 	movpl.w	r8, #0
 8009714:	9209      	str	r2, [sp, #36]	@ 0x24
 8009716:	bf48      	it	mi
 8009718:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800971a:	2f00      	cmp	r7, #0
 800971c:	db3b      	blt.n	8009796 <_dtoa_r+0x21e>
 800971e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009720:	970e      	str	r7, [sp, #56]	@ 0x38
 8009722:	443b      	add	r3, r7
 8009724:	9309      	str	r3, [sp, #36]	@ 0x24
 8009726:	2300      	movs	r3, #0
 8009728:	930a      	str	r3, [sp, #40]	@ 0x28
 800972a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800972c:	2b09      	cmp	r3, #9
 800972e:	d866      	bhi.n	80097fe <_dtoa_r+0x286>
 8009730:	2b05      	cmp	r3, #5
 8009732:	bfc4      	itt	gt
 8009734:	3b04      	subgt	r3, #4
 8009736:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009738:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800973a:	bfc8      	it	gt
 800973c:	2400      	movgt	r4, #0
 800973e:	f1a3 0302 	sub.w	r3, r3, #2
 8009742:	bfd8      	it	le
 8009744:	2401      	movle	r4, #1
 8009746:	2b03      	cmp	r3, #3
 8009748:	d864      	bhi.n	8009814 <_dtoa_r+0x29c>
 800974a:	e8df f003 	tbb	[pc, r3]
 800974e:	382b      	.short	0x382b
 8009750:	5636      	.short	0x5636
 8009752:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009756:	441e      	add	r6, r3
 8009758:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800975c:	2b20      	cmp	r3, #32
 800975e:	bfc1      	itttt	gt
 8009760:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009764:	fa08 f803 	lslgt.w	r8, r8, r3
 8009768:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800976c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009770:	bfd6      	itet	le
 8009772:	f1c3 0320 	rsble	r3, r3, #32
 8009776:	ea48 0003 	orrgt.w	r0, r8, r3
 800977a:	fa04 f003 	lslle.w	r0, r4, r3
 800977e:	f7f6 fe31 	bl	80003e4 <__aeabi_ui2d>
 8009782:	2201      	movs	r2, #1
 8009784:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009788:	3e01      	subs	r6, #1
 800978a:	9212      	str	r2, [sp, #72]	@ 0x48
 800978c:	e775      	b.n	800967a <_dtoa_r+0x102>
 800978e:	2301      	movs	r3, #1
 8009790:	e7b6      	b.n	8009700 <_dtoa_r+0x188>
 8009792:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009794:	e7b5      	b.n	8009702 <_dtoa_r+0x18a>
 8009796:	427b      	negs	r3, r7
 8009798:	930a      	str	r3, [sp, #40]	@ 0x28
 800979a:	2300      	movs	r3, #0
 800979c:	eba8 0807 	sub.w	r8, r8, r7
 80097a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80097a2:	e7c2      	b.n	800972a <_dtoa_r+0x1b2>
 80097a4:	2300      	movs	r3, #0
 80097a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dc35      	bgt.n	800981a <_dtoa_r+0x2a2>
 80097ae:	2301      	movs	r3, #1
 80097b0:	461a      	mov	r2, r3
 80097b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80097b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80097b8:	e00b      	b.n	80097d2 <_dtoa_r+0x25a>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e7f3      	b.n	80097a6 <_dtoa_r+0x22e>
 80097be:	2300      	movs	r3, #0
 80097c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097c4:	18fb      	adds	r3, r7, r3
 80097c6:	9308      	str	r3, [sp, #32]
 80097c8:	3301      	adds	r3, #1
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	9307      	str	r3, [sp, #28]
 80097ce:	bfb8      	it	lt
 80097d0:	2301      	movlt	r3, #1
 80097d2:	2100      	movs	r1, #0
 80097d4:	2204      	movs	r2, #4
 80097d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80097da:	f102 0514 	add.w	r5, r2, #20
 80097de:	429d      	cmp	r5, r3
 80097e0:	d91f      	bls.n	8009822 <_dtoa_r+0x2aa>
 80097e2:	6041      	str	r1, [r0, #4]
 80097e4:	4658      	mov	r0, fp
 80097e6:	f000 fd8d 	bl	800a304 <_Balloc>
 80097ea:	4682      	mov	sl, r0
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d139      	bne.n	8009864 <_dtoa_r+0x2ec>
 80097f0:	4602      	mov	r2, r0
 80097f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80097f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009860 <_dtoa_r+0x2e8>)
 80097f8:	e6d2      	b.n	80095a0 <_dtoa_r+0x28>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e7e0      	b.n	80097c0 <_dtoa_r+0x248>
 80097fe:	2401      	movs	r4, #1
 8009800:	2300      	movs	r3, #0
 8009802:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009804:	9320      	str	r3, [sp, #128]	@ 0x80
 8009806:	f04f 33ff 	mov.w	r3, #4294967295
 800980a:	2200      	movs	r2, #0
 800980c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009810:	2312      	movs	r3, #18
 8009812:	e7d0      	b.n	80097b6 <_dtoa_r+0x23e>
 8009814:	2301      	movs	r3, #1
 8009816:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009818:	e7f5      	b.n	8009806 <_dtoa_r+0x28e>
 800981a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800981c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009820:	e7d7      	b.n	80097d2 <_dtoa_r+0x25a>
 8009822:	3101      	adds	r1, #1
 8009824:	0052      	lsls	r2, r2, #1
 8009826:	e7d8      	b.n	80097da <_dtoa_r+0x262>
 8009828:	636f4361 	.word	0x636f4361
 800982c:	3fd287a7 	.word	0x3fd287a7
 8009830:	8b60c8b3 	.word	0x8b60c8b3
 8009834:	3fc68a28 	.word	0x3fc68a28
 8009838:	509f79fb 	.word	0x509f79fb
 800983c:	3fd34413 	.word	0x3fd34413
 8009840:	0800cf67 	.word	0x0800cf67
 8009844:	0800cf7e 	.word	0x0800cf7e
 8009848:	7ff00000 	.word	0x7ff00000
 800984c:	0800cf63 	.word	0x0800cf63
 8009850:	0800cf37 	.word	0x0800cf37
 8009854:	0800cf36 	.word	0x0800cf36
 8009858:	3ff80000 	.word	0x3ff80000
 800985c:	0800d078 	.word	0x0800d078
 8009860:	0800cfd6 	.word	0x0800cfd6
 8009864:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009868:	6018      	str	r0, [r3, #0]
 800986a:	9b07      	ldr	r3, [sp, #28]
 800986c:	2b0e      	cmp	r3, #14
 800986e:	f200 80a4 	bhi.w	80099ba <_dtoa_r+0x442>
 8009872:	2c00      	cmp	r4, #0
 8009874:	f000 80a1 	beq.w	80099ba <_dtoa_r+0x442>
 8009878:	2f00      	cmp	r7, #0
 800987a:	dd33      	ble.n	80098e4 <_dtoa_r+0x36c>
 800987c:	4b86      	ldr	r3, [pc, #536]	@ (8009a98 <_dtoa_r+0x520>)
 800987e:	f007 020f 	and.w	r2, r7, #15
 8009882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009886:	05f8      	lsls	r0, r7, #23
 8009888:	e9d3 3400 	ldrd	r3, r4, [r3]
 800988c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009890:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009894:	d516      	bpl.n	80098c4 <_dtoa_r+0x34c>
 8009896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800989a:	4b80      	ldr	r3, [pc, #512]	@ (8009a9c <_dtoa_r+0x524>)
 800989c:	2603      	movs	r6, #3
 800989e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098a2:	f7f6 ff43 	bl	800072c <__aeabi_ddiv>
 80098a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098aa:	f004 040f 	and.w	r4, r4, #15
 80098ae:	4d7b      	ldr	r5, [pc, #492]	@ (8009a9c <_dtoa_r+0x524>)
 80098b0:	b954      	cbnz	r4, 80098c8 <_dtoa_r+0x350>
 80098b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ba:	f7f6 ff37 	bl	800072c <__aeabi_ddiv>
 80098be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098c2:	e028      	b.n	8009916 <_dtoa_r+0x39e>
 80098c4:	2602      	movs	r6, #2
 80098c6:	e7f2      	b.n	80098ae <_dtoa_r+0x336>
 80098c8:	07e1      	lsls	r1, r4, #31
 80098ca:	d508      	bpl.n	80098de <_dtoa_r+0x366>
 80098cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098d4:	f7f6 fe00 	bl	80004d8 <__aeabi_dmul>
 80098d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098dc:	3601      	adds	r6, #1
 80098de:	1064      	asrs	r4, r4, #1
 80098e0:	3508      	adds	r5, #8
 80098e2:	e7e5      	b.n	80098b0 <_dtoa_r+0x338>
 80098e4:	f000 80d2 	beq.w	8009a8c <_dtoa_r+0x514>
 80098e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098ec:	427c      	negs	r4, r7
 80098ee:	4b6a      	ldr	r3, [pc, #424]	@ (8009a98 <_dtoa_r+0x520>)
 80098f0:	f004 020f 	and.w	r2, r4, #15
 80098f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fdec 	bl	80004d8 <__aeabi_dmul>
 8009900:	2602      	movs	r6, #2
 8009902:	2300      	movs	r3, #0
 8009904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009908:	4d64      	ldr	r5, [pc, #400]	@ (8009a9c <_dtoa_r+0x524>)
 800990a:	1124      	asrs	r4, r4, #4
 800990c:	2c00      	cmp	r4, #0
 800990e:	f040 80b2 	bne.w	8009a76 <_dtoa_r+0x4fe>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1d3      	bne.n	80098be <_dtoa_r+0x346>
 8009916:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800991a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 80b7 	beq.w	8009a90 <_dtoa_r+0x518>
 8009922:	2200      	movs	r2, #0
 8009924:	4620      	mov	r0, r4
 8009926:	4629      	mov	r1, r5
 8009928:	4b5d      	ldr	r3, [pc, #372]	@ (8009aa0 <_dtoa_r+0x528>)
 800992a:	f7f7 f847 	bl	80009bc <__aeabi_dcmplt>
 800992e:	2800      	cmp	r0, #0
 8009930:	f000 80ae 	beq.w	8009a90 <_dtoa_r+0x518>
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 80aa 	beq.w	8009a90 <_dtoa_r+0x518>
 800993c:	9b08      	ldr	r3, [sp, #32]
 800993e:	2b00      	cmp	r3, #0
 8009940:	dd37      	ble.n	80099b2 <_dtoa_r+0x43a>
 8009942:	1e7b      	subs	r3, r7, #1
 8009944:	4620      	mov	r0, r4
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	2200      	movs	r2, #0
 800994a:	4629      	mov	r1, r5
 800994c:	4b55      	ldr	r3, [pc, #340]	@ (8009aa4 <_dtoa_r+0x52c>)
 800994e:	f7f6 fdc3 	bl	80004d8 <__aeabi_dmul>
 8009952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009956:	9c08      	ldr	r4, [sp, #32]
 8009958:	3601      	adds	r6, #1
 800995a:	4630      	mov	r0, r6
 800995c:	f7f6 fd52 	bl	8000404 <__aeabi_i2d>
 8009960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009964:	f7f6 fdb8 	bl	80004d8 <__aeabi_dmul>
 8009968:	2200      	movs	r2, #0
 800996a:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa8 <_dtoa_r+0x530>)
 800996c:	f7f6 fbfe 	bl	800016c <__adddf3>
 8009970:	4605      	mov	r5, r0
 8009972:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009976:	2c00      	cmp	r4, #0
 8009978:	f040 809a 	bne.w	8009ab0 <_dtoa_r+0x538>
 800997c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009980:	2200      	movs	r2, #0
 8009982:	4b4a      	ldr	r3, [pc, #296]	@ (8009aac <_dtoa_r+0x534>)
 8009984:	f7f6 fbf0 	bl	8000168 <__aeabi_dsub>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009990:	462a      	mov	r2, r5
 8009992:	4633      	mov	r3, r6
 8009994:	f7f7 f830 	bl	80009f8 <__aeabi_dcmpgt>
 8009998:	2800      	cmp	r0, #0
 800999a:	f040 828e 	bne.w	8009eba <_dtoa_r+0x942>
 800999e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a2:	462a      	mov	r2, r5
 80099a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80099a8:	f7f7 f808 	bl	80009bc <__aeabi_dcmplt>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f040 8127 	bne.w	8009c00 <_dtoa_r+0x688>
 80099b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80099b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80099ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f2c0 8163 	blt.w	8009c88 <_dtoa_r+0x710>
 80099c2:	2f0e      	cmp	r7, #14
 80099c4:	f300 8160 	bgt.w	8009c88 <_dtoa_r+0x710>
 80099c8:	4b33      	ldr	r3, [pc, #204]	@ (8009a98 <_dtoa_r+0x520>)
 80099ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099d8:	2b00      	cmp	r3, #0
 80099da:	da03      	bge.n	80099e4 <_dtoa_r+0x46c>
 80099dc:	9b07      	ldr	r3, [sp, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f340 8100 	ble.w	8009be4 <_dtoa_r+0x66c>
 80099e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099e8:	4656      	mov	r6, sl
 80099ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fe9b 	bl	800072c <__aeabi_ddiv>
 80099f6:	f7f7 f81f 	bl	8000a38 <__aeabi_d2iz>
 80099fa:	4680      	mov	r8, r0
 80099fc:	f7f6 fd02 	bl	8000404 <__aeabi_i2d>
 8009a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a04:	f7f6 fd68 	bl	80004d8 <__aeabi_dmul>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	f7f6 fbaa 	bl	8000168 <__aeabi_dsub>
 8009a14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a18:	9d07      	ldr	r5, [sp, #28]
 8009a1a:	f806 4b01 	strb.w	r4, [r6], #1
 8009a1e:	eba6 040a 	sub.w	r4, r6, sl
 8009a22:	42a5      	cmp	r5, r4
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	f040 8116 	bne.w	8009c58 <_dtoa_r+0x6e0>
 8009a2c:	f7f6 fb9e 	bl	800016c <__adddf3>
 8009a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	f7f6 ffde 	bl	80009f8 <__aeabi_dcmpgt>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	f040 80f8 	bne.w	8009c32 <_dtoa_r+0x6ba>
 8009a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f6 ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8009a4e:	b118      	cbz	r0, 8009a58 <_dtoa_r+0x4e0>
 8009a50:	f018 0f01 	tst.w	r8, #1
 8009a54:	f040 80ed 	bne.w	8009c32 <_dtoa_r+0x6ba>
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4658      	mov	r0, fp
 8009a5c:	f000 fc92 	bl	800a384 <_Bfree>
 8009a60:	2300      	movs	r3, #0
 8009a62:	7033      	strb	r3, [r6, #0]
 8009a64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009a66:	3701      	adds	r7, #1
 8009a68:	601f      	str	r7, [r3, #0]
 8009a6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8320 	beq.w	800a0b2 <_dtoa_r+0xb3a>
 8009a72:	601e      	str	r6, [r3, #0]
 8009a74:	e31d      	b.n	800a0b2 <_dtoa_r+0xb3a>
 8009a76:	07e2      	lsls	r2, r4, #31
 8009a78:	d505      	bpl.n	8009a86 <_dtoa_r+0x50e>
 8009a7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a7e:	f7f6 fd2b 	bl	80004d8 <__aeabi_dmul>
 8009a82:	2301      	movs	r3, #1
 8009a84:	3601      	adds	r6, #1
 8009a86:	1064      	asrs	r4, r4, #1
 8009a88:	3508      	adds	r5, #8
 8009a8a:	e73f      	b.n	800990c <_dtoa_r+0x394>
 8009a8c:	2602      	movs	r6, #2
 8009a8e:	e742      	b.n	8009916 <_dtoa_r+0x39e>
 8009a90:	9c07      	ldr	r4, [sp, #28]
 8009a92:	9704      	str	r7, [sp, #16]
 8009a94:	e761      	b.n	800995a <_dtoa_r+0x3e2>
 8009a96:	bf00      	nop
 8009a98:	0800d078 	.word	0x0800d078
 8009a9c:	0800d050 	.word	0x0800d050
 8009aa0:	3ff00000 	.word	0x3ff00000
 8009aa4:	40240000 	.word	0x40240000
 8009aa8:	401c0000 	.word	0x401c0000
 8009aac:	40140000 	.word	0x40140000
 8009ab0:	4b70      	ldr	r3, [pc, #448]	@ (8009c74 <_dtoa_r+0x6fc>)
 8009ab2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ab4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ab8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009abc:	4454      	add	r4, sl
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	d045      	beq.n	8009b4e <_dtoa_r+0x5d6>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	496c      	ldr	r1, [pc, #432]	@ (8009c78 <_dtoa_r+0x700>)
 8009ac6:	f7f6 fe31 	bl	800072c <__aeabi_ddiv>
 8009aca:	4633      	mov	r3, r6
 8009acc:	462a      	mov	r2, r5
 8009ace:	f7f6 fb4b 	bl	8000168 <__aeabi_dsub>
 8009ad2:	4656      	mov	r6, sl
 8009ad4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009adc:	f7f6 ffac 	bl	8000a38 <__aeabi_d2iz>
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	f7f6 fc8f 	bl	8000404 <__aeabi_i2d>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aee:	f7f6 fb3b 	bl	8000168 <__aeabi_dsub>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	3530      	adds	r5, #48	@ 0x30
 8009af8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009afc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b00:	f806 5b01 	strb.w	r5, [r6], #1
 8009b04:	f7f6 ff5a 	bl	80009bc <__aeabi_dcmplt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d163      	bne.n	8009bd4 <_dtoa_r+0x65c>
 8009b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b10:	2000      	movs	r0, #0
 8009b12:	495a      	ldr	r1, [pc, #360]	@ (8009c7c <_dtoa_r+0x704>)
 8009b14:	f7f6 fb28 	bl	8000168 <__aeabi_dsub>
 8009b18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b1c:	f7f6 ff4e 	bl	80009bc <__aeabi_dcmplt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	f040 8087 	bne.w	8009c34 <_dtoa_r+0x6bc>
 8009b26:	42a6      	cmp	r6, r4
 8009b28:	f43f af43 	beq.w	80099b2 <_dtoa_r+0x43a>
 8009b2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b30:	2200      	movs	r2, #0
 8009b32:	4b53      	ldr	r3, [pc, #332]	@ (8009c80 <_dtoa_r+0x708>)
 8009b34:	f7f6 fcd0 	bl	80004d8 <__aeabi_dmul>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b42:	4b4f      	ldr	r3, [pc, #316]	@ (8009c80 <_dtoa_r+0x708>)
 8009b44:	f7f6 fcc8 	bl	80004d8 <__aeabi_dmul>
 8009b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b4c:	e7c4      	b.n	8009ad8 <_dtoa_r+0x560>
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4628      	mov	r0, r5
 8009b52:	f7f6 fcc1 	bl	80004d8 <__aeabi_dmul>
 8009b56:	4656      	mov	r6, sl
 8009b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b62:	f7f6 ff69 	bl	8000a38 <__aeabi_d2iz>
 8009b66:	4605      	mov	r5, r0
 8009b68:	f7f6 fc4c 	bl	8000404 <__aeabi_i2d>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b74:	f7f6 faf8 	bl	8000168 <__aeabi_dsub>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	3530      	adds	r5, #48	@ 0x30
 8009b7e:	f806 5b01 	strb.w	r5, [r6], #1
 8009b82:	42a6      	cmp	r6, r4
 8009b84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	d124      	bne.n	8009bd8 <_dtoa_r+0x660>
 8009b8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b92:	4b39      	ldr	r3, [pc, #228]	@ (8009c78 <_dtoa_r+0x700>)
 8009b94:	f7f6 faea 	bl	800016c <__adddf3>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba0:	f7f6 ff2a 	bl	80009f8 <__aeabi_dcmpgt>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d145      	bne.n	8009c34 <_dtoa_r+0x6bc>
 8009ba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bac:	2000      	movs	r0, #0
 8009bae:	4932      	ldr	r1, [pc, #200]	@ (8009c78 <_dtoa_r+0x700>)
 8009bb0:	f7f6 fada 	bl	8000168 <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bbc:	f7f6 fefe 	bl	80009bc <__aeabi_dcmplt>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f aef6 	beq.w	80099b2 <_dtoa_r+0x43a>
 8009bc6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009bc8:	1e73      	subs	r3, r6, #1
 8009bca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bd0:	2b30      	cmp	r3, #48	@ 0x30
 8009bd2:	d0f8      	beq.n	8009bc6 <_dtoa_r+0x64e>
 8009bd4:	9f04      	ldr	r7, [sp, #16]
 8009bd6:	e73f      	b.n	8009a58 <_dtoa_r+0x4e0>
 8009bd8:	4b29      	ldr	r3, [pc, #164]	@ (8009c80 <_dtoa_r+0x708>)
 8009bda:	f7f6 fc7d 	bl	80004d8 <__aeabi_dmul>
 8009bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be2:	e7bc      	b.n	8009b5e <_dtoa_r+0x5e6>
 8009be4:	d10c      	bne.n	8009c00 <_dtoa_r+0x688>
 8009be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bea:	2200      	movs	r2, #0
 8009bec:	4b25      	ldr	r3, [pc, #148]	@ (8009c84 <_dtoa_r+0x70c>)
 8009bee:	f7f6 fc73 	bl	80004d8 <__aeabi_dmul>
 8009bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bf6:	f7f6 fef5 	bl	80009e4 <__aeabi_dcmpge>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f000 815b 	beq.w	8009eb6 <_dtoa_r+0x93e>
 8009c00:	2400      	movs	r4, #0
 8009c02:	4625      	mov	r5, r4
 8009c04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c06:	4656      	mov	r6, sl
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	9304      	str	r3, [sp, #16]
 8009c0c:	2700      	movs	r7, #0
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4658      	mov	r0, fp
 8009c12:	f000 fbb7 	bl	800a384 <_Bfree>
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	d0dc      	beq.n	8009bd4 <_dtoa_r+0x65c>
 8009c1a:	b12f      	cbz	r7, 8009c28 <_dtoa_r+0x6b0>
 8009c1c:	42af      	cmp	r7, r5
 8009c1e:	d003      	beq.n	8009c28 <_dtoa_r+0x6b0>
 8009c20:	4639      	mov	r1, r7
 8009c22:	4658      	mov	r0, fp
 8009c24:	f000 fbae 	bl	800a384 <_Bfree>
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4658      	mov	r0, fp
 8009c2c:	f000 fbaa 	bl	800a384 <_Bfree>
 8009c30:	e7d0      	b.n	8009bd4 <_dtoa_r+0x65c>
 8009c32:	9704      	str	r7, [sp, #16]
 8009c34:	4633      	mov	r3, r6
 8009c36:	461e      	mov	r6, r3
 8009c38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c3c:	2a39      	cmp	r2, #57	@ 0x39
 8009c3e:	d107      	bne.n	8009c50 <_dtoa_r+0x6d8>
 8009c40:	459a      	cmp	sl, r3
 8009c42:	d1f8      	bne.n	8009c36 <_dtoa_r+0x6be>
 8009c44:	9a04      	ldr	r2, [sp, #16]
 8009c46:	3201      	adds	r2, #1
 8009c48:	9204      	str	r2, [sp, #16]
 8009c4a:	2230      	movs	r2, #48	@ 0x30
 8009c4c:	f88a 2000 	strb.w	r2, [sl]
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	3201      	adds	r2, #1
 8009c54:	701a      	strb	r2, [r3, #0]
 8009c56:	e7bd      	b.n	8009bd4 <_dtoa_r+0x65c>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4b09      	ldr	r3, [pc, #36]	@ (8009c80 <_dtoa_r+0x708>)
 8009c5c:	f7f6 fc3c 	bl	80004d8 <__aeabi_dmul>
 8009c60:	2200      	movs	r2, #0
 8009c62:	2300      	movs	r3, #0
 8009c64:	4604      	mov	r4, r0
 8009c66:	460d      	mov	r5, r1
 8009c68:	f7f6 fe9e 	bl	80009a8 <__aeabi_dcmpeq>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	f43f aebc 	beq.w	80099ea <_dtoa_r+0x472>
 8009c72:	e6f1      	b.n	8009a58 <_dtoa_r+0x4e0>
 8009c74:	0800d078 	.word	0x0800d078
 8009c78:	3fe00000 	.word	0x3fe00000
 8009c7c:	3ff00000 	.word	0x3ff00000
 8009c80:	40240000 	.word	0x40240000
 8009c84:	40140000 	.word	0x40140000
 8009c88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	f000 80db 	beq.w	8009e46 <_dtoa_r+0x8ce>
 8009c90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009c92:	2a01      	cmp	r2, #1
 8009c94:	f300 80bf 	bgt.w	8009e16 <_dtoa_r+0x89e>
 8009c98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c9a:	2a00      	cmp	r2, #0
 8009c9c:	f000 80b7 	beq.w	8009e0e <_dtoa_r+0x896>
 8009ca0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009ca4:	4646      	mov	r6, r8
 8009ca6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ca8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009caa:	2101      	movs	r1, #1
 8009cac:	441a      	add	r2, r3
 8009cae:	4658      	mov	r0, fp
 8009cb0:	4498      	add	r8, r3
 8009cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cb4:	f000 fc1a 	bl	800a4ec <__i2b>
 8009cb8:	4605      	mov	r5, r0
 8009cba:	b15e      	cbz	r6, 8009cd4 <_dtoa_r+0x75c>
 8009cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dd08      	ble.n	8009cd4 <_dtoa_r+0x75c>
 8009cc2:	42b3      	cmp	r3, r6
 8009cc4:	bfa8      	it	ge
 8009cc6:	4633      	movge	r3, r6
 8009cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cca:	eba8 0803 	sub.w	r8, r8, r3
 8009cce:	1af6      	subs	r6, r6, r3
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cd6:	b1f3      	cbz	r3, 8009d16 <_dtoa_r+0x79e>
 8009cd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80b7 	beq.w	8009e4e <_dtoa_r+0x8d6>
 8009ce0:	b18c      	cbz	r4, 8009d06 <_dtoa_r+0x78e>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4658      	mov	r0, fp
 8009ce8:	f000 fcbe 	bl	800a668 <__pow5mult>
 8009cec:	464a      	mov	r2, r9
 8009cee:	4601      	mov	r1, r0
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	4658      	mov	r0, fp
 8009cf4:	f000 fc10 	bl	800a518 <__multiply>
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	9004      	str	r0, [sp, #16]
 8009cfc:	4658      	mov	r0, fp
 8009cfe:	f000 fb41 	bl	800a384 <_Bfree>
 8009d02:	9b04      	ldr	r3, [sp, #16]
 8009d04:	4699      	mov	r9, r3
 8009d06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d08:	1b1a      	subs	r2, r3, r4
 8009d0a:	d004      	beq.n	8009d16 <_dtoa_r+0x79e>
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	4658      	mov	r0, fp
 8009d10:	f000 fcaa 	bl	800a668 <__pow5mult>
 8009d14:	4681      	mov	r9, r0
 8009d16:	2101      	movs	r1, #1
 8009d18:	4658      	mov	r0, fp
 8009d1a:	f000 fbe7 	bl	800a4ec <__i2b>
 8009d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d20:	4604      	mov	r4, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 81c9 	beq.w	800a0ba <_dtoa_r+0xb42>
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4658      	mov	r0, fp
 8009d2e:	f000 fc9b 	bl	800a668 <__pow5mult>
 8009d32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d34:	4604      	mov	r4, r0
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	f300 808f 	bgt.w	8009e5a <_dtoa_r+0x8e2>
 8009d3c:	9b02      	ldr	r3, [sp, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f040 8087 	bne.w	8009e52 <_dtoa_r+0x8da>
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 8083 	bne.w	8009e56 <_dtoa_r+0x8de>
 8009d50:	9b03      	ldr	r3, [sp, #12]
 8009d52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d56:	0d1b      	lsrs	r3, r3, #20
 8009d58:	051b      	lsls	r3, r3, #20
 8009d5a:	b12b      	cbz	r3, 8009d68 <_dtoa_r+0x7f0>
 8009d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d5e:	f108 0801 	add.w	r8, r8, #1
 8009d62:	3301      	adds	r3, #1
 8009d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d66:	2301      	movs	r3, #1
 8009d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 81aa 	beq.w	800a0c6 <_dtoa_r+0xb4e>
 8009d72:	6923      	ldr	r3, [r4, #16]
 8009d74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d78:	6918      	ldr	r0, [r3, #16]
 8009d7a:	f000 fb6b 	bl	800a454 <__hi0bits>
 8009d7e:	f1c0 0020 	rsb	r0, r0, #32
 8009d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d84:	4418      	add	r0, r3
 8009d86:	f010 001f 	ands.w	r0, r0, #31
 8009d8a:	d071      	beq.n	8009e70 <_dtoa_r+0x8f8>
 8009d8c:	f1c0 0320 	rsb	r3, r0, #32
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	dd65      	ble.n	8009e60 <_dtoa_r+0x8e8>
 8009d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d96:	f1c0 001c 	rsb	r0, r0, #28
 8009d9a:	4403      	add	r3, r0
 8009d9c:	4480      	add	r8, r0
 8009d9e:	4406      	add	r6, r0
 8009da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da2:	f1b8 0f00 	cmp.w	r8, #0
 8009da6:	dd05      	ble.n	8009db4 <_dtoa_r+0x83c>
 8009da8:	4649      	mov	r1, r9
 8009daa:	4642      	mov	r2, r8
 8009dac:	4658      	mov	r0, fp
 8009dae:	f000 fcb5 	bl	800a71c <__lshift>
 8009db2:	4681      	mov	r9, r0
 8009db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dd05      	ble.n	8009dc6 <_dtoa_r+0x84e>
 8009dba:	4621      	mov	r1, r4
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f000 fcac 	bl	800a71c <__lshift>
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d053      	beq.n	8009e74 <_dtoa_r+0x8fc>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4648      	mov	r0, r9
 8009dd0:	f000 fd10 	bl	800a7f4 <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	da4d      	bge.n	8009e74 <_dtoa_r+0x8fc>
 8009dd8:	1e7b      	subs	r3, r7, #1
 8009dda:	4649      	mov	r1, r9
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	220a      	movs	r2, #10
 8009de0:	2300      	movs	r3, #0
 8009de2:	4658      	mov	r0, fp
 8009de4:	f000 faf0 	bl	800a3c8 <__multadd>
 8009de8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dea:	4681      	mov	r9, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 816c 	beq.w	800a0ca <_dtoa_r+0xb52>
 8009df2:	2300      	movs	r3, #0
 8009df4:	4629      	mov	r1, r5
 8009df6:	220a      	movs	r2, #10
 8009df8:	4658      	mov	r0, fp
 8009dfa:	f000 fae5 	bl	800a3c8 <__multadd>
 8009dfe:	9b08      	ldr	r3, [sp, #32]
 8009e00:	4605      	mov	r5, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dc61      	bgt.n	8009eca <_dtoa_r+0x952>
 8009e06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	dc3b      	bgt.n	8009e84 <_dtoa_r+0x90c>
 8009e0c:	e05d      	b.n	8009eca <_dtoa_r+0x952>
 8009e0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e10:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e14:	e746      	b.n	8009ca4 <_dtoa_r+0x72c>
 8009e16:	9b07      	ldr	r3, [sp, #28]
 8009e18:	1e5c      	subs	r4, r3, #1
 8009e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	bfbf      	itttt	lt
 8009e20:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009e22:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009e24:	1ae3      	sublt	r3, r4, r3
 8009e26:	18d2      	addlt	r2, r2, r3
 8009e28:	bfa8      	it	ge
 8009e2a:	1b1c      	subge	r4, r3, r4
 8009e2c:	9b07      	ldr	r3, [sp, #28]
 8009e2e:	bfbe      	ittt	lt
 8009e30:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009e32:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009e34:	2400      	movlt	r4, #0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	bfb5      	itete	lt
 8009e3a:	eba8 0603 	sublt.w	r6, r8, r3
 8009e3e:	4646      	movge	r6, r8
 8009e40:	2300      	movlt	r3, #0
 8009e42:	9b07      	ldrge	r3, [sp, #28]
 8009e44:	e730      	b.n	8009ca8 <_dtoa_r+0x730>
 8009e46:	4646      	mov	r6, r8
 8009e48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e4a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e4c:	e735      	b.n	8009cba <_dtoa_r+0x742>
 8009e4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e50:	e75c      	b.n	8009d0c <_dtoa_r+0x794>
 8009e52:	2300      	movs	r3, #0
 8009e54:	e788      	b.n	8009d68 <_dtoa_r+0x7f0>
 8009e56:	9b02      	ldr	r3, [sp, #8]
 8009e58:	e786      	b.n	8009d68 <_dtoa_r+0x7f0>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e5e:	e788      	b.n	8009d72 <_dtoa_r+0x7fa>
 8009e60:	d09f      	beq.n	8009da2 <_dtoa_r+0x82a>
 8009e62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e64:	331c      	adds	r3, #28
 8009e66:	441a      	add	r2, r3
 8009e68:	4498      	add	r8, r3
 8009e6a:	441e      	add	r6, r3
 8009e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e6e:	e798      	b.n	8009da2 <_dtoa_r+0x82a>
 8009e70:	4603      	mov	r3, r0
 8009e72:	e7f6      	b.n	8009e62 <_dtoa_r+0x8ea>
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	9704      	str	r7, [sp, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc20      	bgt.n	8009ebe <_dtoa_r+0x946>
 8009e7c:	9308      	str	r3, [sp, #32]
 8009e7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	dd1e      	ble.n	8009ec2 <_dtoa_r+0x94a>
 8009e84:	9b08      	ldr	r3, [sp, #32]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f47f aebc 	bne.w	8009c04 <_dtoa_r+0x68c>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	2205      	movs	r2, #5
 8009e90:	4658      	mov	r0, fp
 8009e92:	f000 fa99 	bl	800a3c8 <__multadd>
 8009e96:	4601      	mov	r1, r0
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4648      	mov	r0, r9
 8009e9c:	f000 fcaa 	bl	800a7f4 <__mcmp>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f77f aeaf 	ble.w	8009c04 <_dtoa_r+0x68c>
 8009ea6:	2331      	movs	r3, #49	@ 0x31
 8009ea8:	4656      	mov	r6, sl
 8009eaa:	f806 3b01 	strb.w	r3, [r6], #1
 8009eae:	9b04      	ldr	r3, [sp, #16]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	e6aa      	b.n	8009c0c <_dtoa_r+0x694>
 8009eb6:	9c07      	ldr	r4, [sp, #28]
 8009eb8:	9704      	str	r7, [sp, #16]
 8009eba:	4625      	mov	r5, r4
 8009ebc:	e7f3      	b.n	8009ea6 <_dtoa_r+0x92e>
 8009ebe:	9b07      	ldr	r3, [sp, #28]
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 8104 	beq.w	800a0d2 <_dtoa_r+0xb5a>
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	dd05      	ble.n	8009eda <_dtoa_r+0x962>
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	4658      	mov	r0, fp
 8009ed4:	f000 fc22 	bl	800a71c <__lshift>
 8009ed8:	4605      	mov	r5, r0
 8009eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d05a      	beq.n	8009f96 <_dtoa_r+0xa1e>
 8009ee0:	4658      	mov	r0, fp
 8009ee2:	6869      	ldr	r1, [r5, #4]
 8009ee4:	f000 fa0e 	bl	800a304 <_Balloc>
 8009ee8:	4606      	mov	r6, r0
 8009eea:	b928      	cbnz	r0, 8009ef8 <_dtoa_r+0x980>
 8009eec:	4602      	mov	r2, r0
 8009eee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ef2:	4b83      	ldr	r3, [pc, #524]	@ (800a100 <_dtoa_r+0xb88>)
 8009ef4:	f7ff bb54 	b.w	80095a0 <_dtoa_r+0x28>
 8009ef8:	692a      	ldr	r2, [r5, #16]
 8009efa:	f105 010c 	add.w	r1, r5, #12
 8009efe:	3202      	adds	r2, #2
 8009f00:	0092      	lsls	r2, r2, #2
 8009f02:	300c      	adds	r0, #12
 8009f04:	f7ff fa9f 	bl	8009446 <memcpy>
 8009f08:	2201      	movs	r2, #1
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4658      	mov	r0, fp
 8009f0e:	f000 fc05 	bl	800a71c <__lshift>
 8009f12:	462f      	mov	r7, r5
 8009f14:	4605      	mov	r5, r0
 8009f16:	f10a 0301 	add.w	r3, sl, #1
 8009f1a:	9307      	str	r3, [sp, #28]
 8009f1c:	9b08      	ldr	r3, [sp, #32]
 8009f1e:	4453      	add	r3, sl
 8009f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f22:	9b02      	ldr	r3, [sp, #8]
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f2a:	9b07      	ldr	r3, [sp, #28]
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	4648      	mov	r0, r9
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	f7ff fa95 	bl	8009462 <quorem>
 8009f38:	4639      	mov	r1, r7
 8009f3a:	9008      	str	r0, [sp, #32]
 8009f3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f40:	4648      	mov	r0, r9
 8009f42:	f000 fc57 	bl	800a7f4 <__mcmp>
 8009f46:	462a      	mov	r2, r5
 8009f48:	9009      	str	r0, [sp, #36]	@ 0x24
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	f000 fc6d 	bl	800a82c <__mdiff>
 8009f52:	68c2      	ldr	r2, [r0, #12]
 8009f54:	4606      	mov	r6, r0
 8009f56:	bb02      	cbnz	r2, 8009f9a <_dtoa_r+0xa22>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	4648      	mov	r0, r9
 8009f5c:	f000 fc4a 	bl	800a7f4 <__mcmp>
 8009f60:	4602      	mov	r2, r0
 8009f62:	4631      	mov	r1, r6
 8009f64:	4658      	mov	r0, fp
 8009f66:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f68:	f000 fa0c 	bl	800a384 <_Bfree>
 8009f6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f70:	9e07      	ldr	r6, [sp, #28]
 8009f72:	ea43 0102 	orr.w	r1, r3, r2
 8009f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f78:	4319      	orrs	r1, r3
 8009f7a:	d110      	bne.n	8009f9e <_dtoa_r+0xa26>
 8009f7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f80:	d029      	beq.n	8009fd6 <_dtoa_r+0xa5e>
 8009f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dd02      	ble.n	8009f8e <_dtoa_r+0xa16>
 8009f88:	9b08      	ldr	r3, [sp, #32]
 8009f8a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f8e:	9b02      	ldr	r3, [sp, #8]
 8009f90:	f883 8000 	strb.w	r8, [r3]
 8009f94:	e63b      	b.n	8009c0e <_dtoa_r+0x696>
 8009f96:	4628      	mov	r0, r5
 8009f98:	e7bb      	b.n	8009f12 <_dtoa_r+0x99a>
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	e7e1      	b.n	8009f62 <_dtoa_r+0x9ea>
 8009f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	db04      	blt.n	8009fae <_dtoa_r+0xa36>
 8009fa4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009faa:	430b      	orrs	r3, r1
 8009fac:	d120      	bne.n	8009ff0 <_dtoa_r+0xa78>
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	dded      	ble.n	8009f8e <_dtoa_r+0xa16>
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4658      	mov	r0, fp
 8009fb8:	f000 fbb0 	bl	800a71c <__lshift>
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	4681      	mov	r9, r0
 8009fc0:	f000 fc18 	bl	800a7f4 <__mcmp>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	dc03      	bgt.n	8009fd0 <_dtoa_r+0xa58>
 8009fc8:	d1e1      	bne.n	8009f8e <_dtoa_r+0xa16>
 8009fca:	f018 0f01 	tst.w	r8, #1
 8009fce:	d0de      	beq.n	8009f8e <_dtoa_r+0xa16>
 8009fd0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fd4:	d1d8      	bne.n	8009f88 <_dtoa_r+0xa10>
 8009fd6:	2339      	movs	r3, #57	@ 0x39
 8009fd8:	9a02      	ldr	r2, [sp, #8]
 8009fda:	7013      	strb	r3, [r2, #0]
 8009fdc:	4633      	mov	r3, r6
 8009fde:	461e      	mov	r6, r3
 8009fe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	2a39      	cmp	r2, #57	@ 0x39
 8009fe8:	d052      	beq.n	800a090 <_dtoa_r+0xb18>
 8009fea:	3201      	adds	r2, #1
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	e60e      	b.n	8009c0e <_dtoa_r+0x696>
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	dd07      	ble.n	800a004 <_dtoa_r+0xa8c>
 8009ff4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ff8:	d0ed      	beq.n	8009fd6 <_dtoa_r+0xa5e>
 8009ffa:	9a02      	ldr	r2, [sp, #8]
 8009ffc:	f108 0301 	add.w	r3, r8, #1
 800a000:	7013      	strb	r3, [r2, #0]
 800a002:	e604      	b.n	8009c0e <_dtoa_r+0x696>
 800a004:	9b07      	ldr	r3, [sp, #28]
 800a006:	9a07      	ldr	r2, [sp, #28]
 800a008:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a00e:	4293      	cmp	r3, r2
 800a010:	d028      	beq.n	800a064 <_dtoa_r+0xaec>
 800a012:	4649      	mov	r1, r9
 800a014:	2300      	movs	r3, #0
 800a016:	220a      	movs	r2, #10
 800a018:	4658      	mov	r0, fp
 800a01a:	f000 f9d5 	bl	800a3c8 <__multadd>
 800a01e:	42af      	cmp	r7, r5
 800a020:	4681      	mov	r9, r0
 800a022:	f04f 0300 	mov.w	r3, #0
 800a026:	f04f 020a 	mov.w	r2, #10
 800a02a:	4639      	mov	r1, r7
 800a02c:	4658      	mov	r0, fp
 800a02e:	d107      	bne.n	800a040 <_dtoa_r+0xac8>
 800a030:	f000 f9ca 	bl	800a3c8 <__multadd>
 800a034:	4607      	mov	r7, r0
 800a036:	4605      	mov	r5, r0
 800a038:	9b07      	ldr	r3, [sp, #28]
 800a03a:	3301      	adds	r3, #1
 800a03c:	9307      	str	r3, [sp, #28]
 800a03e:	e774      	b.n	8009f2a <_dtoa_r+0x9b2>
 800a040:	f000 f9c2 	bl	800a3c8 <__multadd>
 800a044:	4629      	mov	r1, r5
 800a046:	4607      	mov	r7, r0
 800a048:	2300      	movs	r3, #0
 800a04a:	220a      	movs	r2, #10
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 f9bb 	bl	800a3c8 <__multadd>
 800a052:	4605      	mov	r5, r0
 800a054:	e7f0      	b.n	800a038 <_dtoa_r+0xac0>
 800a056:	9b08      	ldr	r3, [sp, #32]
 800a058:	2700      	movs	r7, #0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	bfcc      	ite	gt
 800a05e:	461e      	movgt	r6, r3
 800a060:	2601      	movle	r6, #1
 800a062:	4456      	add	r6, sl
 800a064:	4649      	mov	r1, r9
 800a066:	2201      	movs	r2, #1
 800a068:	4658      	mov	r0, fp
 800a06a:	f000 fb57 	bl	800a71c <__lshift>
 800a06e:	4621      	mov	r1, r4
 800a070:	4681      	mov	r9, r0
 800a072:	f000 fbbf 	bl	800a7f4 <__mcmp>
 800a076:	2800      	cmp	r0, #0
 800a078:	dcb0      	bgt.n	8009fdc <_dtoa_r+0xa64>
 800a07a:	d102      	bne.n	800a082 <_dtoa_r+0xb0a>
 800a07c:	f018 0f01 	tst.w	r8, #1
 800a080:	d1ac      	bne.n	8009fdc <_dtoa_r+0xa64>
 800a082:	4633      	mov	r3, r6
 800a084:	461e      	mov	r6, r3
 800a086:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a08a:	2a30      	cmp	r2, #48	@ 0x30
 800a08c:	d0fa      	beq.n	800a084 <_dtoa_r+0xb0c>
 800a08e:	e5be      	b.n	8009c0e <_dtoa_r+0x696>
 800a090:	459a      	cmp	sl, r3
 800a092:	d1a4      	bne.n	8009fde <_dtoa_r+0xa66>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	3301      	adds	r3, #1
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	2331      	movs	r3, #49	@ 0x31
 800a09c:	f88a 3000 	strb.w	r3, [sl]
 800a0a0:	e5b5      	b.n	8009c0e <_dtoa_r+0x696>
 800a0a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a0a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a104 <_dtoa_r+0xb8c>
 800a0a8:	b11b      	cbz	r3, 800a0b2 <_dtoa_r+0xb3a>
 800a0aa:	f10a 0308 	add.w	r3, sl, #8
 800a0ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a0b0:	6013      	str	r3, [r2, #0]
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	b017      	add	sp, #92	@ 0x5c
 800a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	f77f ae3d 	ble.w	8009d3c <_dtoa_r+0x7c4>
 800a0c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	e65b      	b.n	8009d82 <_dtoa_r+0x80a>
 800a0ca:	9b08      	ldr	r3, [sp, #32]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f77f aed6 	ble.w	8009e7e <_dtoa_r+0x906>
 800a0d2:	4656      	mov	r6, sl
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4648      	mov	r0, r9
 800a0d8:	f7ff f9c3 	bl	8009462 <quorem>
 800a0dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0e0:	9b08      	ldr	r3, [sp, #32]
 800a0e2:	f806 8b01 	strb.w	r8, [r6], #1
 800a0e6:	eba6 020a 	sub.w	r2, r6, sl
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	ddb3      	ble.n	800a056 <_dtoa_r+0xade>
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	4658      	mov	r0, fp
 800a0f6:	f000 f967 	bl	800a3c8 <__multadd>
 800a0fa:	4681      	mov	r9, r0
 800a0fc:	e7ea      	b.n	800a0d4 <_dtoa_r+0xb5c>
 800a0fe:	bf00      	nop
 800a100:	0800cfd6 	.word	0x0800cfd6
 800a104:	0800cf5a 	.word	0x0800cf5a

0800a108 <_free_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4605      	mov	r5, r0
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d040      	beq.n	800a192 <_free_r+0x8a>
 800a110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a114:	1f0c      	subs	r4, r1, #4
 800a116:	2b00      	cmp	r3, #0
 800a118:	bfb8      	it	lt
 800a11a:	18e4      	addlt	r4, r4, r3
 800a11c:	f000 f8e6 	bl	800a2ec <__malloc_lock>
 800a120:	4a1c      	ldr	r2, [pc, #112]	@ (800a194 <_free_r+0x8c>)
 800a122:	6813      	ldr	r3, [r2, #0]
 800a124:	b933      	cbnz	r3, 800a134 <_free_r+0x2c>
 800a126:	6063      	str	r3, [r4, #4]
 800a128:	6014      	str	r4, [r2, #0]
 800a12a:	4628      	mov	r0, r5
 800a12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a130:	f000 b8e2 	b.w	800a2f8 <__malloc_unlock>
 800a134:	42a3      	cmp	r3, r4
 800a136:	d908      	bls.n	800a14a <_free_r+0x42>
 800a138:	6820      	ldr	r0, [r4, #0]
 800a13a:	1821      	adds	r1, r4, r0
 800a13c:	428b      	cmp	r3, r1
 800a13e:	bf01      	itttt	eq
 800a140:	6819      	ldreq	r1, [r3, #0]
 800a142:	685b      	ldreq	r3, [r3, #4]
 800a144:	1809      	addeq	r1, r1, r0
 800a146:	6021      	streq	r1, [r4, #0]
 800a148:	e7ed      	b.n	800a126 <_free_r+0x1e>
 800a14a:	461a      	mov	r2, r3
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b10b      	cbz	r3, 800a154 <_free_r+0x4c>
 800a150:	42a3      	cmp	r3, r4
 800a152:	d9fa      	bls.n	800a14a <_free_r+0x42>
 800a154:	6811      	ldr	r1, [r2, #0]
 800a156:	1850      	adds	r0, r2, r1
 800a158:	42a0      	cmp	r0, r4
 800a15a:	d10b      	bne.n	800a174 <_free_r+0x6c>
 800a15c:	6820      	ldr	r0, [r4, #0]
 800a15e:	4401      	add	r1, r0
 800a160:	1850      	adds	r0, r2, r1
 800a162:	4283      	cmp	r3, r0
 800a164:	6011      	str	r1, [r2, #0]
 800a166:	d1e0      	bne.n	800a12a <_free_r+0x22>
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	4408      	add	r0, r1
 800a16e:	6010      	str	r0, [r2, #0]
 800a170:	6053      	str	r3, [r2, #4]
 800a172:	e7da      	b.n	800a12a <_free_r+0x22>
 800a174:	d902      	bls.n	800a17c <_free_r+0x74>
 800a176:	230c      	movs	r3, #12
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	e7d6      	b.n	800a12a <_free_r+0x22>
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	1821      	adds	r1, r4, r0
 800a180:	428b      	cmp	r3, r1
 800a182:	bf01      	itttt	eq
 800a184:	6819      	ldreq	r1, [r3, #0]
 800a186:	685b      	ldreq	r3, [r3, #4]
 800a188:	1809      	addeq	r1, r1, r0
 800a18a:	6021      	streq	r1, [r4, #0]
 800a18c:	6063      	str	r3, [r4, #4]
 800a18e:	6054      	str	r4, [r2, #4]
 800a190:	e7cb      	b.n	800a12a <_free_r+0x22>
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20004904 	.word	0x20004904

0800a198 <malloc>:
 800a198:	4b02      	ldr	r3, [pc, #8]	@ (800a1a4 <malloc+0xc>)
 800a19a:	4601      	mov	r1, r0
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	f000 b825 	b.w	800a1ec <_malloc_r>
 800a1a2:	bf00      	nop
 800a1a4:	2000001c 	.word	0x2000001c

0800a1a8 <sbrk_aligned>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a1e8 <sbrk_aligned+0x40>)
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	6831      	ldr	r1, [r6, #0]
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	b911      	cbnz	r1, 800a1ba <sbrk_aligned+0x12>
 800a1b4:	f001 f814 	bl	800b1e0 <_sbrk_r>
 800a1b8:	6030      	str	r0, [r6, #0]
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f001 f80f 	bl	800b1e0 <_sbrk_r>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	d103      	bne.n	800a1ce <sbrk_aligned+0x26>
 800a1c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	bd70      	pop	{r4, r5, r6, pc}
 800a1ce:	1cc4      	adds	r4, r0, #3
 800a1d0:	f024 0403 	bic.w	r4, r4, #3
 800a1d4:	42a0      	cmp	r0, r4
 800a1d6:	d0f8      	beq.n	800a1ca <sbrk_aligned+0x22>
 800a1d8:	1a21      	subs	r1, r4, r0
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f001 f800 	bl	800b1e0 <_sbrk_r>
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d1f2      	bne.n	800a1ca <sbrk_aligned+0x22>
 800a1e4:	e7ef      	b.n	800a1c6 <sbrk_aligned+0x1e>
 800a1e6:	bf00      	nop
 800a1e8:	20004900 	.word	0x20004900

0800a1ec <_malloc_r>:
 800a1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f0:	1ccd      	adds	r5, r1, #3
 800a1f2:	f025 0503 	bic.w	r5, r5, #3
 800a1f6:	3508      	adds	r5, #8
 800a1f8:	2d0c      	cmp	r5, #12
 800a1fa:	bf38      	it	cc
 800a1fc:	250c      	movcc	r5, #12
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	4606      	mov	r6, r0
 800a202:	db01      	blt.n	800a208 <_malloc_r+0x1c>
 800a204:	42a9      	cmp	r1, r5
 800a206:	d904      	bls.n	800a212 <_malloc_r+0x26>
 800a208:	230c      	movs	r3, #12
 800a20a:	6033      	str	r3, [r6, #0]
 800a20c:	2000      	movs	r0, #0
 800a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2e8 <_malloc_r+0xfc>
 800a216:	f000 f869 	bl	800a2ec <__malloc_lock>
 800a21a:	f8d8 3000 	ldr.w	r3, [r8]
 800a21e:	461c      	mov	r4, r3
 800a220:	bb44      	cbnz	r4, 800a274 <_malloc_r+0x88>
 800a222:	4629      	mov	r1, r5
 800a224:	4630      	mov	r0, r6
 800a226:	f7ff ffbf 	bl	800a1a8 <sbrk_aligned>
 800a22a:	1c43      	adds	r3, r0, #1
 800a22c:	4604      	mov	r4, r0
 800a22e:	d158      	bne.n	800a2e2 <_malloc_r+0xf6>
 800a230:	f8d8 4000 	ldr.w	r4, [r8]
 800a234:	4627      	mov	r7, r4
 800a236:	2f00      	cmp	r7, #0
 800a238:	d143      	bne.n	800a2c2 <_malloc_r+0xd6>
 800a23a:	2c00      	cmp	r4, #0
 800a23c:	d04b      	beq.n	800a2d6 <_malloc_r+0xea>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	4639      	mov	r1, r7
 800a242:	4630      	mov	r0, r6
 800a244:	eb04 0903 	add.w	r9, r4, r3
 800a248:	f000 ffca 	bl	800b1e0 <_sbrk_r>
 800a24c:	4581      	cmp	r9, r0
 800a24e:	d142      	bne.n	800a2d6 <_malloc_r+0xea>
 800a250:	6821      	ldr	r1, [r4, #0]
 800a252:	4630      	mov	r0, r6
 800a254:	1a6d      	subs	r5, r5, r1
 800a256:	4629      	mov	r1, r5
 800a258:	f7ff ffa6 	bl	800a1a8 <sbrk_aligned>
 800a25c:	3001      	adds	r0, #1
 800a25e:	d03a      	beq.n	800a2d6 <_malloc_r+0xea>
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	442b      	add	r3, r5
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	f8d8 3000 	ldr.w	r3, [r8]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	bb62      	cbnz	r2, 800a2c8 <_malloc_r+0xdc>
 800a26e:	f8c8 7000 	str.w	r7, [r8]
 800a272:	e00f      	b.n	800a294 <_malloc_r+0xa8>
 800a274:	6822      	ldr	r2, [r4, #0]
 800a276:	1b52      	subs	r2, r2, r5
 800a278:	d420      	bmi.n	800a2bc <_malloc_r+0xd0>
 800a27a:	2a0b      	cmp	r2, #11
 800a27c:	d917      	bls.n	800a2ae <_malloc_r+0xc2>
 800a27e:	1961      	adds	r1, r4, r5
 800a280:	42a3      	cmp	r3, r4
 800a282:	6025      	str	r5, [r4, #0]
 800a284:	bf18      	it	ne
 800a286:	6059      	strne	r1, [r3, #4]
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	bf08      	it	eq
 800a28c:	f8c8 1000 	streq.w	r1, [r8]
 800a290:	5162      	str	r2, [r4, r5]
 800a292:	604b      	str	r3, [r1, #4]
 800a294:	4630      	mov	r0, r6
 800a296:	f000 f82f 	bl	800a2f8 <__malloc_unlock>
 800a29a:	f104 000b 	add.w	r0, r4, #11
 800a29e:	1d23      	adds	r3, r4, #4
 800a2a0:	f020 0007 	bic.w	r0, r0, #7
 800a2a4:	1ac2      	subs	r2, r0, r3
 800a2a6:	bf1c      	itt	ne
 800a2a8:	1a1b      	subne	r3, r3, r0
 800a2aa:	50a3      	strne	r3, [r4, r2]
 800a2ac:	e7af      	b.n	800a20e <_malloc_r+0x22>
 800a2ae:	6862      	ldr	r2, [r4, #4]
 800a2b0:	42a3      	cmp	r3, r4
 800a2b2:	bf0c      	ite	eq
 800a2b4:	f8c8 2000 	streq.w	r2, [r8]
 800a2b8:	605a      	strne	r2, [r3, #4]
 800a2ba:	e7eb      	b.n	800a294 <_malloc_r+0xa8>
 800a2bc:	4623      	mov	r3, r4
 800a2be:	6864      	ldr	r4, [r4, #4]
 800a2c0:	e7ae      	b.n	800a220 <_malloc_r+0x34>
 800a2c2:	463c      	mov	r4, r7
 800a2c4:	687f      	ldr	r7, [r7, #4]
 800a2c6:	e7b6      	b.n	800a236 <_malloc_r+0x4a>
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	d1fb      	bne.n	800a2c8 <_malloc_r+0xdc>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	6053      	str	r3, [r2, #4]
 800a2d4:	e7de      	b.n	800a294 <_malloc_r+0xa8>
 800a2d6:	230c      	movs	r3, #12
 800a2d8:	4630      	mov	r0, r6
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	f000 f80c 	bl	800a2f8 <__malloc_unlock>
 800a2e0:	e794      	b.n	800a20c <_malloc_r+0x20>
 800a2e2:	6005      	str	r5, [r0, #0]
 800a2e4:	e7d6      	b.n	800a294 <_malloc_r+0xa8>
 800a2e6:	bf00      	nop
 800a2e8:	20004904 	.word	0x20004904

0800a2ec <__malloc_lock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	@ (800a2f4 <__malloc_lock+0x8>)
 800a2ee:	f7ff b89a 	b.w	8009426 <__retarget_lock_acquire_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	200048fc 	.word	0x200048fc

0800a2f8 <__malloc_unlock>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	@ (800a300 <__malloc_unlock+0x8>)
 800a2fa:	f7ff b895 	b.w	8009428 <__retarget_lock_release_recursive>
 800a2fe:	bf00      	nop
 800a300:	200048fc 	.word	0x200048fc

0800a304 <_Balloc>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	69c6      	ldr	r6, [r0, #28]
 800a308:	4604      	mov	r4, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	b976      	cbnz	r6, 800a32c <_Balloc+0x28>
 800a30e:	2010      	movs	r0, #16
 800a310:	f7ff ff42 	bl	800a198 <malloc>
 800a314:	4602      	mov	r2, r0
 800a316:	61e0      	str	r0, [r4, #28]
 800a318:	b920      	cbnz	r0, 800a324 <_Balloc+0x20>
 800a31a:	216b      	movs	r1, #107	@ 0x6b
 800a31c:	4b17      	ldr	r3, [pc, #92]	@ (800a37c <_Balloc+0x78>)
 800a31e:	4818      	ldr	r0, [pc, #96]	@ (800a380 <_Balloc+0x7c>)
 800a320:	f000 ff6e 	bl	800b200 <__assert_func>
 800a324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a328:	6006      	str	r6, [r0, #0]
 800a32a:	60c6      	str	r6, [r0, #12]
 800a32c:	69e6      	ldr	r6, [r4, #28]
 800a32e:	68f3      	ldr	r3, [r6, #12]
 800a330:	b183      	cbz	r3, 800a354 <_Balloc+0x50>
 800a332:	69e3      	ldr	r3, [r4, #28]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a33a:	b9b8      	cbnz	r0, 800a36c <_Balloc+0x68>
 800a33c:	2101      	movs	r1, #1
 800a33e:	fa01 f605 	lsl.w	r6, r1, r5
 800a342:	1d72      	adds	r2, r6, #5
 800a344:	4620      	mov	r0, r4
 800a346:	0092      	lsls	r2, r2, #2
 800a348:	f000 ff78 	bl	800b23c <_calloc_r>
 800a34c:	b160      	cbz	r0, 800a368 <_Balloc+0x64>
 800a34e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a352:	e00e      	b.n	800a372 <_Balloc+0x6e>
 800a354:	2221      	movs	r2, #33	@ 0x21
 800a356:	2104      	movs	r1, #4
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 ff6f 	bl	800b23c <_calloc_r>
 800a35e:	69e3      	ldr	r3, [r4, #28]
 800a360:	60f0      	str	r0, [r6, #12]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e4      	bne.n	800a332 <_Balloc+0x2e>
 800a368:	2000      	movs	r0, #0
 800a36a:	bd70      	pop	{r4, r5, r6, pc}
 800a36c:	6802      	ldr	r2, [r0, #0]
 800a36e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a372:	2300      	movs	r3, #0
 800a374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a378:	e7f7      	b.n	800a36a <_Balloc+0x66>
 800a37a:	bf00      	nop
 800a37c:	0800cf67 	.word	0x0800cf67
 800a380:	0800cfe7 	.word	0x0800cfe7

0800a384 <_Bfree>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	69c6      	ldr	r6, [r0, #28]
 800a388:	4605      	mov	r5, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	b976      	cbnz	r6, 800a3ac <_Bfree+0x28>
 800a38e:	2010      	movs	r0, #16
 800a390:	f7ff ff02 	bl	800a198 <malloc>
 800a394:	4602      	mov	r2, r0
 800a396:	61e8      	str	r0, [r5, #28]
 800a398:	b920      	cbnz	r0, 800a3a4 <_Bfree+0x20>
 800a39a:	218f      	movs	r1, #143	@ 0x8f
 800a39c:	4b08      	ldr	r3, [pc, #32]	@ (800a3c0 <_Bfree+0x3c>)
 800a39e:	4809      	ldr	r0, [pc, #36]	@ (800a3c4 <_Bfree+0x40>)
 800a3a0:	f000 ff2e 	bl	800b200 <__assert_func>
 800a3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3a8:	6006      	str	r6, [r0, #0]
 800a3aa:	60c6      	str	r6, [r0, #12]
 800a3ac:	b13c      	cbz	r4, 800a3be <_Bfree+0x3a>
 800a3ae:	69eb      	ldr	r3, [r5, #28]
 800a3b0:	6862      	ldr	r2, [r4, #4]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3b8:	6021      	str	r1, [r4, #0]
 800a3ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3be:	bd70      	pop	{r4, r5, r6, pc}
 800a3c0:	0800cf67 	.word	0x0800cf67
 800a3c4:	0800cfe7 	.word	0x0800cfe7

0800a3c8 <__multadd>:
 800a3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	461e      	mov	r6, r3
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	690d      	ldr	r5, [r1, #16]
 800a3d6:	f101 0c14 	add.w	ip, r1, #20
 800a3da:	f8dc 3000 	ldr.w	r3, [ip]
 800a3de:	3001      	adds	r0, #1
 800a3e0:	b299      	uxth	r1, r3
 800a3e2:	fb02 6101 	mla	r1, r2, r1, r6
 800a3e6:	0c1e      	lsrs	r6, r3, #16
 800a3e8:	0c0b      	lsrs	r3, r1, #16
 800a3ea:	fb02 3306 	mla	r3, r2, r6, r3
 800a3ee:	b289      	uxth	r1, r1
 800a3f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3f4:	4285      	cmp	r5, r0
 800a3f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a3fe:	dcec      	bgt.n	800a3da <__multadd+0x12>
 800a400:	b30e      	cbz	r6, 800a446 <__multadd+0x7e>
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	42ab      	cmp	r3, r5
 800a406:	dc19      	bgt.n	800a43c <__multadd+0x74>
 800a408:	6861      	ldr	r1, [r4, #4]
 800a40a:	4638      	mov	r0, r7
 800a40c:	3101      	adds	r1, #1
 800a40e:	f7ff ff79 	bl	800a304 <_Balloc>
 800a412:	4680      	mov	r8, r0
 800a414:	b928      	cbnz	r0, 800a422 <__multadd+0x5a>
 800a416:	4602      	mov	r2, r0
 800a418:	21ba      	movs	r1, #186	@ 0xba
 800a41a:	4b0c      	ldr	r3, [pc, #48]	@ (800a44c <__multadd+0x84>)
 800a41c:	480c      	ldr	r0, [pc, #48]	@ (800a450 <__multadd+0x88>)
 800a41e:	f000 feef 	bl	800b200 <__assert_func>
 800a422:	6922      	ldr	r2, [r4, #16]
 800a424:	f104 010c 	add.w	r1, r4, #12
 800a428:	3202      	adds	r2, #2
 800a42a:	0092      	lsls	r2, r2, #2
 800a42c:	300c      	adds	r0, #12
 800a42e:	f7ff f80a 	bl	8009446 <memcpy>
 800a432:	4621      	mov	r1, r4
 800a434:	4638      	mov	r0, r7
 800a436:	f7ff ffa5 	bl	800a384 <_Bfree>
 800a43a:	4644      	mov	r4, r8
 800a43c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a440:	3501      	adds	r5, #1
 800a442:	615e      	str	r6, [r3, #20]
 800a444:	6125      	str	r5, [r4, #16]
 800a446:	4620      	mov	r0, r4
 800a448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a44c:	0800cfd6 	.word	0x0800cfd6
 800a450:	0800cfe7 	.word	0x0800cfe7

0800a454 <__hi0bits>:
 800a454:	4603      	mov	r3, r0
 800a456:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a45a:	bf3a      	itte	cc
 800a45c:	0403      	lslcc	r3, r0, #16
 800a45e:	2010      	movcc	r0, #16
 800a460:	2000      	movcs	r0, #0
 800a462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a466:	bf3c      	itt	cc
 800a468:	021b      	lslcc	r3, r3, #8
 800a46a:	3008      	addcc	r0, #8
 800a46c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a470:	bf3c      	itt	cc
 800a472:	011b      	lslcc	r3, r3, #4
 800a474:	3004      	addcc	r0, #4
 800a476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a47a:	bf3c      	itt	cc
 800a47c:	009b      	lslcc	r3, r3, #2
 800a47e:	3002      	addcc	r0, #2
 800a480:	2b00      	cmp	r3, #0
 800a482:	db05      	blt.n	800a490 <__hi0bits+0x3c>
 800a484:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a488:	f100 0001 	add.w	r0, r0, #1
 800a48c:	bf08      	it	eq
 800a48e:	2020      	moveq	r0, #32
 800a490:	4770      	bx	lr

0800a492 <__lo0bits>:
 800a492:	6803      	ldr	r3, [r0, #0]
 800a494:	4602      	mov	r2, r0
 800a496:	f013 0007 	ands.w	r0, r3, #7
 800a49a:	d00b      	beq.n	800a4b4 <__lo0bits+0x22>
 800a49c:	07d9      	lsls	r1, r3, #31
 800a49e:	d421      	bmi.n	800a4e4 <__lo0bits+0x52>
 800a4a0:	0798      	lsls	r0, r3, #30
 800a4a2:	bf49      	itett	mi
 800a4a4:	085b      	lsrmi	r3, r3, #1
 800a4a6:	089b      	lsrpl	r3, r3, #2
 800a4a8:	2001      	movmi	r0, #1
 800a4aa:	6013      	strmi	r3, [r2, #0]
 800a4ac:	bf5c      	itt	pl
 800a4ae:	2002      	movpl	r0, #2
 800a4b0:	6013      	strpl	r3, [r2, #0]
 800a4b2:	4770      	bx	lr
 800a4b4:	b299      	uxth	r1, r3
 800a4b6:	b909      	cbnz	r1, 800a4bc <__lo0bits+0x2a>
 800a4b8:	2010      	movs	r0, #16
 800a4ba:	0c1b      	lsrs	r3, r3, #16
 800a4bc:	b2d9      	uxtb	r1, r3
 800a4be:	b909      	cbnz	r1, 800a4c4 <__lo0bits+0x32>
 800a4c0:	3008      	adds	r0, #8
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	0719      	lsls	r1, r3, #28
 800a4c6:	bf04      	itt	eq
 800a4c8:	091b      	lsreq	r3, r3, #4
 800a4ca:	3004      	addeq	r0, #4
 800a4cc:	0799      	lsls	r1, r3, #30
 800a4ce:	bf04      	itt	eq
 800a4d0:	089b      	lsreq	r3, r3, #2
 800a4d2:	3002      	addeq	r0, #2
 800a4d4:	07d9      	lsls	r1, r3, #31
 800a4d6:	d403      	bmi.n	800a4e0 <__lo0bits+0x4e>
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	f100 0001 	add.w	r0, r0, #1
 800a4de:	d003      	beq.n	800a4e8 <__lo0bits+0x56>
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	4770      	bx	lr
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	4770      	bx	lr
 800a4e8:	2020      	movs	r0, #32
 800a4ea:	4770      	bx	lr

0800a4ec <__i2b>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	f7ff ff07 	bl	800a304 <_Balloc>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	b928      	cbnz	r0, 800a506 <__i2b+0x1a>
 800a4fa:	f240 1145 	movw	r1, #325	@ 0x145
 800a4fe:	4b04      	ldr	r3, [pc, #16]	@ (800a510 <__i2b+0x24>)
 800a500:	4804      	ldr	r0, [pc, #16]	@ (800a514 <__i2b+0x28>)
 800a502:	f000 fe7d 	bl	800b200 <__assert_func>
 800a506:	2301      	movs	r3, #1
 800a508:	6144      	str	r4, [r0, #20]
 800a50a:	6103      	str	r3, [r0, #16]
 800a50c:	bd10      	pop	{r4, pc}
 800a50e:	bf00      	nop
 800a510:	0800cfd6 	.word	0x0800cfd6
 800a514:	0800cfe7 	.word	0x0800cfe7

0800a518 <__multiply>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	4614      	mov	r4, r2
 800a51e:	690a      	ldr	r2, [r1, #16]
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	460f      	mov	r7, r1
 800a524:	429a      	cmp	r2, r3
 800a526:	bfa2      	ittt	ge
 800a528:	4623      	movge	r3, r4
 800a52a:	460c      	movge	r4, r1
 800a52c:	461f      	movge	r7, r3
 800a52e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a532:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a536:	68a3      	ldr	r3, [r4, #8]
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	eb0a 0609 	add.w	r6, sl, r9
 800a53e:	42b3      	cmp	r3, r6
 800a540:	b085      	sub	sp, #20
 800a542:	bfb8      	it	lt
 800a544:	3101      	addlt	r1, #1
 800a546:	f7ff fedd 	bl	800a304 <_Balloc>
 800a54a:	b930      	cbnz	r0, 800a55a <__multiply+0x42>
 800a54c:	4602      	mov	r2, r0
 800a54e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a552:	4b43      	ldr	r3, [pc, #268]	@ (800a660 <__multiply+0x148>)
 800a554:	4843      	ldr	r0, [pc, #268]	@ (800a664 <__multiply+0x14c>)
 800a556:	f000 fe53 	bl	800b200 <__assert_func>
 800a55a:	f100 0514 	add.w	r5, r0, #20
 800a55e:	462b      	mov	r3, r5
 800a560:	2200      	movs	r2, #0
 800a562:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a566:	4543      	cmp	r3, r8
 800a568:	d321      	bcc.n	800a5ae <__multiply+0x96>
 800a56a:	f107 0114 	add.w	r1, r7, #20
 800a56e:	f104 0214 	add.w	r2, r4, #20
 800a572:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a576:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a57a:	9302      	str	r3, [sp, #8]
 800a57c:	1b13      	subs	r3, r2, r4
 800a57e:	3b15      	subs	r3, #21
 800a580:	f023 0303 	bic.w	r3, r3, #3
 800a584:	3304      	adds	r3, #4
 800a586:	f104 0715 	add.w	r7, r4, #21
 800a58a:	42ba      	cmp	r2, r7
 800a58c:	bf38      	it	cc
 800a58e:	2304      	movcc	r3, #4
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	9b02      	ldr	r3, [sp, #8]
 800a594:	9103      	str	r1, [sp, #12]
 800a596:	428b      	cmp	r3, r1
 800a598:	d80c      	bhi.n	800a5b4 <__multiply+0x9c>
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	dd03      	ble.n	800a5a6 <__multiply+0x8e>
 800a59e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d05a      	beq.n	800a65c <__multiply+0x144>
 800a5a6:	6106      	str	r6, [r0, #16]
 800a5a8:	b005      	add	sp, #20
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	f843 2b04 	str.w	r2, [r3], #4
 800a5b2:	e7d8      	b.n	800a566 <__multiply+0x4e>
 800a5b4:	f8b1 a000 	ldrh.w	sl, [r1]
 800a5b8:	f1ba 0f00 	cmp.w	sl, #0
 800a5bc:	d023      	beq.n	800a606 <__multiply+0xee>
 800a5be:	46a9      	mov	r9, r5
 800a5c0:	f04f 0c00 	mov.w	ip, #0
 800a5c4:	f104 0e14 	add.w	lr, r4, #20
 800a5c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5cc:	f8d9 3000 	ldr.w	r3, [r9]
 800a5d0:	fa1f fb87 	uxth.w	fp, r7
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	fb0a 330b 	mla	r3, sl, fp, r3
 800a5da:	4463      	add	r3, ip
 800a5dc:	f8d9 c000 	ldr.w	ip, [r9]
 800a5e0:	0c3f      	lsrs	r7, r7, #16
 800a5e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a5e6:	fb0a c707 	mla	r7, sl, r7, ip
 800a5ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5f4:	4572      	cmp	r2, lr
 800a5f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5fa:	f849 3b04 	str.w	r3, [r9], #4
 800a5fe:	d8e3      	bhi.n	800a5c8 <__multiply+0xb0>
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	f845 c003 	str.w	ip, [r5, r3]
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	3104      	adds	r1, #4
 800a60a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a60e:	f1b9 0f00 	cmp.w	r9, #0
 800a612:	d021      	beq.n	800a658 <__multiply+0x140>
 800a614:	46ae      	mov	lr, r5
 800a616:	f04f 0a00 	mov.w	sl, #0
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	f104 0c14 	add.w	ip, r4, #20
 800a620:	f8bc b000 	ldrh.w	fp, [ip]
 800a624:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	fb09 770b 	mla	r7, r9, fp, r7
 800a62e:	4457      	add	r7, sl
 800a630:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a634:	f84e 3b04 	str.w	r3, [lr], #4
 800a638:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a63c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a640:	f8be 3000 	ldrh.w	r3, [lr]
 800a644:	4562      	cmp	r2, ip
 800a646:	fb09 330a 	mla	r3, r9, sl, r3
 800a64a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a64e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a652:	d8e5      	bhi.n	800a620 <__multiply+0x108>
 800a654:	9f01      	ldr	r7, [sp, #4]
 800a656:	51eb      	str	r3, [r5, r7]
 800a658:	3504      	adds	r5, #4
 800a65a:	e79a      	b.n	800a592 <__multiply+0x7a>
 800a65c:	3e01      	subs	r6, #1
 800a65e:	e79c      	b.n	800a59a <__multiply+0x82>
 800a660:	0800cfd6 	.word	0x0800cfd6
 800a664:	0800cfe7 	.word	0x0800cfe7

0800a668 <__pow5mult>:
 800a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a66c:	4615      	mov	r5, r2
 800a66e:	f012 0203 	ands.w	r2, r2, #3
 800a672:	4607      	mov	r7, r0
 800a674:	460e      	mov	r6, r1
 800a676:	d007      	beq.n	800a688 <__pow5mult+0x20>
 800a678:	4c25      	ldr	r4, [pc, #148]	@ (800a710 <__pow5mult+0xa8>)
 800a67a:	3a01      	subs	r2, #1
 800a67c:	2300      	movs	r3, #0
 800a67e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a682:	f7ff fea1 	bl	800a3c8 <__multadd>
 800a686:	4606      	mov	r6, r0
 800a688:	10ad      	asrs	r5, r5, #2
 800a68a:	d03d      	beq.n	800a708 <__pow5mult+0xa0>
 800a68c:	69fc      	ldr	r4, [r7, #28]
 800a68e:	b97c      	cbnz	r4, 800a6b0 <__pow5mult+0x48>
 800a690:	2010      	movs	r0, #16
 800a692:	f7ff fd81 	bl	800a198 <malloc>
 800a696:	4602      	mov	r2, r0
 800a698:	61f8      	str	r0, [r7, #28]
 800a69a:	b928      	cbnz	r0, 800a6a8 <__pow5mult+0x40>
 800a69c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a6a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a714 <__pow5mult+0xac>)
 800a6a2:	481d      	ldr	r0, [pc, #116]	@ (800a718 <__pow5mult+0xb0>)
 800a6a4:	f000 fdac 	bl	800b200 <__assert_func>
 800a6a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6ac:	6004      	str	r4, [r0, #0]
 800a6ae:	60c4      	str	r4, [r0, #12]
 800a6b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a6b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6b8:	b94c      	cbnz	r4, 800a6ce <__pow5mult+0x66>
 800a6ba:	f240 2171 	movw	r1, #625	@ 0x271
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f7ff ff14 	bl	800a4ec <__i2b>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6cc:	6003      	str	r3, [r0, #0]
 800a6ce:	f04f 0900 	mov.w	r9, #0
 800a6d2:	07eb      	lsls	r3, r5, #31
 800a6d4:	d50a      	bpl.n	800a6ec <__pow5mult+0x84>
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4622      	mov	r2, r4
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f7ff ff1c 	bl	800a518 <__multiply>
 800a6e0:	4680      	mov	r8, r0
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7ff fe4d 	bl	800a384 <_Bfree>
 800a6ea:	4646      	mov	r6, r8
 800a6ec:	106d      	asrs	r5, r5, #1
 800a6ee:	d00b      	beq.n	800a708 <__pow5mult+0xa0>
 800a6f0:	6820      	ldr	r0, [r4, #0]
 800a6f2:	b938      	cbnz	r0, 800a704 <__pow5mult+0x9c>
 800a6f4:	4622      	mov	r2, r4
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f7ff ff0d 	bl	800a518 <__multiply>
 800a6fe:	6020      	str	r0, [r4, #0]
 800a700:	f8c0 9000 	str.w	r9, [r0]
 800a704:	4604      	mov	r4, r0
 800a706:	e7e4      	b.n	800a6d2 <__pow5mult+0x6a>
 800a708:	4630      	mov	r0, r6
 800a70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a70e:	bf00      	nop
 800a710:	0800d040 	.word	0x0800d040
 800a714:	0800cf67 	.word	0x0800cf67
 800a718:	0800cfe7 	.word	0x0800cfe7

0800a71c <__lshift>:
 800a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a720:	460c      	mov	r4, r1
 800a722:	4607      	mov	r7, r0
 800a724:	4691      	mov	r9, r2
 800a726:	6923      	ldr	r3, [r4, #16]
 800a728:	6849      	ldr	r1, [r1, #4]
 800a72a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a734:	f108 0601 	add.w	r6, r8, #1
 800a738:	42b3      	cmp	r3, r6
 800a73a:	db0b      	blt.n	800a754 <__lshift+0x38>
 800a73c:	4638      	mov	r0, r7
 800a73e:	f7ff fde1 	bl	800a304 <_Balloc>
 800a742:	4605      	mov	r5, r0
 800a744:	b948      	cbnz	r0, 800a75a <__lshift+0x3e>
 800a746:	4602      	mov	r2, r0
 800a748:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a74c:	4b27      	ldr	r3, [pc, #156]	@ (800a7ec <__lshift+0xd0>)
 800a74e:	4828      	ldr	r0, [pc, #160]	@ (800a7f0 <__lshift+0xd4>)
 800a750:	f000 fd56 	bl	800b200 <__assert_func>
 800a754:	3101      	adds	r1, #1
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	e7ee      	b.n	800a738 <__lshift+0x1c>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f100 0114 	add.w	r1, r0, #20
 800a760:	f100 0210 	add.w	r2, r0, #16
 800a764:	4618      	mov	r0, r3
 800a766:	4553      	cmp	r3, sl
 800a768:	db33      	blt.n	800a7d2 <__lshift+0xb6>
 800a76a:	6920      	ldr	r0, [r4, #16]
 800a76c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a770:	f104 0314 	add.w	r3, r4, #20
 800a774:	f019 091f 	ands.w	r9, r9, #31
 800a778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a77c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a780:	d02b      	beq.n	800a7da <__lshift+0xbe>
 800a782:	468a      	mov	sl, r1
 800a784:	2200      	movs	r2, #0
 800a786:	f1c9 0e20 	rsb	lr, r9, #32
 800a78a:	6818      	ldr	r0, [r3, #0]
 800a78c:	fa00 f009 	lsl.w	r0, r0, r9
 800a790:	4310      	orrs	r0, r2
 800a792:	f84a 0b04 	str.w	r0, [sl], #4
 800a796:	f853 2b04 	ldr.w	r2, [r3], #4
 800a79a:	459c      	cmp	ip, r3
 800a79c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7a0:	d8f3      	bhi.n	800a78a <__lshift+0x6e>
 800a7a2:	ebac 0304 	sub.w	r3, ip, r4
 800a7a6:	3b15      	subs	r3, #21
 800a7a8:	f023 0303 	bic.w	r3, r3, #3
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	f104 0015 	add.w	r0, r4, #21
 800a7b2:	4584      	cmp	ip, r0
 800a7b4:	bf38      	it	cc
 800a7b6:	2304      	movcc	r3, #4
 800a7b8:	50ca      	str	r2, [r1, r3]
 800a7ba:	b10a      	cbz	r2, 800a7c0 <__lshift+0xa4>
 800a7bc:	f108 0602 	add.w	r6, r8, #2
 800a7c0:	3e01      	subs	r6, #1
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	612e      	str	r6, [r5, #16]
 800a7c8:	f7ff fddc 	bl	800a384 <_Bfree>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	e7c5      	b.n	800a766 <__lshift+0x4a>
 800a7da:	3904      	subs	r1, #4
 800a7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e0:	459c      	cmp	ip, r3
 800a7e2:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7e6:	d8f9      	bhi.n	800a7dc <__lshift+0xc0>
 800a7e8:	e7ea      	b.n	800a7c0 <__lshift+0xa4>
 800a7ea:	bf00      	nop
 800a7ec:	0800cfd6 	.word	0x0800cfd6
 800a7f0:	0800cfe7 	.word	0x0800cfe7

0800a7f4 <__mcmp>:
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	690a      	ldr	r2, [r1, #16]
 800a7f8:	6900      	ldr	r0, [r0, #16]
 800a7fa:	b530      	push	{r4, r5, lr}
 800a7fc:	1a80      	subs	r0, r0, r2
 800a7fe:	d10e      	bne.n	800a81e <__mcmp+0x2a>
 800a800:	3314      	adds	r3, #20
 800a802:	3114      	adds	r1, #20
 800a804:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a808:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a80c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a810:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a814:	4295      	cmp	r5, r2
 800a816:	d003      	beq.n	800a820 <__mcmp+0x2c>
 800a818:	d205      	bcs.n	800a826 <__mcmp+0x32>
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295
 800a81e:	bd30      	pop	{r4, r5, pc}
 800a820:	42a3      	cmp	r3, r4
 800a822:	d3f3      	bcc.n	800a80c <__mcmp+0x18>
 800a824:	e7fb      	b.n	800a81e <__mcmp+0x2a>
 800a826:	2001      	movs	r0, #1
 800a828:	e7f9      	b.n	800a81e <__mcmp+0x2a>
	...

0800a82c <__mdiff>:
 800a82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a830:	4689      	mov	r9, r1
 800a832:	4606      	mov	r6, r0
 800a834:	4611      	mov	r1, r2
 800a836:	4648      	mov	r0, r9
 800a838:	4614      	mov	r4, r2
 800a83a:	f7ff ffdb 	bl	800a7f4 <__mcmp>
 800a83e:	1e05      	subs	r5, r0, #0
 800a840:	d112      	bne.n	800a868 <__mdiff+0x3c>
 800a842:	4629      	mov	r1, r5
 800a844:	4630      	mov	r0, r6
 800a846:	f7ff fd5d 	bl	800a304 <_Balloc>
 800a84a:	4602      	mov	r2, r0
 800a84c:	b928      	cbnz	r0, 800a85a <__mdiff+0x2e>
 800a84e:	f240 2137 	movw	r1, #567	@ 0x237
 800a852:	4b3e      	ldr	r3, [pc, #248]	@ (800a94c <__mdiff+0x120>)
 800a854:	483e      	ldr	r0, [pc, #248]	@ (800a950 <__mdiff+0x124>)
 800a856:	f000 fcd3 	bl	800b200 <__assert_func>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a860:	4610      	mov	r0, r2
 800a862:	b003      	add	sp, #12
 800a864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a868:	bfbc      	itt	lt
 800a86a:	464b      	movlt	r3, r9
 800a86c:	46a1      	movlt	r9, r4
 800a86e:	4630      	mov	r0, r6
 800a870:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a874:	bfba      	itte	lt
 800a876:	461c      	movlt	r4, r3
 800a878:	2501      	movlt	r5, #1
 800a87a:	2500      	movge	r5, #0
 800a87c:	f7ff fd42 	bl	800a304 <_Balloc>
 800a880:	4602      	mov	r2, r0
 800a882:	b918      	cbnz	r0, 800a88c <__mdiff+0x60>
 800a884:	f240 2145 	movw	r1, #581	@ 0x245
 800a888:	4b30      	ldr	r3, [pc, #192]	@ (800a94c <__mdiff+0x120>)
 800a88a:	e7e3      	b.n	800a854 <__mdiff+0x28>
 800a88c:	f100 0b14 	add.w	fp, r0, #20
 800a890:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a894:	f109 0310 	add.w	r3, r9, #16
 800a898:	60c5      	str	r5, [r0, #12]
 800a89a:	f04f 0c00 	mov.w	ip, #0
 800a89e:	f109 0514 	add.w	r5, r9, #20
 800a8a2:	46d9      	mov	r9, fp
 800a8a4:	6926      	ldr	r6, [r4, #16]
 800a8a6:	f104 0e14 	add.w	lr, r4, #20
 800a8aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a8ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	9b01      	ldr	r3, [sp, #4]
 800a8b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a8ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a8be:	b281      	uxth	r1, r0
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	fa1f f38a 	uxth.w	r3, sl
 800a8c6:	1a5b      	subs	r3, r3, r1
 800a8c8:	0c00      	lsrs	r0, r0, #16
 800a8ca:	4463      	add	r3, ip
 800a8cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a8d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8da:	4576      	cmp	r6, lr
 800a8dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8e0:	f849 3b04 	str.w	r3, [r9], #4
 800a8e4:	d8e6      	bhi.n	800a8b4 <__mdiff+0x88>
 800a8e6:	1b33      	subs	r3, r6, r4
 800a8e8:	3b15      	subs	r3, #21
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	3415      	adds	r4, #21
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	42a6      	cmp	r6, r4
 800a8f4:	bf38      	it	cc
 800a8f6:	2304      	movcc	r3, #4
 800a8f8:	441d      	add	r5, r3
 800a8fa:	445b      	add	r3, fp
 800a8fc:	461e      	mov	r6, r3
 800a8fe:	462c      	mov	r4, r5
 800a900:	4544      	cmp	r4, r8
 800a902:	d30e      	bcc.n	800a922 <__mdiff+0xf6>
 800a904:	f108 0103 	add.w	r1, r8, #3
 800a908:	1b49      	subs	r1, r1, r5
 800a90a:	f021 0103 	bic.w	r1, r1, #3
 800a90e:	3d03      	subs	r5, #3
 800a910:	45a8      	cmp	r8, r5
 800a912:	bf38      	it	cc
 800a914:	2100      	movcc	r1, #0
 800a916:	440b      	add	r3, r1
 800a918:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a91c:	b199      	cbz	r1, 800a946 <__mdiff+0x11a>
 800a91e:	6117      	str	r7, [r2, #16]
 800a920:	e79e      	b.n	800a860 <__mdiff+0x34>
 800a922:	46e6      	mov	lr, ip
 800a924:	f854 1b04 	ldr.w	r1, [r4], #4
 800a928:	fa1f fc81 	uxth.w	ip, r1
 800a92c:	44f4      	add	ip, lr
 800a92e:	0c08      	lsrs	r0, r1, #16
 800a930:	4471      	add	r1, lr
 800a932:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a936:	b289      	uxth	r1, r1
 800a938:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a93c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a940:	f846 1b04 	str.w	r1, [r6], #4
 800a944:	e7dc      	b.n	800a900 <__mdiff+0xd4>
 800a946:	3f01      	subs	r7, #1
 800a948:	e7e6      	b.n	800a918 <__mdiff+0xec>
 800a94a:	bf00      	nop
 800a94c:	0800cfd6 	.word	0x0800cfd6
 800a950:	0800cfe7 	.word	0x0800cfe7

0800a954 <__d2b>:
 800a954:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a958:	2101      	movs	r1, #1
 800a95a:	4690      	mov	r8, r2
 800a95c:	4699      	mov	r9, r3
 800a95e:	9e08      	ldr	r6, [sp, #32]
 800a960:	f7ff fcd0 	bl	800a304 <_Balloc>
 800a964:	4604      	mov	r4, r0
 800a966:	b930      	cbnz	r0, 800a976 <__d2b+0x22>
 800a968:	4602      	mov	r2, r0
 800a96a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a96e:	4b23      	ldr	r3, [pc, #140]	@ (800a9fc <__d2b+0xa8>)
 800a970:	4823      	ldr	r0, [pc, #140]	@ (800aa00 <__d2b+0xac>)
 800a972:	f000 fc45 	bl	800b200 <__assert_func>
 800a976:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a97a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a97e:	b10d      	cbz	r5, 800a984 <__d2b+0x30>
 800a980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	f1b8 0300 	subs.w	r3, r8, #0
 800a98a:	d024      	beq.n	800a9d6 <__d2b+0x82>
 800a98c:	4668      	mov	r0, sp
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	f7ff fd7f 	bl	800a492 <__lo0bits>
 800a994:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a998:	b1d8      	cbz	r0, 800a9d2 <__d2b+0x7e>
 800a99a:	f1c0 0320 	rsb	r3, r0, #32
 800a99e:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a2:	430b      	orrs	r3, r1
 800a9a4:	40c2      	lsrs	r2, r0
 800a9a6:	6163      	str	r3, [r4, #20]
 800a9a8:	9201      	str	r2, [sp, #4]
 800a9aa:	9b01      	ldr	r3, [sp, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bf0c      	ite	eq
 800a9b0:	2201      	moveq	r2, #1
 800a9b2:	2202      	movne	r2, #2
 800a9b4:	61a3      	str	r3, [r4, #24]
 800a9b6:	6122      	str	r2, [r4, #16]
 800a9b8:	b1ad      	cbz	r5, 800a9e6 <__d2b+0x92>
 800a9ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9be:	4405      	add	r5, r0
 800a9c0:	6035      	str	r5, [r6, #0]
 800a9c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	6018      	str	r0, [r3, #0]
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	b002      	add	sp, #8
 800a9ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a9d2:	6161      	str	r1, [r4, #20]
 800a9d4:	e7e9      	b.n	800a9aa <__d2b+0x56>
 800a9d6:	a801      	add	r0, sp, #4
 800a9d8:	f7ff fd5b 	bl	800a492 <__lo0bits>
 800a9dc:	9b01      	ldr	r3, [sp, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	6163      	str	r3, [r4, #20]
 800a9e2:	3020      	adds	r0, #32
 800a9e4:	e7e7      	b.n	800a9b6 <__d2b+0x62>
 800a9e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a9ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9ee:	6030      	str	r0, [r6, #0]
 800a9f0:	6918      	ldr	r0, [r3, #16]
 800a9f2:	f7ff fd2f 	bl	800a454 <__hi0bits>
 800a9f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9fa:	e7e4      	b.n	800a9c6 <__d2b+0x72>
 800a9fc:	0800cfd6 	.word	0x0800cfd6
 800aa00:	0800cfe7 	.word	0x0800cfe7

0800aa04 <__ssputs_r>:
 800aa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa08:	461f      	mov	r7, r3
 800aa0a:	688e      	ldr	r6, [r1, #8]
 800aa0c:	4682      	mov	sl, r0
 800aa0e:	42be      	cmp	r6, r7
 800aa10:	460c      	mov	r4, r1
 800aa12:	4690      	mov	r8, r2
 800aa14:	680b      	ldr	r3, [r1, #0]
 800aa16:	d82d      	bhi.n	800aa74 <__ssputs_r+0x70>
 800aa18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa20:	d026      	beq.n	800aa70 <__ssputs_r+0x6c>
 800aa22:	6965      	ldr	r5, [r4, #20]
 800aa24:	6909      	ldr	r1, [r1, #16]
 800aa26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa2a:	eba3 0901 	sub.w	r9, r3, r1
 800aa2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa32:	1c7b      	adds	r3, r7, #1
 800aa34:	444b      	add	r3, r9
 800aa36:	106d      	asrs	r5, r5, #1
 800aa38:	429d      	cmp	r5, r3
 800aa3a:	bf38      	it	cc
 800aa3c:	461d      	movcc	r5, r3
 800aa3e:	0553      	lsls	r3, r2, #21
 800aa40:	d527      	bpl.n	800aa92 <__ssputs_r+0x8e>
 800aa42:	4629      	mov	r1, r5
 800aa44:	f7ff fbd2 	bl	800a1ec <_malloc_r>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	b360      	cbz	r0, 800aaa6 <__ssputs_r+0xa2>
 800aa4c:	464a      	mov	r2, r9
 800aa4e:	6921      	ldr	r1, [r4, #16]
 800aa50:	f7fe fcf9 	bl	8009446 <memcpy>
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5e:	81a3      	strh	r3, [r4, #12]
 800aa60:	6126      	str	r6, [r4, #16]
 800aa62:	444e      	add	r6, r9
 800aa64:	6026      	str	r6, [r4, #0]
 800aa66:	463e      	mov	r6, r7
 800aa68:	6165      	str	r5, [r4, #20]
 800aa6a:	eba5 0509 	sub.w	r5, r5, r9
 800aa6e:	60a5      	str	r5, [r4, #8]
 800aa70:	42be      	cmp	r6, r7
 800aa72:	d900      	bls.n	800aa76 <__ssputs_r+0x72>
 800aa74:	463e      	mov	r6, r7
 800aa76:	4632      	mov	r2, r6
 800aa78:	4641      	mov	r1, r8
 800aa7a:	6820      	ldr	r0, [r4, #0]
 800aa7c:	f000 fb96 	bl	800b1ac <memmove>
 800aa80:	2000      	movs	r0, #0
 800aa82:	68a3      	ldr	r3, [r4, #8]
 800aa84:	1b9b      	subs	r3, r3, r6
 800aa86:	60a3      	str	r3, [r4, #8]
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	4433      	add	r3, r6
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa92:	462a      	mov	r2, r5
 800aa94:	f000 fbf8 	bl	800b288 <_realloc_r>
 800aa98:	4606      	mov	r6, r0
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d1e0      	bne.n	800aa60 <__ssputs_r+0x5c>
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	6921      	ldr	r1, [r4, #16]
 800aaa2:	f7ff fb31 	bl	800a108 <_free_r>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	f8ca 3000 	str.w	r3, [sl]
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295
 800aab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	e7e9      	b.n	800aa8e <__ssputs_r+0x8a>
	...

0800aabc <_svfiprintf_r>:
 800aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	4698      	mov	r8, r3
 800aac2:	898b      	ldrh	r3, [r1, #12]
 800aac4:	4607      	mov	r7, r0
 800aac6:	061b      	lsls	r3, r3, #24
 800aac8:	460d      	mov	r5, r1
 800aaca:	4614      	mov	r4, r2
 800aacc:	b09d      	sub	sp, #116	@ 0x74
 800aace:	d510      	bpl.n	800aaf2 <_svfiprintf_r+0x36>
 800aad0:	690b      	ldr	r3, [r1, #16]
 800aad2:	b973      	cbnz	r3, 800aaf2 <_svfiprintf_r+0x36>
 800aad4:	2140      	movs	r1, #64	@ 0x40
 800aad6:	f7ff fb89 	bl	800a1ec <_malloc_r>
 800aada:	6028      	str	r0, [r5, #0]
 800aadc:	6128      	str	r0, [r5, #16]
 800aade:	b930      	cbnz	r0, 800aaee <_svfiprintf_r+0x32>
 800aae0:	230c      	movs	r3, #12
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	b01d      	add	sp, #116	@ 0x74
 800aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaee:	2340      	movs	r3, #64	@ 0x40
 800aaf0:	616b      	str	r3, [r5, #20]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf6:	2320      	movs	r3, #32
 800aaf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aafc:	2330      	movs	r3, #48	@ 0x30
 800aafe:	f04f 0901 	mov.w	r9, #1
 800ab02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800aca0 <_svfiprintf_r+0x1e4>
 800ab0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab0e:	4623      	mov	r3, r4
 800ab10:	469a      	mov	sl, r3
 800ab12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab16:	b10a      	cbz	r2, 800ab1c <_svfiprintf_r+0x60>
 800ab18:	2a25      	cmp	r2, #37	@ 0x25
 800ab1a:	d1f9      	bne.n	800ab10 <_svfiprintf_r+0x54>
 800ab1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab20:	d00b      	beq.n	800ab3a <_svfiprintf_r+0x7e>
 800ab22:	465b      	mov	r3, fp
 800ab24:	4622      	mov	r2, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7ff ff6b 	bl	800aa04 <__ssputs_r>
 800ab2e:	3001      	adds	r0, #1
 800ab30:	f000 80a7 	beq.w	800ac82 <_svfiprintf_r+0x1c6>
 800ab34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab36:	445a      	add	r2, fp
 800ab38:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 809f 	beq.w	800ac82 <_svfiprintf_r+0x1c6>
 800ab44:	2300      	movs	r3, #0
 800ab46:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab4e:	f10a 0a01 	add.w	sl, sl, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	9307      	str	r3, [sp, #28]
 800ab56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab5c:	4654      	mov	r4, sl
 800ab5e:	2205      	movs	r2, #5
 800ab60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab64:	484e      	ldr	r0, [pc, #312]	@ (800aca0 <_svfiprintf_r+0x1e4>)
 800ab66:	f7fe fc60 	bl	800942a <memchr>
 800ab6a:	9a04      	ldr	r2, [sp, #16]
 800ab6c:	b9d8      	cbnz	r0, 800aba6 <_svfiprintf_r+0xea>
 800ab6e:	06d0      	lsls	r0, r2, #27
 800ab70:	bf44      	itt	mi
 800ab72:	2320      	movmi	r3, #32
 800ab74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab78:	0711      	lsls	r1, r2, #28
 800ab7a:	bf44      	itt	mi
 800ab7c:	232b      	movmi	r3, #43	@ 0x2b
 800ab7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab82:	f89a 3000 	ldrb.w	r3, [sl]
 800ab86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab88:	d015      	beq.n	800abb6 <_svfiprintf_r+0xfa>
 800ab8a:	4654      	mov	r4, sl
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	f04f 0c0a 	mov.w	ip, #10
 800ab92:	9a07      	ldr	r2, [sp, #28]
 800ab94:	4621      	mov	r1, r4
 800ab96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab9a:	3b30      	subs	r3, #48	@ 0x30
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d94b      	bls.n	800ac38 <_svfiprintf_r+0x17c>
 800aba0:	b1b0      	cbz	r0, 800abd0 <_svfiprintf_r+0x114>
 800aba2:	9207      	str	r2, [sp, #28]
 800aba4:	e014      	b.n	800abd0 <_svfiprintf_r+0x114>
 800aba6:	eba0 0308 	sub.w	r3, r0, r8
 800abaa:	fa09 f303 	lsl.w	r3, r9, r3
 800abae:	4313      	orrs	r3, r2
 800abb0:	46a2      	mov	sl, r4
 800abb2:	9304      	str	r3, [sp, #16]
 800abb4:	e7d2      	b.n	800ab5c <_svfiprintf_r+0xa0>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	1d19      	adds	r1, r3, #4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	9103      	str	r1, [sp, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfbb      	ittet	lt
 800abc2:	425b      	neglt	r3, r3
 800abc4:	f042 0202 	orrlt.w	r2, r2, #2
 800abc8:	9307      	strge	r3, [sp, #28]
 800abca:	9307      	strlt	r3, [sp, #28]
 800abcc:	bfb8      	it	lt
 800abce:	9204      	strlt	r2, [sp, #16]
 800abd0:	7823      	ldrb	r3, [r4, #0]
 800abd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800abd4:	d10a      	bne.n	800abec <_svfiprintf_r+0x130>
 800abd6:	7863      	ldrb	r3, [r4, #1]
 800abd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abda:	d132      	bne.n	800ac42 <_svfiprintf_r+0x186>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	3402      	adds	r4, #2
 800abe0:	1d1a      	adds	r2, r3, #4
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	9203      	str	r2, [sp, #12]
 800abe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abea:	9305      	str	r3, [sp, #20]
 800abec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800aca4 <_svfiprintf_r+0x1e8>
 800abf0:	2203      	movs	r2, #3
 800abf2:	4650      	mov	r0, sl
 800abf4:	7821      	ldrb	r1, [r4, #0]
 800abf6:	f7fe fc18 	bl	800942a <memchr>
 800abfa:	b138      	cbz	r0, 800ac0c <_svfiprintf_r+0x150>
 800abfc:	2240      	movs	r2, #64	@ 0x40
 800abfe:	9b04      	ldr	r3, [sp, #16]
 800ac00:	eba0 000a 	sub.w	r0, r0, sl
 800ac04:	4082      	lsls	r2, r0
 800ac06:	4313      	orrs	r3, r2
 800ac08:	3401      	adds	r4, #1
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac10:	2206      	movs	r2, #6
 800ac12:	4825      	ldr	r0, [pc, #148]	@ (800aca8 <_svfiprintf_r+0x1ec>)
 800ac14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac18:	f7fe fc07 	bl	800942a <memchr>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d036      	beq.n	800ac8e <_svfiprintf_r+0x1d2>
 800ac20:	4b22      	ldr	r3, [pc, #136]	@ (800acac <_svfiprintf_r+0x1f0>)
 800ac22:	bb1b      	cbnz	r3, 800ac6c <_svfiprintf_r+0x1b0>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	3307      	adds	r3, #7
 800ac28:	f023 0307 	bic.w	r3, r3, #7
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	9303      	str	r3, [sp, #12]
 800ac30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac32:	4433      	add	r3, r6
 800ac34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac36:	e76a      	b.n	800ab0e <_svfiprintf_r+0x52>
 800ac38:	460c      	mov	r4, r1
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac40:	e7a8      	b.n	800ab94 <_svfiprintf_r+0xd8>
 800ac42:	2300      	movs	r3, #0
 800ac44:	f04f 0c0a 	mov.w	ip, #10
 800ac48:	4619      	mov	r1, r3
 800ac4a:	3401      	adds	r4, #1
 800ac4c:	9305      	str	r3, [sp, #20]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac54:	3a30      	subs	r2, #48	@ 0x30
 800ac56:	2a09      	cmp	r2, #9
 800ac58:	d903      	bls.n	800ac62 <_svfiprintf_r+0x1a6>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0c6      	beq.n	800abec <_svfiprintf_r+0x130>
 800ac5e:	9105      	str	r1, [sp, #20]
 800ac60:	e7c4      	b.n	800abec <_svfiprintf_r+0x130>
 800ac62:	4604      	mov	r4, r0
 800ac64:	2301      	movs	r3, #1
 800ac66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac6a:	e7f0      	b.n	800ac4e <_svfiprintf_r+0x192>
 800ac6c:	ab03      	add	r3, sp, #12
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	462a      	mov	r2, r5
 800ac72:	4638      	mov	r0, r7
 800ac74:	4b0e      	ldr	r3, [pc, #56]	@ (800acb0 <_svfiprintf_r+0x1f4>)
 800ac76:	a904      	add	r1, sp, #16
 800ac78:	f7fd fe0c 	bl	8008894 <_printf_float>
 800ac7c:	1c42      	adds	r2, r0, #1
 800ac7e:	4606      	mov	r6, r0
 800ac80:	d1d6      	bne.n	800ac30 <_svfiprintf_r+0x174>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	065b      	lsls	r3, r3, #25
 800ac86:	f53f af2d 	bmi.w	800aae4 <_svfiprintf_r+0x28>
 800ac8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac8c:	e72c      	b.n	800aae8 <_svfiprintf_r+0x2c>
 800ac8e:	ab03      	add	r3, sp, #12
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	462a      	mov	r2, r5
 800ac94:	4638      	mov	r0, r7
 800ac96:	4b06      	ldr	r3, [pc, #24]	@ (800acb0 <_svfiprintf_r+0x1f4>)
 800ac98:	a904      	add	r1, sp, #16
 800ac9a:	f7fe f899 	bl	8008dd0 <_printf_i>
 800ac9e:	e7ed      	b.n	800ac7c <_svfiprintf_r+0x1c0>
 800aca0:	0800d140 	.word	0x0800d140
 800aca4:	0800d146 	.word	0x0800d146
 800aca8:	0800d14a 	.word	0x0800d14a
 800acac:	08008895 	.word	0x08008895
 800acb0:	0800aa05 	.word	0x0800aa05

0800acb4 <__sfputc_r>:
 800acb4:	6893      	ldr	r3, [r2, #8]
 800acb6:	b410      	push	{r4}
 800acb8:	3b01      	subs	r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	6093      	str	r3, [r2, #8]
 800acbe:	da07      	bge.n	800acd0 <__sfputc_r+0x1c>
 800acc0:	6994      	ldr	r4, [r2, #24]
 800acc2:	42a3      	cmp	r3, r4
 800acc4:	db01      	blt.n	800acca <__sfputc_r+0x16>
 800acc6:	290a      	cmp	r1, #10
 800acc8:	d102      	bne.n	800acd0 <__sfputc_r+0x1c>
 800acca:	bc10      	pop	{r4}
 800accc:	f000 b9da 	b.w	800b084 <__swbuf_r>
 800acd0:	6813      	ldr	r3, [r2, #0]
 800acd2:	1c58      	adds	r0, r3, #1
 800acd4:	6010      	str	r0, [r2, #0]
 800acd6:	7019      	strb	r1, [r3, #0]
 800acd8:	4608      	mov	r0, r1
 800acda:	bc10      	pop	{r4}
 800acdc:	4770      	bx	lr

0800acde <__sfputs_r>:
 800acde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace0:	4606      	mov	r6, r0
 800ace2:	460f      	mov	r7, r1
 800ace4:	4614      	mov	r4, r2
 800ace6:	18d5      	adds	r5, r2, r3
 800ace8:	42ac      	cmp	r4, r5
 800acea:	d101      	bne.n	800acf0 <__sfputs_r+0x12>
 800acec:	2000      	movs	r0, #0
 800acee:	e007      	b.n	800ad00 <__sfputs_r+0x22>
 800acf0:	463a      	mov	r2, r7
 800acf2:	4630      	mov	r0, r6
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	f7ff ffdc 	bl	800acb4 <__sfputc_r>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d1f3      	bne.n	800ace8 <__sfputs_r+0xa>
 800ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad04 <_vfiprintf_r>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	460d      	mov	r5, r1
 800ad0a:	4614      	mov	r4, r2
 800ad0c:	4698      	mov	r8, r3
 800ad0e:	4606      	mov	r6, r0
 800ad10:	b09d      	sub	sp, #116	@ 0x74
 800ad12:	b118      	cbz	r0, 800ad1c <_vfiprintf_r+0x18>
 800ad14:	6a03      	ldr	r3, [r0, #32]
 800ad16:	b90b      	cbnz	r3, 800ad1c <_vfiprintf_r+0x18>
 800ad18:	f7fe fa06 	bl	8009128 <__sinit>
 800ad1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad1e:	07d9      	lsls	r1, r3, #31
 800ad20:	d405      	bmi.n	800ad2e <_vfiprintf_r+0x2a>
 800ad22:	89ab      	ldrh	r3, [r5, #12]
 800ad24:	059a      	lsls	r2, r3, #22
 800ad26:	d402      	bmi.n	800ad2e <_vfiprintf_r+0x2a>
 800ad28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad2a:	f7fe fb7c 	bl	8009426 <__retarget_lock_acquire_recursive>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	071b      	lsls	r3, r3, #28
 800ad32:	d501      	bpl.n	800ad38 <_vfiprintf_r+0x34>
 800ad34:	692b      	ldr	r3, [r5, #16]
 800ad36:	b99b      	cbnz	r3, 800ad60 <_vfiprintf_r+0x5c>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f000 f9e0 	bl	800b100 <__swsetup_r>
 800ad40:	b170      	cbz	r0, 800ad60 <_vfiprintf_r+0x5c>
 800ad42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad44:	07dc      	lsls	r4, r3, #31
 800ad46:	d504      	bpl.n	800ad52 <_vfiprintf_r+0x4e>
 800ad48:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4c:	b01d      	add	sp, #116	@ 0x74
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	0598      	lsls	r0, r3, #22
 800ad56:	d4f7      	bmi.n	800ad48 <_vfiprintf_r+0x44>
 800ad58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad5a:	f7fe fb65 	bl	8009428 <__retarget_lock_release_recursive>
 800ad5e:	e7f3      	b.n	800ad48 <_vfiprintf_r+0x44>
 800ad60:	2300      	movs	r3, #0
 800ad62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad64:	2320      	movs	r3, #32
 800ad66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad6a:	2330      	movs	r3, #48	@ 0x30
 800ad6c:	f04f 0901 	mov.w	r9, #1
 800ad70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800af20 <_vfiprintf_r+0x21c>
 800ad78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad7c:	4623      	mov	r3, r4
 800ad7e:	469a      	mov	sl, r3
 800ad80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad84:	b10a      	cbz	r2, 800ad8a <_vfiprintf_r+0x86>
 800ad86:	2a25      	cmp	r2, #37	@ 0x25
 800ad88:	d1f9      	bne.n	800ad7e <_vfiprintf_r+0x7a>
 800ad8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ad8e:	d00b      	beq.n	800ada8 <_vfiprintf_r+0xa4>
 800ad90:	465b      	mov	r3, fp
 800ad92:	4622      	mov	r2, r4
 800ad94:	4629      	mov	r1, r5
 800ad96:	4630      	mov	r0, r6
 800ad98:	f7ff ffa1 	bl	800acde <__sfputs_r>
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	f000 80a7 	beq.w	800aef0 <_vfiprintf_r+0x1ec>
 800ada2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ada4:	445a      	add	r2, fp
 800ada6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ada8:	f89a 3000 	ldrb.w	r3, [sl]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 809f 	beq.w	800aef0 <_vfiprintf_r+0x1ec>
 800adb2:	2300      	movs	r3, #0
 800adb4:	f04f 32ff 	mov.w	r2, #4294967295
 800adb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adbc:	f10a 0a01 	add.w	sl, sl, #1
 800adc0:	9304      	str	r3, [sp, #16]
 800adc2:	9307      	str	r3, [sp, #28]
 800adc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800adca:	4654      	mov	r4, sl
 800adcc:	2205      	movs	r2, #5
 800adce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add2:	4853      	ldr	r0, [pc, #332]	@ (800af20 <_vfiprintf_r+0x21c>)
 800add4:	f7fe fb29 	bl	800942a <memchr>
 800add8:	9a04      	ldr	r2, [sp, #16]
 800adda:	b9d8      	cbnz	r0, 800ae14 <_vfiprintf_r+0x110>
 800addc:	06d1      	lsls	r1, r2, #27
 800adde:	bf44      	itt	mi
 800ade0:	2320      	movmi	r3, #32
 800ade2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ade6:	0713      	lsls	r3, r2, #28
 800ade8:	bf44      	itt	mi
 800adea:	232b      	movmi	r3, #43	@ 0x2b
 800adec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adf0:	f89a 3000 	ldrb.w	r3, [sl]
 800adf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800adf6:	d015      	beq.n	800ae24 <_vfiprintf_r+0x120>
 800adf8:	4654      	mov	r4, sl
 800adfa:	2000      	movs	r0, #0
 800adfc:	f04f 0c0a 	mov.w	ip, #10
 800ae00:	9a07      	ldr	r2, [sp, #28]
 800ae02:	4621      	mov	r1, r4
 800ae04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae08:	3b30      	subs	r3, #48	@ 0x30
 800ae0a:	2b09      	cmp	r3, #9
 800ae0c:	d94b      	bls.n	800aea6 <_vfiprintf_r+0x1a2>
 800ae0e:	b1b0      	cbz	r0, 800ae3e <_vfiprintf_r+0x13a>
 800ae10:	9207      	str	r2, [sp, #28]
 800ae12:	e014      	b.n	800ae3e <_vfiprintf_r+0x13a>
 800ae14:	eba0 0308 	sub.w	r3, r0, r8
 800ae18:	fa09 f303 	lsl.w	r3, r9, r3
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	46a2      	mov	sl, r4
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	e7d2      	b.n	800adca <_vfiprintf_r+0xc6>
 800ae24:	9b03      	ldr	r3, [sp, #12]
 800ae26:	1d19      	adds	r1, r3, #4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	9103      	str	r1, [sp, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bfbb      	ittet	lt
 800ae30:	425b      	neglt	r3, r3
 800ae32:	f042 0202 	orrlt.w	r2, r2, #2
 800ae36:	9307      	strge	r3, [sp, #28]
 800ae38:	9307      	strlt	r3, [sp, #28]
 800ae3a:	bfb8      	it	lt
 800ae3c:	9204      	strlt	r2, [sp, #16]
 800ae3e:	7823      	ldrb	r3, [r4, #0]
 800ae40:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae42:	d10a      	bne.n	800ae5a <_vfiprintf_r+0x156>
 800ae44:	7863      	ldrb	r3, [r4, #1]
 800ae46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae48:	d132      	bne.n	800aeb0 <_vfiprintf_r+0x1ac>
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	3402      	adds	r4, #2
 800ae4e:	1d1a      	adds	r2, r3, #4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	9203      	str	r2, [sp, #12]
 800ae54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae58:	9305      	str	r3, [sp, #20]
 800ae5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800af24 <_vfiprintf_r+0x220>
 800ae5e:	2203      	movs	r2, #3
 800ae60:	4650      	mov	r0, sl
 800ae62:	7821      	ldrb	r1, [r4, #0]
 800ae64:	f7fe fae1 	bl	800942a <memchr>
 800ae68:	b138      	cbz	r0, 800ae7a <_vfiprintf_r+0x176>
 800ae6a:	2240      	movs	r2, #64	@ 0x40
 800ae6c:	9b04      	ldr	r3, [sp, #16]
 800ae6e:	eba0 000a 	sub.w	r0, r0, sl
 800ae72:	4082      	lsls	r2, r0
 800ae74:	4313      	orrs	r3, r2
 800ae76:	3401      	adds	r4, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7e:	2206      	movs	r2, #6
 800ae80:	4829      	ldr	r0, [pc, #164]	@ (800af28 <_vfiprintf_r+0x224>)
 800ae82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae86:	f7fe fad0 	bl	800942a <memchr>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d03f      	beq.n	800af0e <_vfiprintf_r+0x20a>
 800ae8e:	4b27      	ldr	r3, [pc, #156]	@ (800af2c <_vfiprintf_r+0x228>)
 800ae90:	bb1b      	cbnz	r3, 800aeda <_vfiprintf_r+0x1d6>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	3307      	adds	r3, #7
 800ae96:	f023 0307 	bic.w	r3, r3, #7
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea0:	443b      	add	r3, r7
 800aea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea4:	e76a      	b.n	800ad7c <_vfiprintf_r+0x78>
 800aea6:	460c      	mov	r4, r1
 800aea8:	2001      	movs	r0, #1
 800aeaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeae:	e7a8      	b.n	800ae02 <_vfiprintf_r+0xfe>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f04f 0c0a 	mov.w	ip, #10
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	3401      	adds	r4, #1
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	4620      	mov	r0, r4
 800aebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec2:	3a30      	subs	r2, #48	@ 0x30
 800aec4:	2a09      	cmp	r2, #9
 800aec6:	d903      	bls.n	800aed0 <_vfiprintf_r+0x1cc>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0c6      	beq.n	800ae5a <_vfiprintf_r+0x156>
 800aecc:	9105      	str	r1, [sp, #20]
 800aece:	e7c4      	b.n	800ae5a <_vfiprintf_r+0x156>
 800aed0:	4604      	mov	r4, r0
 800aed2:	2301      	movs	r3, #1
 800aed4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aed8:	e7f0      	b.n	800aebc <_vfiprintf_r+0x1b8>
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	462a      	mov	r2, r5
 800aee0:	4630      	mov	r0, r6
 800aee2:	4b13      	ldr	r3, [pc, #76]	@ (800af30 <_vfiprintf_r+0x22c>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	f7fd fcd5 	bl	8008894 <_printf_float>
 800aeea:	4607      	mov	r7, r0
 800aeec:	1c78      	adds	r0, r7, #1
 800aeee:	d1d6      	bne.n	800ae9e <_vfiprintf_r+0x19a>
 800aef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aef2:	07d9      	lsls	r1, r3, #31
 800aef4:	d405      	bmi.n	800af02 <_vfiprintf_r+0x1fe>
 800aef6:	89ab      	ldrh	r3, [r5, #12]
 800aef8:	059a      	lsls	r2, r3, #22
 800aefa:	d402      	bmi.n	800af02 <_vfiprintf_r+0x1fe>
 800aefc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aefe:	f7fe fa93 	bl	8009428 <__retarget_lock_release_recursive>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	065b      	lsls	r3, r3, #25
 800af06:	f53f af1f 	bmi.w	800ad48 <_vfiprintf_r+0x44>
 800af0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af0c:	e71e      	b.n	800ad4c <_vfiprintf_r+0x48>
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	462a      	mov	r2, r5
 800af14:	4630      	mov	r0, r6
 800af16:	4b06      	ldr	r3, [pc, #24]	@ (800af30 <_vfiprintf_r+0x22c>)
 800af18:	a904      	add	r1, sp, #16
 800af1a:	f7fd ff59 	bl	8008dd0 <_printf_i>
 800af1e:	e7e4      	b.n	800aeea <_vfiprintf_r+0x1e6>
 800af20:	0800d140 	.word	0x0800d140
 800af24:	0800d146 	.word	0x0800d146
 800af28:	0800d14a 	.word	0x0800d14a
 800af2c:	08008895 	.word	0x08008895
 800af30:	0800acdf 	.word	0x0800acdf

0800af34 <__sflush_r>:
 800af34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	0716      	lsls	r6, r2, #28
 800af3c:	4605      	mov	r5, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	d454      	bmi.n	800afec <__sflush_r+0xb8>
 800af42:	684b      	ldr	r3, [r1, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	dc02      	bgt.n	800af4e <__sflush_r+0x1a>
 800af48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd48      	ble.n	800afe0 <__sflush_r+0xac>
 800af4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af50:	2e00      	cmp	r6, #0
 800af52:	d045      	beq.n	800afe0 <__sflush_r+0xac>
 800af54:	2300      	movs	r3, #0
 800af56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af5a:	682f      	ldr	r7, [r5, #0]
 800af5c:	6a21      	ldr	r1, [r4, #32]
 800af5e:	602b      	str	r3, [r5, #0]
 800af60:	d030      	beq.n	800afc4 <__sflush_r+0x90>
 800af62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	0759      	lsls	r1, r3, #29
 800af68:	d505      	bpl.n	800af76 <__sflush_r+0x42>
 800af6a:	6863      	ldr	r3, [r4, #4]
 800af6c:	1ad2      	subs	r2, r2, r3
 800af6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af70:	b10b      	cbz	r3, 800af76 <__sflush_r+0x42>
 800af72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af74:	1ad2      	subs	r2, r2, r3
 800af76:	2300      	movs	r3, #0
 800af78:	4628      	mov	r0, r5
 800af7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af7c:	6a21      	ldr	r1, [r4, #32]
 800af7e:	47b0      	blx	r6
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	d106      	bne.n	800af94 <__sflush_r+0x60>
 800af86:	6829      	ldr	r1, [r5, #0]
 800af88:	291d      	cmp	r1, #29
 800af8a:	d82b      	bhi.n	800afe4 <__sflush_r+0xb0>
 800af8c:	4a28      	ldr	r2, [pc, #160]	@ (800b030 <__sflush_r+0xfc>)
 800af8e:	410a      	asrs	r2, r1
 800af90:	07d6      	lsls	r6, r2, #31
 800af92:	d427      	bmi.n	800afe4 <__sflush_r+0xb0>
 800af94:	2200      	movs	r2, #0
 800af96:	6062      	str	r2, [r4, #4]
 800af98:	6922      	ldr	r2, [r4, #16]
 800af9a:	04d9      	lsls	r1, r3, #19
 800af9c:	6022      	str	r2, [r4, #0]
 800af9e:	d504      	bpl.n	800afaa <__sflush_r+0x76>
 800afa0:	1c42      	adds	r2, r0, #1
 800afa2:	d101      	bne.n	800afa8 <__sflush_r+0x74>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b903      	cbnz	r3, 800afaa <__sflush_r+0x76>
 800afa8:	6560      	str	r0, [r4, #84]	@ 0x54
 800afaa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afac:	602f      	str	r7, [r5, #0]
 800afae:	b1b9      	cbz	r1, 800afe0 <__sflush_r+0xac>
 800afb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afb4:	4299      	cmp	r1, r3
 800afb6:	d002      	beq.n	800afbe <__sflush_r+0x8a>
 800afb8:	4628      	mov	r0, r5
 800afba:	f7ff f8a5 	bl	800a108 <_free_r>
 800afbe:	2300      	movs	r3, #0
 800afc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800afc2:	e00d      	b.n	800afe0 <__sflush_r+0xac>
 800afc4:	2301      	movs	r3, #1
 800afc6:	4628      	mov	r0, r5
 800afc8:	47b0      	blx	r6
 800afca:	4602      	mov	r2, r0
 800afcc:	1c50      	adds	r0, r2, #1
 800afce:	d1c9      	bne.n	800af64 <__sflush_r+0x30>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0c6      	beq.n	800af64 <__sflush_r+0x30>
 800afd6:	2b1d      	cmp	r3, #29
 800afd8:	d001      	beq.n	800afde <__sflush_r+0xaa>
 800afda:	2b16      	cmp	r3, #22
 800afdc:	d11d      	bne.n	800b01a <__sflush_r+0xe6>
 800afde:	602f      	str	r7, [r5, #0]
 800afe0:	2000      	movs	r0, #0
 800afe2:	e021      	b.n	800b028 <__sflush_r+0xf4>
 800afe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afe8:	b21b      	sxth	r3, r3
 800afea:	e01a      	b.n	800b022 <__sflush_r+0xee>
 800afec:	690f      	ldr	r7, [r1, #16]
 800afee:	2f00      	cmp	r7, #0
 800aff0:	d0f6      	beq.n	800afe0 <__sflush_r+0xac>
 800aff2:	0793      	lsls	r3, r2, #30
 800aff4:	bf18      	it	ne
 800aff6:	2300      	movne	r3, #0
 800aff8:	680e      	ldr	r6, [r1, #0]
 800affa:	bf08      	it	eq
 800affc:	694b      	ldreq	r3, [r1, #20]
 800affe:	1bf6      	subs	r6, r6, r7
 800b000:	600f      	str	r7, [r1, #0]
 800b002:	608b      	str	r3, [r1, #8]
 800b004:	2e00      	cmp	r6, #0
 800b006:	ddeb      	ble.n	800afe0 <__sflush_r+0xac>
 800b008:	4633      	mov	r3, r6
 800b00a:	463a      	mov	r2, r7
 800b00c:	4628      	mov	r0, r5
 800b00e:	6a21      	ldr	r1, [r4, #32]
 800b010:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b014:	47e0      	blx	ip
 800b016:	2800      	cmp	r0, #0
 800b018:	dc07      	bgt.n	800b02a <__sflush_r+0xf6>
 800b01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b022:	f04f 30ff 	mov.w	r0, #4294967295
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02a:	4407      	add	r7, r0
 800b02c:	1a36      	subs	r6, r6, r0
 800b02e:	e7e9      	b.n	800b004 <__sflush_r+0xd0>
 800b030:	dfbffffe 	.word	0xdfbffffe

0800b034 <_fflush_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b913      	cbnz	r3, 800b044 <_fflush_r+0x10>
 800b03e:	2500      	movs	r5, #0
 800b040:	4628      	mov	r0, r5
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	b118      	cbz	r0, 800b04e <_fflush_r+0x1a>
 800b046:	6a03      	ldr	r3, [r0, #32]
 800b048:	b90b      	cbnz	r3, 800b04e <_fflush_r+0x1a>
 800b04a:	f7fe f86d 	bl	8009128 <__sinit>
 800b04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0f3      	beq.n	800b03e <_fflush_r+0xa>
 800b056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b058:	07d0      	lsls	r0, r2, #31
 800b05a:	d404      	bmi.n	800b066 <_fflush_r+0x32>
 800b05c:	0599      	lsls	r1, r3, #22
 800b05e:	d402      	bmi.n	800b066 <_fflush_r+0x32>
 800b060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b062:	f7fe f9e0 	bl	8009426 <__retarget_lock_acquire_recursive>
 800b066:	4628      	mov	r0, r5
 800b068:	4621      	mov	r1, r4
 800b06a:	f7ff ff63 	bl	800af34 <__sflush_r>
 800b06e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b070:	4605      	mov	r5, r0
 800b072:	07da      	lsls	r2, r3, #31
 800b074:	d4e4      	bmi.n	800b040 <_fflush_r+0xc>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	059b      	lsls	r3, r3, #22
 800b07a:	d4e1      	bmi.n	800b040 <_fflush_r+0xc>
 800b07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b07e:	f7fe f9d3 	bl	8009428 <__retarget_lock_release_recursive>
 800b082:	e7dd      	b.n	800b040 <_fflush_r+0xc>

0800b084 <__swbuf_r>:
 800b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b086:	460e      	mov	r6, r1
 800b088:	4614      	mov	r4, r2
 800b08a:	4605      	mov	r5, r0
 800b08c:	b118      	cbz	r0, 800b096 <__swbuf_r+0x12>
 800b08e:	6a03      	ldr	r3, [r0, #32]
 800b090:	b90b      	cbnz	r3, 800b096 <__swbuf_r+0x12>
 800b092:	f7fe f849 	bl	8009128 <__sinit>
 800b096:	69a3      	ldr	r3, [r4, #24]
 800b098:	60a3      	str	r3, [r4, #8]
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	071a      	lsls	r2, r3, #28
 800b09e:	d501      	bpl.n	800b0a4 <__swbuf_r+0x20>
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	b943      	cbnz	r3, 800b0b6 <__swbuf_r+0x32>
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f000 f82a 	bl	800b100 <__swsetup_r>
 800b0ac:	b118      	cbz	r0, 800b0b6 <__swbuf_r+0x32>
 800b0ae:	f04f 37ff 	mov.w	r7, #4294967295
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b6:	6823      	ldr	r3, [r4, #0]
 800b0b8:	6922      	ldr	r2, [r4, #16]
 800b0ba:	b2f6      	uxtb	r6, r6
 800b0bc:	1a98      	subs	r0, r3, r2
 800b0be:	6963      	ldr	r3, [r4, #20]
 800b0c0:	4637      	mov	r7, r6
 800b0c2:	4283      	cmp	r3, r0
 800b0c4:	dc05      	bgt.n	800b0d2 <__swbuf_r+0x4e>
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	f7ff ffb3 	bl	800b034 <_fflush_r>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d1ed      	bne.n	800b0ae <__swbuf_r+0x2a>
 800b0d2:	68a3      	ldr	r3, [r4, #8]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	60a3      	str	r3, [r4, #8]
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	6022      	str	r2, [r4, #0]
 800b0de:	701e      	strb	r6, [r3, #0]
 800b0e0:	6962      	ldr	r2, [r4, #20]
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d004      	beq.n	800b0f2 <__swbuf_r+0x6e>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	07db      	lsls	r3, r3, #31
 800b0ec:	d5e1      	bpl.n	800b0b2 <__swbuf_r+0x2e>
 800b0ee:	2e0a      	cmp	r6, #10
 800b0f0:	d1df      	bne.n	800b0b2 <__swbuf_r+0x2e>
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f7ff ff9d 	bl	800b034 <_fflush_r>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d0d9      	beq.n	800b0b2 <__swbuf_r+0x2e>
 800b0fe:	e7d6      	b.n	800b0ae <__swbuf_r+0x2a>

0800b100 <__swsetup_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4b29      	ldr	r3, [pc, #164]	@ (800b1a8 <__swsetup_r+0xa8>)
 800b104:	4605      	mov	r5, r0
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	460c      	mov	r4, r1
 800b10a:	b118      	cbz	r0, 800b114 <__swsetup_r+0x14>
 800b10c:	6a03      	ldr	r3, [r0, #32]
 800b10e:	b90b      	cbnz	r3, 800b114 <__swsetup_r+0x14>
 800b110:	f7fe f80a 	bl	8009128 <__sinit>
 800b114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b118:	0719      	lsls	r1, r3, #28
 800b11a:	d422      	bmi.n	800b162 <__swsetup_r+0x62>
 800b11c:	06da      	lsls	r2, r3, #27
 800b11e:	d407      	bmi.n	800b130 <__swsetup_r+0x30>
 800b120:	2209      	movs	r2, #9
 800b122:	602a      	str	r2, [r5, #0]
 800b124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b128:	f04f 30ff 	mov.w	r0, #4294967295
 800b12c:	81a3      	strh	r3, [r4, #12]
 800b12e:	e033      	b.n	800b198 <__swsetup_r+0x98>
 800b130:	0758      	lsls	r0, r3, #29
 800b132:	d512      	bpl.n	800b15a <__swsetup_r+0x5a>
 800b134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b136:	b141      	cbz	r1, 800b14a <__swsetup_r+0x4a>
 800b138:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b13c:	4299      	cmp	r1, r3
 800b13e:	d002      	beq.n	800b146 <__swsetup_r+0x46>
 800b140:	4628      	mov	r0, r5
 800b142:	f7fe ffe1 	bl	800a108 <_free_r>
 800b146:	2300      	movs	r3, #0
 800b148:	6363      	str	r3, [r4, #52]	@ 0x34
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	2300      	movs	r3, #0
 800b154:	6063      	str	r3, [r4, #4]
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	f043 0308 	orr.w	r3, r3, #8
 800b160:	81a3      	strh	r3, [r4, #12]
 800b162:	6923      	ldr	r3, [r4, #16]
 800b164:	b94b      	cbnz	r3, 800b17a <__swsetup_r+0x7a>
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b170:	d003      	beq.n	800b17a <__swsetup_r+0x7a>
 800b172:	4621      	mov	r1, r4
 800b174:	4628      	mov	r0, r5
 800b176:	f000 f8fa 	bl	800b36e <__smakebuf_r>
 800b17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17e:	f013 0201 	ands.w	r2, r3, #1
 800b182:	d00a      	beq.n	800b19a <__swsetup_r+0x9a>
 800b184:	2200      	movs	r2, #0
 800b186:	60a2      	str	r2, [r4, #8]
 800b188:	6962      	ldr	r2, [r4, #20]
 800b18a:	4252      	negs	r2, r2
 800b18c:	61a2      	str	r2, [r4, #24]
 800b18e:	6922      	ldr	r2, [r4, #16]
 800b190:	b942      	cbnz	r2, 800b1a4 <__swsetup_r+0xa4>
 800b192:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b196:	d1c5      	bne.n	800b124 <__swsetup_r+0x24>
 800b198:	bd38      	pop	{r3, r4, r5, pc}
 800b19a:	0799      	lsls	r1, r3, #30
 800b19c:	bf58      	it	pl
 800b19e:	6962      	ldrpl	r2, [r4, #20]
 800b1a0:	60a2      	str	r2, [r4, #8]
 800b1a2:	e7f4      	b.n	800b18e <__swsetup_r+0x8e>
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	e7f7      	b.n	800b198 <__swsetup_r+0x98>
 800b1a8:	2000001c 	.word	0x2000001c

0800b1ac <memmove>:
 800b1ac:	4288      	cmp	r0, r1
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	eb01 0402 	add.w	r4, r1, r2
 800b1b4:	d902      	bls.n	800b1bc <memmove+0x10>
 800b1b6:	4284      	cmp	r4, r0
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	d807      	bhi.n	800b1cc <memmove+0x20>
 800b1bc:	1e43      	subs	r3, r0, #1
 800b1be:	42a1      	cmp	r1, r4
 800b1c0:	d008      	beq.n	800b1d4 <memmove+0x28>
 800b1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1ca:	e7f8      	b.n	800b1be <memmove+0x12>
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	4402      	add	r2, r0
 800b1d0:	428a      	cmp	r2, r1
 800b1d2:	d100      	bne.n	800b1d6 <memmove+0x2a>
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1de:	e7f7      	b.n	800b1d0 <memmove+0x24>

0800b1e0 <_sbrk_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	4d05      	ldr	r5, [pc, #20]	@ (800b1fc <_sbrk_r+0x1c>)
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	f7f8 fc06 	bl	80039fc <_sbrk>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d102      	bne.n	800b1fa <_sbrk_r+0x1a>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	b103      	cbz	r3, 800b1fa <_sbrk_r+0x1a>
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	200048f8 	.word	0x200048f8

0800b200 <__assert_func>:
 800b200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b202:	4614      	mov	r4, r2
 800b204:	461a      	mov	r2, r3
 800b206:	4b09      	ldr	r3, [pc, #36]	@ (800b22c <__assert_func+0x2c>)
 800b208:	4605      	mov	r5, r0
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68d8      	ldr	r0, [r3, #12]
 800b20e:	b954      	cbnz	r4, 800b226 <__assert_func+0x26>
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <__assert_func+0x30>)
 800b212:	461c      	mov	r4, r3
 800b214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b218:	9100      	str	r1, [sp, #0]
 800b21a:	462b      	mov	r3, r5
 800b21c:	4905      	ldr	r1, [pc, #20]	@ (800b234 <__assert_func+0x34>)
 800b21e:	f000 f86f 	bl	800b300 <fiprintf>
 800b222:	f000 f903 	bl	800b42c <abort>
 800b226:	4b04      	ldr	r3, [pc, #16]	@ (800b238 <__assert_func+0x38>)
 800b228:	e7f4      	b.n	800b214 <__assert_func+0x14>
 800b22a:	bf00      	nop
 800b22c:	2000001c 	.word	0x2000001c
 800b230:	0800d196 	.word	0x0800d196
 800b234:	0800d168 	.word	0x0800d168
 800b238:	0800d15b 	.word	0x0800d15b

0800b23c <_calloc_r>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	fba1 5402 	umull	r5, r4, r1, r2
 800b242:	b93c      	cbnz	r4, 800b254 <_calloc_r+0x18>
 800b244:	4629      	mov	r1, r5
 800b246:	f7fe ffd1 	bl	800a1ec <_malloc_r>
 800b24a:	4606      	mov	r6, r0
 800b24c:	b928      	cbnz	r0, 800b25a <_calloc_r+0x1e>
 800b24e:	2600      	movs	r6, #0
 800b250:	4630      	mov	r0, r6
 800b252:	bd70      	pop	{r4, r5, r6, pc}
 800b254:	220c      	movs	r2, #12
 800b256:	6002      	str	r2, [r0, #0]
 800b258:	e7f9      	b.n	800b24e <_calloc_r+0x12>
 800b25a:	462a      	mov	r2, r5
 800b25c:	4621      	mov	r1, r4
 800b25e:	f7fe f80e 	bl	800927e <memset>
 800b262:	e7f5      	b.n	800b250 <_calloc_r+0x14>

0800b264 <__ascii_mbtowc>:
 800b264:	b082      	sub	sp, #8
 800b266:	b901      	cbnz	r1, 800b26a <__ascii_mbtowc+0x6>
 800b268:	a901      	add	r1, sp, #4
 800b26a:	b142      	cbz	r2, 800b27e <__ascii_mbtowc+0x1a>
 800b26c:	b14b      	cbz	r3, 800b282 <__ascii_mbtowc+0x1e>
 800b26e:	7813      	ldrb	r3, [r2, #0]
 800b270:	600b      	str	r3, [r1, #0]
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	1e10      	subs	r0, r2, #0
 800b276:	bf18      	it	ne
 800b278:	2001      	movne	r0, #1
 800b27a:	b002      	add	sp, #8
 800b27c:	4770      	bx	lr
 800b27e:	4610      	mov	r0, r2
 800b280:	e7fb      	b.n	800b27a <__ascii_mbtowc+0x16>
 800b282:	f06f 0001 	mvn.w	r0, #1
 800b286:	e7f8      	b.n	800b27a <__ascii_mbtowc+0x16>

0800b288 <_realloc_r>:
 800b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b28c:	4680      	mov	r8, r0
 800b28e:	4615      	mov	r5, r2
 800b290:	460c      	mov	r4, r1
 800b292:	b921      	cbnz	r1, 800b29e <_realloc_r+0x16>
 800b294:	4611      	mov	r1, r2
 800b296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b29a:	f7fe bfa7 	b.w	800a1ec <_malloc_r>
 800b29e:	b92a      	cbnz	r2, 800b2ac <_realloc_r+0x24>
 800b2a0:	f7fe ff32 	bl	800a108 <_free_r>
 800b2a4:	2400      	movs	r4, #0
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ac:	f000 f8c5 	bl	800b43a <_malloc_usable_size_r>
 800b2b0:	4285      	cmp	r5, r0
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	d802      	bhi.n	800b2bc <_realloc_r+0x34>
 800b2b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2ba:	d8f4      	bhi.n	800b2a6 <_realloc_r+0x1e>
 800b2bc:	4629      	mov	r1, r5
 800b2be:	4640      	mov	r0, r8
 800b2c0:	f7fe ff94 	bl	800a1ec <_malloc_r>
 800b2c4:	4607      	mov	r7, r0
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d0ec      	beq.n	800b2a4 <_realloc_r+0x1c>
 800b2ca:	42b5      	cmp	r5, r6
 800b2cc:	462a      	mov	r2, r5
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	bf28      	it	cs
 800b2d2:	4632      	movcs	r2, r6
 800b2d4:	f7fe f8b7 	bl	8009446 <memcpy>
 800b2d8:	4621      	mov	r1, r4
 800b2da:	4640      	mov	r0, r8
 800b2dc:	f7fe ff14 	bl	800a108 <_free_r>
 800b2e0:	463c      	mov	r4, r7
 800b2e2:	e7e0      	b.n	800b2a6 <_realloc_r+0x1e>

0800b2e4 <__ascii_wctomb>:
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	b141      	cbz	r1, 800b2fc <__ascii_wctomb+0x18>
 800b2ea:	2aff      	cmp	r2, #255	@ 0xff
 800b2ec:	d904      	bls.n	800b2f8 <__ascii_wctomb+0x14>
 800b2ee:	228a      	movs	r2, #138	@ 0x8a
 800b2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	4770      	bx	lr
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	700a      	strb	r2, [r1, #0]
 800b2fc:	4770      	bx	lr
	...

0800b300 <fiprintf>:
 800b300:	b40e      	push	{r1, r2, r3}
 800b302:	b503      	push	{r0, r1, lr}
 800b304:	4601      	mov	r1, r0
 800b306:	ab03      	add	r3, sp, #12
 800b308:	4805      	ldr	r0, [pc, #20]	@ (800b320 <fiprintf+0x20>)
 800b30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30e:	6800      	ldr	r0, [r0, #0]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	f7ff fcf7 	bl	800ad04 <_vfiprintf_r>
 800b316:	b002      	add	sp, #8
 800b318:	f85d eb04 	ldr.w	lr, [sp], #4
 800b31c:	b003      	add	sp, #12
 800b31e:	4770      	bx	lr
 800b320:	2000001c 	.word	0x2000001c

0800b324 <__swhatbuf_r>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	460c      	mov	r4, r1
 800b328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32c:	4615      	mov	r5, r2
 800b32e:	2900      	cmp	r1, #0
 800b330:	461e      	mov	r6, r3
 800b332:	b096      	sub	sp, #88	@ 0x58
 800b334:	da0c      	bge.n	800b350 <__swhatbuf_r+0x2c>
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	2100      	movs	r1, #0
 800b33a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b33e:	bf14      	ite	ne
 800b340:	2340      	movne	r3, #64	@ 0x40
 800b342:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b346:	2000      	movs	r0, #0
 800b348:	6031      	str	r1, [r6, #0]
 800b34a:	602b      	str	r3, [r5, #0]
 800b34c:	b016      	add	sp, #88	@ 0x58
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	466a      	mov	r2, sp
 800b352:	f000 f849 	bl	800b3e8 <_fstat_r>
 800b356:	2800      	cmp	r0, #0
 800b358:	dbed      	blt.n	800b336 <__swhatbuf_r+0x12>
 800b35a:	9901      	ldr	r1, [sp, #4]
 800b35c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b360:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b364:	4259      	negs	r1, r3
 800b366:	4159      	adcs	r1, r3
 800b368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b36c:	e7eb      	b.n	800b346 <__swhatbuf_r+0x22>

0800b36e <__smakebuf_r>:
 800b36e:	898b      	ldrh	r3, [r1, #12]
 800b370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b372:	079d      	lsls	r5, r3, #30
 800b374:	4606      	mov	r6, r0
 800b376:	460c      	mov	r4, r1
 800b378:	d507      	bpl.n	800b38a <__smakebuf_r+0x1c>
 800b37a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	6123      	str	r3, [r4, #16]
 800b382:	2301      	movs	r3, #1
 800b384:	6163      	str	r3, [r4, #20]
 800b386:	b003      	add	sp, #12
 800b388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b38a:	466a      	mov	r2, sp
 800b38c:	ab01      	add	r3, sp, #4
 800b38e:	f7ff ffc9 	bl	800b324 <__swhatbuf_r>
 800b392:	9f00      	ldr	r7, [sp, #0]
 800b394:	4605      	mov	r5, r0
 800b396:	4639      	mov	r1, r7
 800b398:	4630      	mov	r0, r6
 800b39a:	f7fe ff27 	bl	800a1ec <_malloc_r>
 800b39e:	b948      	cbnz	r0, 800b3b4 <__smakebuf_r+0x46>
 800b3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a4:	059a      	lsls	r2, r3, #22
 800b3a6:	d4ee      	bmi.n	800b386 <__smakebuf_r+0x18>
 800b3a8:	f023 0303 	bic.w	r3, r3, #3
 800b3ac:	f043 0302 	orr.w	r3, r3, #2
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	e7e2      	b.n	800b37a <__smakebuf_r+0xc>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	6020      	str	r0, [r4, #0]
 800b3c4:	b15b      	cbz	r3, 800b3de <__smakebuf_r+0x70>
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3cc:	f000 f81e 	bl	800b40c <_isatty_r>
 800b3d0:	b128      	cbz	r0, 800b3de <__smakebuf_r+0x70>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	f043 0301 	orr.w	r3, r3, #1
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	431d      	orrs	r5, r3
 800b3e2:	81a5      	strh	r5, [r4, #12]
 800b3e4:	e7cf      	b.n	800b386 <__smakebuf_r+0x18>
	...

0800b3e8 <_fstat_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4d06      	ldr	r5, [pc, #24]	@ (800b408 <_fstat_r+0x20>)
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	f7f8 fadb 	bl	80039b0 <_fstat>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d102      	bne.n	800b404 <_fstat_r+0x1c>
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	b103      	cbz	r3, 800b404 <_fstat_r+0x1c>
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	bd38      	pop	{r3, r4, r5, pc}
 800b406:	bf00      	nop
 800b408:	200048f8 	.word	0x200048f8

0800b40c <_isatty_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	2300      	movs	r3, #0
 800b410:	4d05      	ldr	r5, [pc, #20]	@ (800b428 <_isatty_r+0x1c>)
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	f7f8 fad9 	bl	80039ce <_isatty>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_isatty_r+0x1a>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_isatty_r+0x1a>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	200048f8 	.word	0x200048f8

0800b42c <abort>:
 800b42c:	2006      	movs	r0, #6
 800b42e:	b508      	push	{r3, lr}
 800b430:	f000 f834 	bl	800b49c <raise>
 800b434:	2001      	movs	r0, #1
 800b436:	f7f8 fa88 	bl	800394a <_exit>

0800b43a <_malloc_usable_size_r>:
 800b43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b43e:	1f18      	subs	r0, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	bfbc      	itt	lt
 800b444:	580b      	ldrlt	r3, [r1, r0]
 800b446:	18c0      	addlt	r0, r0, r3
 800b448:	4770      	bx	lr

0800b44a <_raise_r>:
 800b44a:	291f      	cmp	r1, #31
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4605      	mov	r5, r0
 800b450:	460c      	mov	r4, r1
 800b452:	d904      	bls.n	800b45e <_raise_r+0x14>
 800b454:	2316      	movs	r3, #22
 800b456:	6003      	str	r3, [r0, #0]
 800b458:	f04f 30ff 	mov.w	r0, #4294967295
 800b45c:	bd38      	pop	{r3, r4, r5, pc}
 800b45e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b460:	b112      	cbz	r2, 800b468 <_raise_r+0x1e>
 800b462:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b466:	b94b      	cbnz	r3, 800b47c <_raise_r+0x32>
 800b468:	4628      	mov	r0, r5
 800b46a:	f000 f831 	bl	800b4d0 <_getpid_r>
 800b46e:	4622      	mov	r2, r4
 800b470:	4601      	mov	r1, r0
 800b472:	4628      	mov	r0, r5
 800b474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b478:	f000 b818 	b.w	800b4ac <_kill_r>
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d00a      	beq.n	800b496 <_raise_r+0x4c>
 800b480:	1c59      	adds	r1, r3, #1
 800b482:	d103      	bne.n	800b48c <_raise_r+0x42>
 800b484:	2316      	movs	r3, #22
 800b486:	6003      	str	r3, [r0, #0]
 800b488:	2001      	movs	r0, #1
 800b48a:	e7e7      	b.n	800b45c <_raise_r+0x12>
 800b48c:	2100      	movs	r1, #0
 800b48e:	4620      	mov	r0, r4
 800b490:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b494:	4798      	blx	r3
 800b496:	2000      	movs	r0, #0
 800b498:	e7e0      	b.n	800b45c <_raise_r+0x12>
	...

0800b49c <raise>:
 800b49c:	4b02      	ldr	r3, [pc, #8]	@ (800b4a8 <raise+0xc>)
 800b49e:	4601      	mov	r1, r0
 800b4a0:	6818      	ldr	r0, [r3, #0]
 800b4a2:	f7ff bfd2 	b.w	800b44a <_raise_r>
 800b4a6:	bf00      	nop
 800b4a8:	2000001c 	.word	0x2000001c

0800b4ac <_kill_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4d06      	ldr	r5, [pc, #24]	@ (800b4cc <_kill_r+0x20>)
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	f7f8 fa36 	bl	800392a <_kill>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	d102      	bne.n	800b4c8 <_kill_r+0x1c>
 800b4c2:	682b      	ldr	r3, [r5, #0]
 800b4c4:	b103      	cbz	r3, 800b4c8 <_kill_r+0x1c>
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	bf00      	nop
 800b4cc:	200048f8 	.word	0x200048f8

0800b4d0 <_getpid_r>:
 800b4d0:	f7f8 ba24 	b.w	800391c <_getpid>

0800b4d4 <pow>:
 800b4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d8:	4614      	mov	r4, r2
 800b4da:	461d      	mov	r5, r3
 800b4dc:	4680      	mov	r8, r0
 800b4de:	4689      	mov	r9, r1
 800b4e0:	f000 fa42 	bl	800b968 <__ieee754_pow>
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f5 fa8c 	bl	8000a0c <__aeabi_dcmpun>
 800b4f4:	bbc8      	cbnz	r0, 800b56a <pow+0x96>
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	f7f5 fa53 	bl	80009a8 <__aeabi_dcmpeq>
 800b502:	b1b8      	cbz	r0, 800b534 <pow+0x60>
 800b504:	2200      	movs	r2, #0
 800b506:	2300      	movs	r3, #0
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7f5 fa4c 	bl	80009a8 <__aeabi_dcmpeq>
 800b510:	2800      	cmp	r0, #0
 800b512:	d141      	bne.n	800b598 <pow+0xc4>
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f000 f868 	bl	800b5ec <finite>
 800b51c:	b328      	cbz	r0, 800b56a <pow+0x96>
 800b51e:	2200      	movs	r2, #0
 800b520:	2300      	movs	r3, #0
 800b522:	4620      	mov	r0, r4
 800b524:	4629      	mov	r1, r5
 800b526:	f7f5 fa49 	bl	80009bc <__aeabi_dcmplt>
 800b52a:	b1f0      	cbz	r0, 800b56a <pow+0x96>
 800b52c:	f7fd ff50 	bl	80093d0 <__errno>
 800b530:	2322      	movs	r3, #34	@ 0x22
 800b532:	e019      	b.n	800b568 <pow+0x94>
 800b534:	4630      	mov	r0, r6
 800b536:	4639      	mov	r1, r7
 800b538:	f000 f858 	bl	800b5ec <finite>
 800b53c:	b9c8      	cbnz	r0, 800b572 <pow+0x9e>
 800b53e:	4640      	mov	r0, r8
 800b540:	4649      	mov	r1, r9
 800b542:	f000 f853 	bl	800b5ec <finite>
 800b546:	b1a0      	cbz	r0, 800b572 <pow+0x9e>
 800b548:	4620      	mov	r0, r4
 800b54a:	4629      	mov	r1, r5
 800b54c:	f000 f84e 	bl	800b5ec <finite>
 800b550:	b178      	cbz	r0, 800b572 <pow+0x9e>
 800b552:	4632      	mov	r2, r6
 800b554:	463b      	mov	r3, r7
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f5 fa57 	bl	8000a0c <__aeabi_dcmpun>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d0e4      	beq.n	800b52c <pow+0x58>
 800b562:	f7fd ff35 	bl	80093d0 <__errno>
 800b566:	2321      	movs	r3, #33	@ 0x21
 800b568:	6003      	str	r3, [r0, #0]
 800b56a:	4630      	mov	r0, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b572:	2200      	movs	r2, #0
 800b574:	2300      	movs	r3, #0
 800b576:	4630      	mov	r0, r6
 800b578:	4639      	mov	r1, r7
 800b57a:	f7f5 fa15 	bl	80009a8 <__aeabi_dcmpeq>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d0f3      	beq.n	800b56a <pow+0x96>
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	f000 f831 	bl	800b5ec <finite>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d0ed      	beq.n	800b56a <pow+0x96>
 800b58e:	4620      	mov	r0, r4
 800b590:	4629      	mov	r1, r5
 800b592:	f000 f82b 	bl	800b5ec <finite>
 800b596:	e7c8      	b.n	800b52a <pow+0x56>
 800b598:	2600      	movs	r6, #0
 800b59a:	4f01      	ldr	r7, [pc, #4]	@ (800b5a0 <pow+0xcc>)
 800b59c:	e7e5      	b.n	800b56a <pow+0x96>
 800b59e:	bf00      	nop
 800b5a0:	3ff00000 	.word	0x3ff00000

0800b5a4 <sqrt>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	460f      	mov	r7, r1
 800b5aa:	f000 f885 	bl	800b6b8 <__ieee754_sqrt>
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	460d      	mov	r5, r1
 800b5b4:	463b      	mov	r3, r7
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	f7f5 fa27 	bl	8000a0c <__aeabi_dcmpun>
 800b5be:	b990      	cbnz	r0, 800b5e6 <sqrt+0x42>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f5 f9f8 	bl	80009bc <__aeabi_dcmplt>
 800b5cc:	b158      	cbz	r0, 800b5e6 <sqrt+0x42>
 800b5ce:	f7fd feff 	bl	80093d0 <__errno>
 800b5d2:	2321      	movs	r3, #33	@ 0x21
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	6003      	str	r3, [r0, #0]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4610      	mov	r0, r2
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f7f5 f8a5 	bl	800072c <__aeabi_ddiv>
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	460d      	mov	r5, r1
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5ec <finite>:
 800b5ec:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800b5f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b5f4:	0fc0      	lsrs	r0, r0, #31
 800b5f6:	4770      	bx	lr

0800b5f8 <fmax>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	4616      	mov	r6, r2
 800b600:	461f      	mov	r7, r3
 800b602:	f000 f831 	bl	800b668 <__fpclassifyd>
 800b606:	b920      	cbnz	r0, 800b612 <fmax+0x1a>
 800b608:	4634      	mov	r4, r6
 800b60a:	463d      	mov	r5, r7
 800b60c:	4620      	mov	r0, r4
 800b60e:	4629      	mov	r1, r5
 800b610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f000 f827 	bl	800b668 <__fpclassifyd>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d0f6      	beq.n	800b60c <fmax+0x14>
 800b61e:	4632      	mov	r2, r6
 800b620:	463b      	mov	r3, r7
 800b622:	4620      	mov	r0, r4
 800b624:	4629      	mov	r1, r5
 800b626:	f7f5 f9e7 	bl	80009f8 <__aeabi_dcmpgt>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d0ec      	beq.n	800b608 <fmax+0x10>
 800b62e:	e7ed      	b.n	800b60c <fmax+0x14>

0800b630 <fmin>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	4604      	mov	r4, r0
 800b634:	460d      	mov	r5, r1
 800b636:	4616      	mov	r6, r2
 800b638:	461f      	mov	r7, r3
 800b63a:	f000 f815 	bl	800b668 <__fpclassifyd>
 800b63e:	b920      	cbnz	r0, 800b64a <fmin+0x1a>
 800b640:	4634      	mov	r4, r6
 800b642:	463d      	mov	r5, r7
 800b644:	4620      	mov	r0, r4
 800b646:	4629      	mov	r1, r5
 800b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b64a:	4630      	mov	r0, r6
 800b64c:	4639      	mov	r1, r7
 800b64e:	f000 f80b 	bl	800b668 <__fpclassifyd>
 800b652:	2800      	cmp	r0, #0
 800b654:	d0f6      	beq.n	800b644 <fmin+0x14>
 800b656:	4632      	mov	r2, r6
 800b658:	463b      	mov	r3, r7
 800b65a:	4620      	mov	r0, r4
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7f5 f9ad 	bl	80009bc <__aeabi_dcmplt>
 800b662:	2800      	cmp	r0, #0
 800b664:	d0ec      	beq.n	800b640 <fmin+0x10>
 800b666:	e7ed      	b.n	800b644 <fmin+0x14>

0800b668 <__fpclassifyd>:
 800b668:	b510      	push	{r4, lr}
 800b66a:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800b66e:	460b      	mov	r3, r1
 800b670:	d019      	beq.n	800b6a6 <__fpclassifyd+0x3e>
 800b672:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800b676:	490e      	ldr	r1, [pc, #56]	@ (800b6b0 <__fpclassifyd+0x48>)
 800b678:	428a      	cmp	r2, r1
 800b67a:	d90e      	bls.n	800b69a <__fpclassifyd+0x32>
 800b67c:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800b680:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800b684:	428a      	cmp	r2, r1
 800b686:	d908      	bls.n	800b69a <__fpclassifyd+0x32>
 800b688:	4a0a      	ldr	r2, [pc, #40]	@ (800b6b4 <__fpclassifyd+0x4c>)
 800b68a:	4213      	tst	r3, r2
 800b68c:	d007      	beq.n	800b69e <__fpclassifyd+0x36>
 800b68e:	4294      	cmp	r4, r2
 800b690:	d107      	bne.n	800b6a2 <__fpclassifyd+0x3a>
 800b692:	fab0 f080 	clz	r0, r0
 800b696:	0940      	lsrs	r0, r0, #5
 800b698:	bd10      	pop	{r4, pc}
 800b69a:	2004      	movs	r0, #4
 800b69c:	e7fc      	b.n	800b698 <__fpclassifyd+0x30>
 800b69e:	2003      	movs	r0, #3
 800b6a0:	e7fa      	b.n	800b698 <__fpclassifyd+0x30>
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	e7f8      	b.n	800b698 <__fpclassifyd+0x30>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1ee      	bne.n	800b688 <__fpclassifyd+0x20>
 800b6aa:	2002      	movs	r0, #2
 800b6ac:	e7f4      	b.n	800b698 <__fpclassifyd+0x30>
 800b6ae:	bf00      	nop
 800b6b0:	7fdfffff 	.word	0x7fdfffff
 800b6b4:	7ff00000 	.word	0x7ff00000

0800b6b8 <__ieee754_sqrt>:
 800b6b8:	4a67      	ldr	r2, [pc, #412]	@ (800b858 <__ieee754_sqrt+0x1a0>)
 800b6ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6be:	438a      	bics	r2, r1
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	460f      	mov	r7, r1
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	d10e      	bne.n	800b6e8 <__ieee754_sqrt+0x30>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	f7f4 ff04 	bl	80004d8 <__aeabi_dmul>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f4 fd48 	bl	800016c <__adddf3>
 800b6dc:	4606      	mov	r6, r0
 800b6de:	460f      	mov	r7, r1
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	dc0c      	bgt.n	800b706 <__ieee754_sqrt+0x4e>
 800b6ec:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b6f0:	4302      	orrs	r2, r0
 800b6f2:	d0f5      	beq.n	800b6e0 <__ieee754_sqrt+0x28>
 800b6f4:	b189      	cbz	r1, 800b71a <__ieee754_sqrt+0x62>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	f7f4 fd36 	bl	8000168 <__aeabi_dsub>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	f7f5 f814 	bl	800072c <__aeabi_ddiv>
 800b704:	e7ea      	b.n	800b6dc <__ieee754_sqrt+0x24>
 800b706:	150a      	asrs	r2, r1, #20
 800b708:	d115      	bne.n	800b736 <__ieee754_sqrt+0x7e>
 800b70a:	2100      	movs	r1, #0
 800b70c:	e009      	b.n	800b722 <__ieee754_sqrt+0x6a>
 800b70e:	0ae3      	lsrs	r3, r4, #11
 800b710:	3a15      	subs	r2, #21
 800b712:	0564      	lsls	r4, r4, #21
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0fa      	beq.n	800b70e <__ieee754_sqrt+0x56>
 800b718:	e7f7      	b.n	800b70a <__ieee754_sqrt+0x52>
 800b71a:	460a      	mov	r2, r1
 800b71c:	e7fa      	b.n	800b714 <__ieee754_sqrt+0x5c>
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	3101      	adds	r1, #1
 800b722:	02d8      	lsls	r0, r3, #11
 800b724:	d5fb      	bpl.n	800b71e <__ieee754_sqrt+0x66>
 800b726:	1e48      	subs	r0, r1, #1
 800b728:	1a12      	subs	r2, r2, r0
 800b72a:	f1c1 0020 	rsb	r0, r1, #32
 800b72e:	fa24 f000 	lsr.w	r0, r4, r0
 800b732:	4303      	orrs	r3, r0
 800b734:	408c      	lsls	r4, r1
 800b736:	2600      	movs	r6, #0
 800b738:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b73c:	2116      	movs	r1, #22
 800b73e:	07d2      	lsls	r2, r2, #31
 800b740:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b744:	4632      	mov	r2, r6
 800b746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b74a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b74e:	bf5c      	itt	pl
 800b750:	005b      	lslpl	r3, r3, #1
 800b752:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b756:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b75a:	bf58      	it	pl
 800b75c:	0064      	lslpl	r4, r4, #1
 800b75e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b762:	107f      	asrs	r7, r7, #1
 800b764:	0064      	lsls	r4, r4, #1
 800b766:	1815      	adds	r5, r2, r0
 800b768:	429d      	cmp	r5, r3
 800b76a:	bfde      	ittt	le
 800b76c:	182a      	addle	r2, r5, r0
 800b76e:	1b5b      	suble	r3, r3, r5
 800b770:	1836      	addle	r6, r6, r0
 800b772:	0fe5      	lsrs	r5, r4, #31
 800b774:	3901      	subs	r1, #1
 800b776:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b77a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b77e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b782:	d1f0      	bne.n	800b766 <__ieee754_sqrt+0xae>
 800b784:	460d      	mov	r5, r1
 800b786:	f04f 0a20 	mov.w	sl, #32
 800b78a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b78e:	429a      	cmp	r2, r3
 800b790:	eb01 0c00 	add.w	ip, r1, r0
 800b794:	db02      	blt.n	800b79c <__ieee754_sqrt+0xe4>
 800b796:	d113      	bne.n	800b7c0 <__ieee754_sqrt+0x108>
 800b798:	45a4      	cmp	ip, r4
 800b79a:	d811      	bhi.n	800b7c0 <__ieee754_sqrt+0x108>
 800b79c:	f1bc 0f00 	cmp.w	ip, #0
 800b7a0:	eb0c 0100 	add.w	r1, ip, r0
 800b7a4:	da42      	bge.n	800b82c <__ieee754_sqrt+0x174>
 800b7a6:	2900      	cmp	r1, #0
 800b7a8:	db40      	blt.n	800b82c <__ieee754_sqrt+0x174>
 800b7aa:	f102 0e01 	add.w	lr, r2, #1
 800b7ae:	1a9b      	subs	r3, r3, r2
 800b7b0:	4672      	mov	r2, lr
 800b7b2:	45a4      	cmp	ip, r4
 800b7b4:	bf88      	it	hi
 800b7b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b7ba:	eba4 040c 	sub.w	r4, r4, ip
 800b7be:	4405      	add	r5, r0
 800b7c0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b7c4:	f1ba 0a01 	subs.w	sl, sl, #1
 800b7c8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b7cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b7d0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b7d4:	d1db      	bne.n	800b78e <__ieee754_sqrt+0xd6>
 800b7d6:	431c      	orrs	r4, r3
 800b7d8:	d01a      	beq.n	800b810 <__ieee754_sqrt+0x158>
 800b7da:	4c20      	ldr	r4, [pc, #128]	@ (800b85c <__ieee754_sqrt+0x1a4>)
 800b7dc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b860 <__ieee754_sqrt+0x1a8>
 800b7e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b7e4:	e9db 2300 	ldrd	r2, r3, [fp]
 800b7e8:	f7f4 fcbe 	bl	8000168 <__aeabi_dsub>
 800b7ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4640      	mov	r0, r8
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	f7f5 f8ea 	bl	80009d0 <__aeabi_dcmple>
 800b7fc:	b140      	cbz	r0, 800b810 <__ieee754_sqrt+0x158>
 800b7fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b802:	e9db 2300 	ldrd	r2, r3, [fp]
 800b806:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b80a:	d111      	bne.n	800b830 <__ieee754_sqrt+0x178>
 800b80c:	4655      	mov	r5, sl
 800b80e:	3601      	adds	r6, #1
 800b810:	1072      	asrs	r2, r6, #1
 800b812:	086b      	lsrs	r3, r5, #1
 800b814:	07f1      	lsls	r1, r6, #31
 800b816:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b81a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b81e:	bf48      	it	mi
 800b820:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b824:	4618      	mov	r0, r3
 800b826:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b82a:	e757      	b.n	800b6dc <__ieee754_sqrt+0x24>
 800b82c:	4696      	mov	lr, r2
 800b82e:	e7be      	b.n	800b7ae <__ieee754_sqrt+0xf6>
 800b830:	f7f4 fc9c 	bl	800016c <__adddf3>
 800b834:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f8bc 	bl	80009bc <__aeabi_dcmplt>
 800b844:	b120      	cbz	r0, 800b850 <__ieee754_sqrt+0x198>
 800b846:	1ca8      	adds	r0, r5, #2
 800b848:	bf08      	it	eq
 800b84a:	3601      	addeq	r6, #1
 800b84c:	3502      	adds	r5, #2
 800b84e:	e7df      	b.n	800b810 <__ieee754_sqrt+0x158>
 800b850:	1c6b      	adds	r3, r5, #1
 800b852:	f023 0501 	bic.w	r5, r3, #1
 800b856:	e7db      	b.n	800b810 <__ieee754_sqrt+0x158>
 800b858:	7ff00000 	.word	0x7ff00000
 800b85c:	200001e0 	.word	0x200001e0
 800b860:	200001d8 	.word	0x200001d8
 800b864:	00000000 	.word	0x00000000

0800b868 <floor>:
 800b868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b870:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800b874:	2e13      	cmp	r6, #19
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	460c      	mov	r4, r1
 800b87c:	4605      	mov	r5, r0
 800b87e:	4680      	mov	r8, r0
 800b880:	dc35      	bgt.n	800b8ee <floor+0x86>
 800b882:	2e00      	cmp	r6, #0
 800b884:	da17      	bge.n	800b8b6 <floor+0x4e>
 800b886:	a334      	add	r3, pc, #208	@ (adr r3, 800b958 <floor+0xf0>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	f7f4 fc6e 	bl	800016c <__adddf3>
 800b890:	2200      	movs	r2, #0
 800b892:	2300      	movs	r3, #0
 800b894:	f7f5 f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 800b898:	b150      	cbz	r0, 800b8b0 <floor+0x48>
 800b89a:	2c00      	cmp	r4, #0
 800b89c:	da57      	bge.n	800b94e <floor+0xe6>
 800b89e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b8a2:	432c      	orrs	r4, r5
 800b8a4:	2500      	movs	r5, #0
 800b8a6:	42ac      	cmp	r4, r5
 800b8a8:	4c2d      	ldr	r4, [pc, #180]	@ (800b960 <floor+0xf8>)
 800b8aa:	bf08      	it	eq
 800b8ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b8b0:	4623      	mov	r3, r4
 800b8b2:	462a      	mov	r2, r5
 800b8b4:	e024      	b.n	800b900 <floor+0x98>
 800b8b6:	4f2b      	ldr	r7, [pc, #172]	@ (800b964 <floor+0xfc>)
 800b8b8:	4137      	asrs	r7, r6
 800b8ba:	ea01 0c07 	and.w	ip, r1, r7
 800b8be:	ea5c 0c00 	orrs.w	ip, ip, r0
 800b8c2:	d01d      	beq.n	800b900 <floor+0x98>
 800b8c4:	a324      	add	r3, pc, #144	@ (adr r3, 800b958 <floor+0xf0>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f7f4 fc4f 	bl	800016c <__adddf3>
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f7f5 f891 	bl	80009f8 <__aeabi_dcmpgt>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d0ea      	beq.n	800b8b0 <floor+0x48>
 800b8da:	2c00      	cmp	r4, #0
 800b8dc:	bfbe      	ittt	lt
 800b8de:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b8e2:	4133      	asrlt	r3, r6
 800b8e4:	18e4      	addlt	r4, r4, r3
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	ea24 0407 	bic.w	r4, r4, r7
 800b8ec:	e7e0      	b.n	800b8b0 <floor+0x48>
 800b8ee:	2e33      	cmp	r6, #51	@ 0x33
 800b8f0:	dd0a      	ble.n	800b908 <floor+0xa0>
 800b8f2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b8f6:	d103      	bne.n	800b900 <floor+0x98>
 800b8f8:	f7f4 fc38 	bl	800016c <__adddf3>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4610      	mov	r0, r2
 800b902:	4619      	mov	r1, r3
 800b904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b908:	f04f 3cff 	mov.w	ip, #4294967295
 800b90c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800b910:	fa2c f707 	lsr.w	r7, ip, r7
 800b914:	4207      	tst	r7, r0
 800b916:	d0f3      	beq.n	800b900 <floor+0x98>
 800b918:	a30f      	add	r3, pc, #60	@ (adr r3, 800b958 <floor+0xf0>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f7f4 fc25 	bl	800016c <__adddf3>
 800b922:	2200      	movs	r2, #0
 800b924:	2300      	movs	r3, #0
 800b926:	f7f5 f867 	bl	80009f8 <__aeabi_dcmpgt>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d0c0      	beq.n	800b8b0 <floor+0x48>
 800b92e:	2c00      	cmp	r4, #0
 800b930:	da0a      	bge.n	800b948 <floor+0xe0>
 800b932:	2e14      	cmp	r6, #20
 800b934:	d101      	bne.n	800b93a <floor+0xd2>
 800b936:	3401      	adds	r4, #1
 800b938:	e006      	b.n	800b948 <floor+0xe0>
 800b93a:	2301      	movs	r3, #1
 800b93c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b940:	40b3      	lsls	r3, r6
 800b942:	441d      	add	r5, r3
 800b944:	4545      	cmp	r5, r8
 800b946:	d3f6      	bcc.n	800b936 <floor+0xce>
 800b948:	ea25 0507 	bic.w	r5, r5, r7
 800b94c:	e7b0      	b.n	800b8b0 <floor+0x48>
 800b94e:	2500      	movs	r5, #0
 800b950:	462c      	mov	r4, r5
 800b952:	e7ad      	b.n	800b8b0 <floor+0x48>
 800b954:	f3af 8000 	nop.w
 800b958:	8800759c 	.word	0x8800759c
 800b95c:	7e37e43c 	.word	0x7e37e43c
 800b960:	bff00000 	.word	0xbff00000
 800b964:	000fffff 	.word	0x000fffff

0800b968 <__ieee754_pow>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	b091      	sub	sp, #68	@ 0x44
 800b96e:	e9cd 2300 	strd	r2, r3, [sp]
 800b972:	468b      	mov	fp, r1
 800b974:	e9dd 1800 	ldrd	r1, r8, [sp]
 800b978:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800b97c:	4682      	mov	sl, r0
 800b97e:	ea57 0001 	orrs.w	r0, r7, r1
 800b982:	d112      	bne.n	800b9aa <__ieee754_pow+0x42>
 800b984:	4653      	mov	r3, sl
 800b986:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800b98a:	18db      	adds	r3, r3, r3
 800b98c:	4152      	adcs	r2, r2
 800b98e:	4298      	cmp	r0, r3
 800b990:	4b91      	ldr	r3, [pc, #580]	@ (800bbd8 <__ieee754_pow+0x270>)
 800b992:	4193      	sbcs	r3, r2
 800b994:	f080 84ce 	bcs.w	800c334 <__ieee754_pow+0x9cc>
 800b998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b99c:	4650      	mov	r0, sl
 800b99e:	4659      	mov	r1, fp
 800b9a0:	f7f4 fbe4 	bl	800016c <__adddf3>
 800b9a4:	b011      	add	sp, #68	@ 0x44
 800b9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9aa:	4b8c      	ldr	r3, [pc, #560]	@ (800bbdc <__ieee754_pow+0x274>)
 800b9ac:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800b9b0:	429e      	cmp	r6, r3
 800b9b2:	465d      	mov	r5, fp
 800b9b4:	46d1      	mov	r9, sl
 800b9b6:	d807      	bhi.n	800b9c8 <__ieee754_pow+0x60>
 800b9b8:	d102      	bne.n	800b9c0 <__ieee754_pow+0x58>
 800b9ba:	f1ba 0f00 	cmp.w	sl, #0
 800b9be:	d1eb      	bne.n	800b998 <__ieee754_pow+0x30>
 800b9c0:	429f      	cmp	r7, r3
 800b9c2:	d801      	bhi.n	800b9c8 <__ieee754_pow+0x60>
 800b9c4:	d10f      	bne.n	800b9e6 <__ieee754_pow+0x7e>
 800b9c6:	b171      	cbz	r1, 800b9e6 <__ieee754_pow+0x7e>
 800b9c8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b9cc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b9d0:	ea55 0509 	orrs.w	r5, r5, r9
 800b9d4:	d1e0      	bne.n	800b998 <__ieee754_pow+0x30>
 800b9d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9da:	18db      	adds	r3, r3, r3
 800b9dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b9e0:	4152      	adcs	r2, r2
 800b9e2:	429d      	cmp	r5, r3
 800b9e4:	e7d4      	b.n	800b990 <__ieee754_pow+0x28>
 800b9e6:	2d00      	cmp	r5, #0
 800b9e8:	4633      	mov	r3, r6
 800b9ea:	da39      	bge.n	800ba60 <__ieee754_pow+0xf8>
 800b9ec:	4a7c      	ldr	r2, [pc, #496]	@ (800bbe0 <__ieee754_pow+0x278>)
 800b9ee:	4297      	cmp	r7, r2
 800b9f0:	d84e      	bhi.n	800ba90 <__ieee754_pow+0x128>
 800b9f2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b9f6:	4297      	cmp	r7, r2
 800b9f8:	f240 84ab 	bls.w	800c352 <__ieee754_pow+0x9ea>
 800b9fc:	153a      	asrs	r2, r7, #20
 800b9fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ba02:	2a14      	cmp	r2, #20
 800ba04:	dd0f      	ble.n	800ba26 <__ieee754_pow+0xbe>
 800ba06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ba0a:	fa21 f402 	lsr.w	r4, r1, r2
 800ba0e:	fa04 f202 	lsl.w	r2, r4, r2
 800ba12:	428a      	cmp	r2, r1
 800ba14:	f040 849d 	bne.w	800c352 <__ieee754_pow+0x9ea>
 800ba18:	f004 0401 	and.w	r4, r4, #1
 800ba1c:	f1c4 0402 	rsb	r4, r4, #2
 800ba20:	2900      	cmp	r1, #0
 800ba22:	d15a      	bne.n	800bada <__ieee754_pow+0x172>
 800ba24:	e00e      	b.n	800ba44 <__ieee754_pow+0xdc>
 800ba26:	2900      	cmp	r1, #0
 800ba28:	d156      	bne.n	800bad8 <__ieee754_pow+0x170>
 800ba2a:	f1c2 0214 	rsb	r2, r2, #20
 800ba2e:	fa47 f402 	asr.w	r4, r7, r2
 800ba32:	fa04 f202 	lsl.w	r2, r4, r2
 800ba36:	42ba      	cmp	r2, r7
 800ba38:	f040 8488 	bne.w	800c34c <__ieee754_pow+0x9e4>
 800ba3c:	f004 0401 	and.w	r4, r4, #1
 800ba40:	f1c4 0402 	rsb	r4, r4, #2
 800ba44:	4a67      	ldr	r2, [pc, #412]	@ (800bbe4 <__ieee754_pow+0x27c>)
 800ba46:	4297      	cmp	r7, r2
 800ba48:	d130      	bne.n	800baac <__ieee754_pow+0x144>
 800ba4a:	f1b8 0f00 	cmp.w	r8, #0
 800ba4e:	f280 8479 	bge.w	800c344 <__ieee754_pow+0x9dc>
 800ba52:	4652      	mov	r2, sl
 800ba54:	465b      	mov	r3, fp
 800ba56:	2000      	movs	r0, #0
 800ba58:	4962      	ldr	r1, [pc, #392]	@ (800bbe4 <__ieee754_pow+0x27c>)
 800ba5a:	f7f4 fe67 	bl	800072c <__aeabi_ddiv>
 800ba5e:	e7a1      	b.n	800b9a4 <__ieee754_pow+0x3c>
 800ba60:	2400      	movs	r4, #0
 800ba62:	2900      	cmp	r1, #0
 800ba64:	d139      	bne.n	800bada <__ieee754_pow+0x172>
 800ba66:	4a5d      	ldr	r2, [pc, #372]	@ (800bbdc <__ieee754_pow+0x274>)
 800ba68:	4297      	cmp	r7, r2
 800ba6a:	d1eb      	bne.n	800ba44 <__ieee754_pow+0xdc>
 800ba6c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800ba70:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800ba74:	ea53 0309 	orrs.w	r3, r3, r9
 800ba78:	f000 845c 	beq.w	800c334 <__ieee754_pow+0x9cc>
 800ba7c:	4b5a      	ldr	r3, [pc, #360]	@ (800bbe8 <__ieee754_pow+0x280>)
 800ba7e:	429e      	cmp	r6, r3
 800ba80:	d908      	bls.n	800ba94 <__ieee754_pow+0x12c>
 800ba82:	f1b8 0f00 	cmp.w	r8, #0
 800ba86:	f2c0 8459 	blt.w	800c33c <__ieee754_pow+0x9d4>
 800ba8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba8e:	e789      	b.n	800b9a4 <__ieee754_pow+0x3c>
 800ba90:	2402      	movs	r4, #2
 800ba92:	e7e6      	b.n	800ba62 <__ieee754_pow+0xfa>
 800ba94:	f1b8 0f00 	cmp.w	r8, #0
 800ba98:	f04f 0000 	mov.w	r0, #0
 800ba9c:	f04f 0100 	mov.w	r1, #0
 800baa0:	da80      	bge.n	800b9a4 <__ieee754_pow+0x3c>
 800baa2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800baa6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800baaa:	e77b      	b.n	800b9a4 <__ieee754_pow+0x3c>
 800baac:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800bab0:	d106      	bne.n	800bac0 <__ieee754_pow+0x158>
 800bab2:	4652      	mov	r2, sl
 800bab4:	465b      	mov	r3, fp
 800bab6:	4650      	mov	r0, sl
 800bab8:	4659      	mov	r1, fp
 800baba:	f7f4 fd0d 	bl	80004d8 <__aeabi_dmul>
 800babe:	e771      	b.n	800b9a4 <__ieee754_pow+0x3c>
 800bac0:	4a4a      	ldr	r2, [pc, #296]	@ (800bbec <__ieee754_pow+0x284>)
 800bac2:	4590      	cmp	r8, r2
 800bac4:	d109      	bne.n	800bada <__ieee754_pow+0x172>
 800bac6:	2d00      	cmp	r5, #0
 800bac8:	db07      	blt.n	800bada <__ieee754_pow+0x172>
 800baca:	4650      	mov	r0, sl
 800bacc:	4659      	mov	r1, fp
 800bace:	b011      	add	sp, #68	@ 0x44
 800bad0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	f7ff bdf0 	b.w	800b6b8 <__ieee754_sqrt>
 800bad8:	2400      	movs	r4, #0
 800bada:	4650      	mov	r0, sl
 800badc:	4659      	mov	r1, fp
 800bade:	9302      	str	r3, [sp, #8]
 800bae0:	f000 fc6a 	bl	800c3b8 <fabs>
 800bae4:	9b02      	ldr	r3, [sp, #8]
 800bae6:	f1b9 0f00 	cmp.w	r9, #0
 800baea:	d127      	bne.n	800bb3c <__ieee754_pow+0x1d4>
 800baec:	4a3d      	ldr	r2, [pc, #244]	@ (800bbe4 <__ieee754_pow+0x27c>)
 800baee:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800baf2:	4594      	cmp	ip, r2
 800baf4:	d000      	beq.n	800baf8 <__ieee754_pow+0x190>
 800baf6:	bb0e      	cbnz	r6, 800bb3c <__ieee754_pow+0x1d4>
 800baf8:	f1b8 0f00 	cmp.w	r8, #0
 800bafc:	da05      	bge.n	800bb0a <__ieee754_pow+0x1a2>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	2000      	movs	r0, #0
 800bb04:	4937      	ldr	r1, [pc, #220]	@ (800bbe4 <__ieee754_pow+0x27c>)
 800bb06:	f7f4 fe11 	bl	800072c <__aeabi_ddiv>
 800bb0a:	2d00      	cmp	r5, #0
 800bb0c:	f6bf af4a 	bge.w	800b9a4 <__ieee754_pow+0x3c>
 800bb10:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800bb14:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800bb18:	4326      	orrs	r6, r4
 800bb1a:	d108      	bne.n	800bb2e <__ieee754_pow+0x1c6>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4610      	mov	r0, r2
 800bb22:	4619      	mov	r1, r3
 800bb24:	f7f4 fb20 	bl	8000168 <__aeabi_dsub>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	e795      	b.n	800ba5a <__ieee754_pow+0xf2>
 800bb2e:	2c01      	cmp	r4, #1
 800bb30:	f47f af38 	bne.w	800b9a4 <__ieee754_pow+0x3c>
 800bb34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb38:	4619      	mov	r1, r3
 800bb3a:	e733      	b.n	800b9a4 <__ieee754_pow+0x3c>
 800bb3c:	0fea      	lsrs	r2, r5, #31
 800bb3e:	3a01      	subs	r2, #1
 800bb40:	ea52 0c04 	orrs.w	ip, r2, r4
 800bb44:	d102      	bne.n	800bb4c <__ieee754_pow+0x1e4>
 800bb46:	4652      	mov	r2, sl
 800bb48:	465b      	mov	r3, fp
 800bb4a:	e7e9      	b.n	800bb20 <__ieee754_pow+0x1b8>
 800bb4c:	f04f 0900 	mov.w	r9, #0
 800bb50:	3c01      	subs	r4, #1
 800bb52:	4314      	orrs	r4, r2
 800bb54:	bf14      	ite	ne
 800bb56:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800bbe4 <__ieee754_pow+0x27c>
 800bb5a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800bbf0 <__ieee754_pow+0x288>
 800bb5e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800bb62:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800bb66:	f240 8107 	bls.w	800bd78 <__ieee754_pow+0x410>
 800bb6a:	4b22      	ldr	r3, [pc, #136]	@ (800bbf4 <__ieee754_pow+0x28c>)
 800bb6c:	429f      	cmp	r7, r3
 800bb6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe8 <__ieee754_pow+0x280>)
 800bb70:	d913      	bls.n	800bb9a <__ieee754_pow+0x232>
 800bb72:	429e      	cmp	r6, r3
 800bb74:	d808      	bhi.n	800bb88 <__ieee754_pow+0x220>
 800bb76:	f1b8 0f00 	cmp.w	r8, #0
 800bb7a:	da08      	bge.n	800bb8e <__ieee754_pow+0x226>
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	b011      	add	sp, #68	@ 0x44
 800bb80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	f000 bcb4 	b.w	800c4f0 <__math_oflow>
 800bb88:	f1b8 0f00 	cmp.w	r8, #0
 800bb8c:	dcf6      	bgt.n	800bb7c <__ieee754_pow+0x214>
 800bb8e:	2000      	movs	r0, #0
 800bb90:	b011      	add	sp, #68	@ 0x44
 800bb92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb96:	f000 bca6 	b.w	800c4e6 <__math_uflow>
 800bb9a:	429e      	cmp	r6, r3
 800bb9c:	d20c      	bcs.n	800bbb8 <__ieee754_pow+0x250>
 800bb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba2:	2200      	movs	r2, #0
 800bba4:	2300      	movs	r3, #0
 800bba6:	f7f4 ff09 	bl	80009bc <__aeabi_dcmplt>
 800bbaa:	3800      	subs	r0, #0
 800bbac:	bf18      	it	ne
 800bbae:	2001      	movne	r0, #1
 800bbb0:	f1b8 0f00 	cmp.w	r8, #0
 800bbb4:	daec      	bge.n	800bb90 <__ieee754_pow+0x228>
 800bbb6:	e7e2      	b.n	800bb7e <__ieee754_pow+0x216>
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe4 <__ieee754_pow+0x27c>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	429e      	cmp	r6, r3
 800bbbe:	d91b      	bls.n	800bbf8 <__ieee754_pow+0x290>
 800bbc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f7f4 fef9 	bl	80009bc <__aeabi_dcmplt>
 800bbca:	3800      	subs	r0, #0
 800bbcc:	bf18      	it	ne
 800bbce:	2001      	movne	r0, #1
 800bbd0:	f1b8 0f00 	cmp.w	r8, #0
 800bbd4:	dcd3      	bgt.n	800bb7e <__ieee754_pow+0x216>
 800bbd6:	e7db      	b.n	800bb90 <__ieee754_pow+0x228>
 800bbd8:	fff00000 	.word	0xfff00000
 800bbdc:	7ff00000 	.word	0x7ff00000
 800bbe0:	433fffff 	.word	0x433fffff
 800bbe4:	3ff00000 	.word	0x3ff00000
 800bbe8:	3fefffff 	.word	0x3fefffff
 800bbec:	3fe00000 	.word	0x3fe00000
 800bbf0:	bff00000 	.word	0xbff00000
 800bbf4:	43f00000 	.word	0x43f00000
 800bbf8:	4b5b      	ldr	r3, [pc, #364]	@ (800bd68 <__ieee754_pow+0x400>)
 800bbfa:	f7f4 fab5 	bl	8000168 <__aeabi_dsub>
 800bbfe:	a352      	add	r3, pc, #328	@ (adr r3, 800bd48 <__ieee754_pow+0x3e0>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	4604      	mov	r4, r0
 800bc06:	460d      	mov	r5, r1
 800bc08:	f7f4 fc66 	bl	80004d8 <__aeabi_dmul>
 800bc0c:	a350      	add	r3, pc, #320	@ (adr r3, 800bd50 <__ieee754_pow+0x3e8>)
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	4606      	mov	r6, r0
 800bc14:	460f      	mov	r7, r1
 800bc16:	4620      	mov	r0, r4
 800bc18:	4629      	mov	r1, r5
 800bc1a:	f7f4 fc5d 	bl	80004d8 <__aeabi_dmul>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4682      	mov	sl, r0
 800bc22:	468b      	mov	fp, r1
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	4b50      	ldr	r3, [pc, #320]	@ (800bd6c <__ieee754_pow+0x404>)
 800bc2a:	f7f4 fc55 	bl	80004d8 <__aeabi_dmul>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	a149      	add	r1, pc, #292	@ (adr r1, 800bd58 <__ieee754_pow+0x3f0>)
 800bc34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc38:	f7f4 fa96 	bl	8000168 <__aeabi_dsub>
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	462b      	mov	r3, r5
 800bc40:	f7f4 fc4a 	bl	80004d8 <__aeabi_dmul>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	2000      	movs	r0, #0
 800bc4a:	4949      	ldr	r1, [pc, #292]	@ (800bd70 <__ieee754_pow+0x408>)
 800bc4c:	f7f4 fa8c 	bl	8000168 <__aeabi_dsub>
 800bc50:	4622      	mov	r2, r4
 800bc52:	4680      	mov	r8, r0
 800bc54:	4689      	mov	r9, r1
 800bc56:	462b      	mov	r3, r5
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 fc3c 	bl	80004d8 <__aeabi_dmul>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	4640      	mov	r0, r8
 800bc66:	4649      	mov	r1, r9
 800bc68:	f7f4 fc36 	bl	80004d8 <__aeabi_dmul>
 800bc6c:	a33c      	add	r3, pc, #240	@ (adr r3, 800bd60 <__ieee754_pow+0x3f8>)
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	f7f4 fc31 	bl	80004d8 <__aeabi_dmul>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4650      	mov	r0, sl
 800bc7c:	4659      	mov	r1, fp
 800bc7e:	f7f4 fa73 	bl	8000168 <__aeabi_dsub>
 800bc82:	2400      	movs	r4, #0
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4680      	mov	r8, r0
 800bc8a:	4689      	mov	r9, r1
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4639      	mov	r1, r7
 800bc90:	f7f4 fa6c 	bl	800016c <__adddf3>
 800bc94:	4632      	mov	r2, r6
 800bc96:	463b      	mov	r3, r7
 800bc98:	4620      	mov	r0, r4
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	f7f4 fa64 	bl	8000168 <__aeabi_dsub>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4640      	mov	r0, r8
 800bca6:	4649      	mov	r1, r9
 800bca8:	f7f4 fa5e 	bl	8000168 <__aeabi_dsub>
 800bcac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9304      	str	r3, [sp, #16]
 800bcb8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	465b      	mov	r3, fp
 800bcc8:	f7f4 fa4e 	bl	8000168 <__aeabi_dsub>
 800bccc:	4622      	mov	r2, r4
 800bcce:	462b      	mov	r3, r5
 800bcd0:	f7f4 fc02 	bl	80004d8 <__aeabi_dmul>
 800bcd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcd8:	4680      	mov	r8, r0
 800bcda:	4689      	mov	r9, r1
 800bcdc:	4630      	mov	r0, r6
 800bcde:	4639      	mov	r1, r7
 800bce0:	f7f4 fbfa 	bl	80004d8 <__aeabi_dmul>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	4640      	mov	r0, r8
 800bcea:	4649      	mov	r1, r9
 800bcec:	f7f4 fa3e 	bl	800016c <__adddf3>
 800bcf0:	4652      	mov	r2, sl
 800bcf2:	465b      	mov	r3, fp
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	460f      	mov	r7, r1
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	f7f4 fbec 	bl	80004d8 <__aeabi_dmul>
 800bd00:	460b      	mov	r3, r1
 800bd02:	4602      	mov	r2, r0
 800bd04:	4680      	mov	r8, r0
 800bd06:	4689      	mov	r9, r1
 800bd08:	4630      	mov	r0, r6
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	f7f4 fa2e 	bl	800016c <__adddf3>
 800bd10:	4b18      	ldr	r3, [pc, #96]	@ (800bd74 <__ieee754_pow+0x40c>)
 800bd12:	4604      	mov	r4, r0
 800bd14:	4299      	cmp	r1, r3
 800bd16:	460d      	mov	r5, r1
 800bd18:	468a      	mov	sl, r1
 800bd1a:	468b      	mov	fp, r1
 800bd1c:	f340 82e0 	ble.w	800c2e0 <__ieee754_pow+0x978>
 800bd20:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bd24:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bd28:	4303      	orrs	r3, r0
 800bd2a:	f000 81df 	beq.w	800c0ec <__ieee754_pow+0x784>
 800bd2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd32:	2200      	movs	r2, #0
 800bd34:	2300      	movs	r3, #0
 800bd36:	f7f4 fe41 	bl	80009bc <__aeabi_dcmplt>
 800bd3a:	3800      	subs	r0, #0
 800bd3c:	bf18      	it	ne
 800bd3e:	2001      	movne	r0, #1
 800bd40:	e71d      	b.n	800bb7e <__ieee754_pow+0x216>
 800bd42:	bf00      	nop
 800bd44:	f3af 8000 	nop.w
 800bd48:	60000000 	.word	0x60000000
 800bd4c:	3ff71547 	.word	0x3ff71547
 800bd50:	f85ddf44 	.word	0xf85ddf44
 800bd54:	3e54ae0b 	.word	0x3e54ae0b
 800bd58:	55555555 	.word	0x55555555
 800bd5c:	3fd55555 	.word	0x3fd55555
 800bd60:	652b82fe 	.word	0x652b82fe
 800bd64:	3ff71547 	.word	0x3ff71547
 800bd68:	3ff00000 	.word	0x3ff00000
 800bd6c:	3fd00000 	.word	0x3fd00000
 800bd70:	3fe00000 	.word	0x3fe00000
 800bd74:	408fffff 	.word	0x408fffff
 800bd78:	4ad3      	ldr	r2, [pc, #844]	@ (800c0c8 <__ieee754_pow+0x760>)
 800bd7a:	402a      	ands	r2, r5
 800bd7c:	2a00      	cmp	r2, #0
 800bd7e:	f040 817a 	bne.w	800c076 <__ieee754_pow+0x70e>
 800bd82:	4bd2      	ldr	r3, [pc, #840]	@ (800c0cc <__ieee754_pow+0x764>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	f7f4 fba7 	bl	80004d8 <__aeabi_dmul>
 800bd8a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800bd8e:	460b      	mov	r3, r1
 800bd90:	151a      	asrs	r2, r3, #20
 800bd92:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bd96:	4422      	add	r2, r4
 800bd98:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd9a:	4acd      	ldr	r2, [pc, #820]	@ (800c0d0 <__ieee754_pow+0x768>)
 800bd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bda0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800bda4:	4293      	cmp	r3, r2
 800bda6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bdaa:	dd08      	ble.n	800bdbe <__ieee754_pow+0x456>
 800bdac:	4ac9      	ldr	r2, [pc, #804]	@ (800c0d4 <__ieee754_pow+0x76c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	f340 8163 	ble.w	800c07a <__ieee754_pow+0x712>
 800bdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdb6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bdba:	3301      	adds	r3, #1
 800bdbc:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdbe:	2600      	movs	r6, #0
 800bdc0:	00f3      	lsls	r3, r6, #3
 800bdc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdc4:	4bc4      	ldr	r3, [pc, #784]	@ (800c0d8 <__ieee754_pow+0x770>)
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bdd6:	4623      	mov	r3, r4
 800bdd8:	4682      	mov	sl, r0
 800bdda:	f7f4 f9c5 	bl	8000168 <__aeabi_dsub>
 800bdde:	4652      	mov	r2, sl
 800bde0:	462b      	mov	r3, r5
 800bde2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bde6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bdea:	f7f4 f9bf 	bl	800016c <__adddf3>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	49b9      	ldr	r1, [pc, #740]	@ (800c0dc <__ieee754_pow+0x774>)
 800bdf6:	f7f4 fc99 	bl	800072c <__aeabi_ddiv>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be06:	f7f4 fb67 	bl	80004d8 <__aeabi_dmul>
 800be0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be0e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800be12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be16:	2300      	movs	r3, #0
 800be18:	2200      	movs	r2, #0
 800be1a:	46ab      	mov	fp, r5
 800be1c:	106d      	asrs	r5, r5, #1
 800be1e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800be22:	9304      	str	r3, [sp, #16]
 800be24:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800be28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800be2c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800be30:	4640      	mov	r0, r8
 800be32:	4649      	mov	r1, r9
 800be34:	4614      	mov	r4, r2
 800be36:	461d      	mov	r5, r3
 800be38:	f7f4 fb4e 	bl	80004d8 <__aeabi_dmul>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be44:	f7f4 f990 	bl	8000168 <__aeabi_dsub>
 800be48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be4c:	4606      	mov	r6, r0
 800be4e:	460f      	mov	r7, r1
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 f988 	bl	8000168 <__aeabi_dsub>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4650      	mov	r0, sl
 800be5e:	4659      	mov	r1, fp
 800be60:	f7f4 f982 	bl	8000168 <__aeabi_dsub>
 800be64:	4642      	mov	r2, r8
 800be66:	464b      	mov	r3, r9
 800be68:	f7f4 fb36 	bl	80004d8 <__aeabi_dmul>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4630      	mov	r0, r6
 800be72:	4639      	mov	r1, r7
 800be74:	f7f4 f978 	bl	8000168 <__aeabi_dsub>
 800be78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be7c:	f7f4 fb2c 	bl	80004d8 <__aeabi_dmul>
 800be80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be88:	4610      	mov	r0, r2
 800be8a:	4619      	mov	r1, r3
 800be8c:	f7f4 fb24 	bl	80004d8 <__aeabi_dmul>
 800be90:	a37b      	add	r3, pc, #492	@ (adr r3, 800c080 <__ieee754_pow+0x718>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	4604      	mov	r4, r0
 800be98:	460d      	mov	r5, r1
 800be9a:	f7f4 fb1d 	bl	80004d8 <__aeabi_dmul>
 800be9e:	a37a      	add	r3, pc, #488	@ (adr r3, 800c088 <__ieee754_pow+0x720>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 f962 	bl	800016c <__adddf3>
 800bea8:	4622      	mov	r2, r4
 800beaa:	462b      	mov	r3, r5
 800beac:	f7f4 fb14 	bl	80004d8 <__aeabi_dmul>
 800beb0:	a377      	add	r3, pc, #476	@ (adr r3, 800c090 <__ieee754_pow+0x728>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 f959 	bl	800016c <__adddf3>
 800beba:	4622      	mov	r2, r4
 800bebc:	462b      	mov	r3, r5
 800bebe:	f7f4 fb0b 	bl	80004d8 <__aeabi_dmul>
 800bec2:	a375      	add	r3, pc, #468	@ (adr r3, 800c098 <__ieee754_pow+0x730>)
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	f7f4 f950 	bl	800016c <__adddf3>
 800becc:	4622      	mov	r2, r4
 800bece:	462b      	mov	r3, r5
 800bed0:	f7f4 fb02 	bl	80004d8 <__aeabi_dmul>
 800bed4:	a372      	add	r3, pc, #456	@ (adr r3, 800c0a0 <__ieee754_pow+0x738>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f7f4 f947 	bl	800016c <__adddf3>
 800bede:	4622      	mov	r2, r4
 800bee0:	462b      	mov	r3, r5
 800bee2:	f7f4 faf9 	bl	80004d8 <__aeabi_dmul>
 800bee6:	a370      	add	r3, pc, #448	@ (adr r3, 800c0a8 <__ieee754_pow+0x740>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 f93e 	bl	800016c <__adddf3>
 800bef0:	4622      	mov	r2, r4
 800bef2:	4606      	mov	r6, r0
 800bef4:	460f      	mov	r7, r1
 800bef6:	462b      	mov	r3, r5
 800bef8:	4620      	mov	r0, r4
 800befa:	4629      	mov	r1, r5
 800befc:	f7f4 faec 	bl	80004d8 <__aeabi_dmul>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4630      	mov	r0, r6
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 fae6 	bl	80004d8 <__aeabi_dmul>
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	460d      	mov	r5, r1
 800bf10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	f7f4 f928 	bl	800016c <__adddf3>
 800bf1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf20:	f7f4 fada 	bl	80004d8 <__aeabi_dmul>
 800bf24:	4622      	mov	r2, r4
 800bf26:	462b      	mov	r3, r5
 800bf28:	f7f4 f920 	bl	800016c <__adddf3>
 800bf2c:	4642      	mov	r2, r8
 800bf2e:	4682      	mov	sl, r0
 800bf30:	468b      	mov	fp, r1
 800bf32:	464b      	mov	r3, r9
 800bf34:	4640      	mov	r0, r8
 800bf36:	4649      	mov	r1, r9
 800bf38:	f7f4 face 	bl	80004d8 <__aeabi_dmul>
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	4b68      	ldr	r3, [pc, #416]	@ (800c0e0 <__ieee754_pow+0x778>)
 800bf40:	4606      	mov	r6, r0
 800bf42:	460f      	mov	r7, r1
 800bf44:	f7f4 f912 	bl	800016c <__adddf3>
 800bf48:	4652      	mov	r2, sl
 800bf4a:	465b      	mov	r3, fp
 800bf4c:	f7f4 f90e 	bl	800016c <__adddf3>
 800bf50:	2400      	movs	r4, #0
 800bf52:	460d      	mov	r5, r1
 800bf54:	4622      	mov	r2, r4
 800bf56:	460b      	mov	r3, r1
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 fabc 	bl	80004d8 <__aeabi_dmul>
 800bf60:	2200      	movs	r2, #0
 800bf62:	4680      	mov	r8, r0
 800bf64:	4689      	mov	r9, r1
 800bf66:	4620      	mov	r0, r4
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4b5d      	ldr	r3, [pc, #372]	@ (800c0e0 <__ieee754_pow+0x778>)
 800bf6c:	f7f4 f8fc 	bl	8000168 <__aeabi_dsub>
 800bf70:	4632      	mov	r2, r6
 800bf72:	463b      	mov	r3, r7
 800bf74:	f7f4 f8f8 	bl	8000168 <__aeabi_dsub>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4650      	mov	r0, sl
 800bf7e:	4659      	mov	r1, fp
 800bf80:	f7f4 f8f2 	bl	8000168 <__aeabi_dsub>
 800bf84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf88:	f7f4 faa6 	bl	80004d8 <__aeabi_dmul>
 800bf8c:	4622      	mov	r2, r4
 800bf8e:	4606      	mov	r6, r0
 800bf90:	460f      	mov	r7, r1
 800bf92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf96:	462b      	mov	r3, r5
 800bf98:	f7f4 fa9e 	bl	80004d8 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	4639      	mov	r1, r7
 800bfa4:	f7f4 f8e2 	bl	800016c <__adddf3>
 800bfa8:	2400      	movs	r4, #0
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	f7f4 f8d9 	bl	800016c <__adddf3>
 800bfba:	a33d      	add	r3, pc, #244	@ (adr r3, 800c0b0 <__ieee754_pow+0x748>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	f7f4 fa88 	bl	80004d8 <__aeabi_dmul>
 800bfc8:	4642      	mov	r2, r8
 800bfca:	464b      	mov	r3, r9
 800bfcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7f4 f8c8 	bl	8000168 <__aeabi_dsub>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4630      	mov	r0, r6
 800bfde:	4639      	mov	r1, r7
 800bfe0:	f7f4 f8c2 	bl	8000168 <__aeabi_dsub>
 800bfe4:	a334      	add	r3, pc, #208	@ (adr r3, 800c0b8 <__ieee754_pow+0x750>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f7f4 fa75 	bl	80004d8 <__aeabi_dmul>
 800bfee:	a334      	add	r3, pc, #208	@ (adr r3, 800c0c0 <__ieee754_pow+0x758>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	4606      	mov	r6, r0
 800bff6:	460f      	mov	r7, r1
 800bff8:	4620      	mov	r0, r4
 800bffa:	4629      	mov	r1, r5
 800bffc:	f7f4 fa6c 	bl	80004d8 <__aeabi_dmul>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 f8b0 	bl	800016c <__adddf3>
 800c00c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c00e:	4b35      	ldr	r3, [pc, #212]	@ (800c0e4 <__ieee754_pow+0x77c>)
 800c010:	2400      	movs	r4, #0
 800c012:	4413      	add	r3, r2
 800c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c018:	f7f4 f8a8 	bl	800016c <__adddf3>
 800c01c:	4682      	mov	sl, r0
 800c01e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c020:	468b      	mov	fp, r1
 800c022:	f7f4 f9ef 	bl	8000404 <__aeabi_i2d>
 800c026:	4606      	mov	r6, r0
 800c028:	460f      	mov	r7, r1
 800c02a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c02c:	4b2e      	ldr	r3, [pc, #184]	@ (800c0e8 <__ieee754_pow+0x780>)
 800c02e:	4413      	add	r3, r2
 800c030:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c034:	4652      	mov	r2, sl
 800c036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c03a:	465b      	mov	r3, fp
 800c03c:	f7f4 f896 	bl	800016c <__adddf3>
 800c040:	4642      	mov	r2, r8
 800c042:	464b      	mov	r3, r9
 800c044:	f7f4 f892 	bl	800016c <__adddf3>
 800c048:	4632      	mov	r2, r6
 800c04a:	463b      	mov	r3, r7
 800c04c:	f7f4 f88e 	bl	800016c <__adddf3>
 800c050:	4632      	mov	r2, r6
 800c052:	463b      	mov	r3, r7
 800c054:	4620      	mov	r0, r4
 800c056:	460d      	mov	r5, r1
 800c058:	f7f4 f886 	bl	8000168 <__aeabi_dsub>
 800c05c:	4642      	mov	r2, r8
 800c05e:	464b      	mov	r3, r9
 800c060:	f7f4 f882 	bl	8000168 <__aeabi_dsub>
 800c064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c068:	f7f4 f87e 	bl	8000168 <__aeabi_dsub>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	4650      	mov	r0, sl
 800c072:	4659      	mov	r1, fp
 800c074:	e618      	b.n	800bca8 <__ieee754_pow+0x340>
 800c076:	2400      	movs	r4, #0
 800c078:	e68a      	b.n	800bd90 <__ieee754_pow+0x428>
 800c07a:	2601      	movs	r6, #1
 800c07c:	e6a0      	b.n	800bdc0 <__ieee754_pow+0x458>
 800c07e:	bf00      	nop
 800c080:	4a454eef 	.word	0x4a454eef
 800c084:	3fca7e28 	.word	0x3fca7e28
 800c088:	93c9db65 	.word	0x93c9db65
 800c08c:	3fcd864a 	.word	0x3fcd864a
 800c090:	a91d4101 	.word	0xa91d4101
 800c094:	3fd17460 	.word	0x3fd17460
 800c098:	518f264d 	.word	0x518f264d
 800c09c:	3fd55555 	.word	0x3fd55555
 800c0a0:	db6fabff 	.word	0xdb6fabff
 800c0a4:	3fdb6db6 	.word	0x3fdb6db6
 800c0a8:	33333303 	.word	0x33333303
 800c0ac:	3fe33333 	.word	0x3fe33333
 800c0b0:	e0000000 	.word	0xe0000000
 800c0b4:	3feec709 	.word	0x3feec709
 800c0b8:	dc3a03fd 	.word	0xdc3a03fd
 800c0bc:	3feec709 	.word	0x3feec709
 800c0c0:	145b01f5 	.word	0x145b01f5
 800c0c4:	be3e2fe0 	.word	0xbe3e2fe0
 800c0c8:	7ff00000 	.word	0x7ff00000
 800c0cc:	43400000 	.word	0x43400000
 800c0d0:	0003988e 	.word	0x0003988e
 800c0d4:	000bb679 	.word	0x000bb679
 800c0d8:	0800d2b8 	.word	0x0800d2b8
 800c0dc:	3ff00000 	.word	0x3ff00000
 800c0e0:	40080000 	.word	0x40080000
 800c0e4:	0800d298 	.word	0x0800d298
 800c0e8:	0800d2a8 	.word	0x0800d2a8
 800c0ec:	a39a      	add	r3, pc, #616	@ (adr r3, 800c358 <__ieee754_pow+0x9f0>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	f7f4 f839 	bl	800016c <__adddf3>
 800c0fa:	4642      	mov	r2, r8
 800c0fc:	e9cd 0100 	strd	r0, r1, [sp]
 800c100:	464b      	mov	r3, r9
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	f7f4 f82f 	bl	8000168 <__aeabi_dsub>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c112:	f7f4 fc71 	bl	80009f8 <__aeabi_dcmpgt>
 800c116:	2800      	cmp	r0, #0
 800c118:	f47f ae09 	bne.w	800bd2e <__ieee754_pow+0x3c6>
 800c11c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c120:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c124:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c128:	fa43 fa0a 	asr.w	sl, r3, sl
 800c12c:	44da      	add	sl, fp
 800c12e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c132:	489b      	ldr	r0, [pc, #620]	@ (800c3a0 <__ieee754_pow+0xa38>)
 800c134:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c138:	4108      	asrs	r0, r1
 800c13a:	ea00 030a 	and.w	r3, r0, sl
 800c13e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c142:	f1c1 0114 	rsb	r1, r1, #20
 800c146:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c14a:	4640      	mov	r0, r8
 800c14c:	fa4a fa01 	asr.w	sl, sl, r1
 800c150:	f1bb 0f00 	cmp.w	fp, #0
 800c154:	4649      	mov	r1, r9
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	bfb8      	it	lt
 800c15c:	f1ca 0a00 	rsblt	sl, sl, #0
 800c160:	f7f4 f802 	bl	8000168 <__aeabi_dsub>
 800c164:	4680      	mov	r8, r0
 800c166:	4689      	mov	r9, r1
 800c168:	2400      	movs	r4, #0
 800c16a:	4632      	mov	r2, r6
 800c16c:	463b      	mov	r3, r7
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f3 fffb 	bl	800016c <__adddf3>
 800c176:	a37a      	add	r3, pc, #488	@ (adr r3, 800c360 <__ieee754_pow+0x9f8>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	4620      	mov	r0, r4
 800c17e:	460d      	mov	r5, r1
 800c180:	f7f4 f9aa 	bl	80004d8 <__aeabi_dmul>
 800c184:	4642      	mov	r2, r8
 800c186:	464b      	mov	r3, r9
 800c188:	e9cd 0100 	strd	r0, r1, [sp]
 800c18c:	4620      	mov	r0, r4
 800c18e:	4629      	mov	r1, r5
 800c190:	f7f3 ffea 	bl	8000168 <__aeabi_dsub>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f7f3 ffe4 	bl	8000168 <__aeabi_dsub>
 800c1a0:	a371      	add	r3, pc, #452	@ (adr r3, 800c368 <__ieee754_pow+0xa00>)
 800c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a6:	f7f4 f997 	bl	80004d8 <__aeabi_dmul>
 800c1aa:	a371      	add	r3, pc, #452	@ (adr r3, 800c370 <__ieee754_pow+0xa08>)
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	4680      	mov	r8, r0
 800c1b2:	4689      	mov	r9, r1
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	f7f4 f98e 	bl	80004d8 <__aeabi_dmul>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	4649      	mov	r1, r9
 800c1c4:	f7f3 ffd2 	bl	800016c <__adddf3>
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1d4:	f7f3 ffca 	bl	800016c <__adddf3>
 800c1d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1dc:	4680      	mov	r8, r0
 800c1de:	4689      	mov	r9, r1
 800c1e0:	f7f3 ffc2 	bl	8000168 <__aeabi_dsub>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	f7f3 ffbc 	bl	8000168 <__aeabi_dsub>
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460f      	mov	r7, r1
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	4640      	mov	r0, r8
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	f7f4 f96c 	bl	80004d8 <__aeabi_dmul>
 800c200:	a35d      	add	r3, pc, #372	@ (adr r3, 800c378 <__ieee754_pow+0xa10>)
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	4604      	mov	r4, r0
 800c208:	460d      	mov	r5, r1
 800c20a:	f7f4 f965 	bl	80004d8 <__aeabi_dmul>
 800c20e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c380 <__ieee754_pow+0xa18>)
 800c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c214:	f7f3 ffa8 	bl	8000168 <__aeabi_dsub>
 800c218:	4622      	mov	r2, r4
 800c21a:	462b      	mov	r3, r5
 800c21c:	f7f4 f95c 	bl	80004d8 <__aeabi_dmul>
 800c220:	a359      	add	r3, pc, #356	@ (adr r3, 800c388 <__ieee754_pow+0xa20>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f7f3 ffa1 	bl	800016c <__adddf3>
 800c22a:	4622      	mov	r2, r4
 800c22c:	462b      	mov	r3, r5
 800c22e:	f7f4 f953 	bl	80004d8 <__aeabi_dmul>
 800c232:	a357      	add	r3, pc, #348	@ (adr r3, 800c390 <__ieee754_pow+0xa28>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f3 ff96 	bl	8000168 <__aeabi_dsub>
 800c23c:	4622      	mov	r2, r4
 800c23e:	462b      	mov	r3, r5
 800c240:	f7f4 f94a 	bl	80004d8 <__aeabi_dmul>
 800c244:	a354      	add	r3, pc, #336	@ (adr r3, 800c398 <__ieee754_pow+0xa30>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f7f3 ff8f 	bl	800016c <__adddf3>
 800c24e:	4622      	mov	r2, r4
 800c250:	462b      	mov	r3, r5
 800c252:	f7f4 f941 	bl	80004d8 <__aeabi_dmul>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4640      	mov	r0, r8
 800c25c:	4649      	mov	r1, r9
 800c25e:	f7f3 ff83 	bl	8000168 <__aeabi_dsub>
 800c262:	4604      	mov	r4, r0
 800c264:	460d      	mov	r5, r1
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	f7f4 f933 	bl	80004d8 <__aeabi_dmul>
 800c272:	2200      	movs	r2, #0
 800c274:	e9cd 0100 	strd	r0, r1, [sp]
 800c278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c27c:	4620      	mov	r0, r4
 800c27e:	4629      	mov	r1, r5
 800c280:	f7f3 ff72 	bl	8000168 <__aeabi_dsub>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c28c:	f7f4 fa4e 	bl	800072c <__aeabi_ddiv>
 800c290:	4632      	mov	r2, r6
 800c292:	4604      	mov	r4, r0
 800c294:	460d      	mov	r5, r1
 800c296:	463b      	mov	r3, r7
 800c298:	4640      	mov	r0, r8
 800c29a:	4649      	mov	r1, r9
 800c29c:	f7f4 f91c 	bl	80004d8 <__aeabi_dmul>
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	463b      	mov	r3, r7
 800c2a4:	f7f3 ff62 	bl	800016c <__adddf3>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	f7f3 ff5a 	bl	8000168 <__aeabi_dsub>
 800c2b4:	4642      	mov	r2, r8
 800c2b6:	464b      	mov	r3, r9
 800c2b8:	f7f3 ff56 	bl	8000168 <__aeabi_dsub>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	4938      	ldr	r1, [pc, #224]	@ (800c3a4 <__ieee754_pow+0xa3c>)
 800c2c4:	f7f3 ff50 	bl	8000168 <__aeabi_dsub>
 800c2c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c2cc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c2d0:	da2e      	bge.n	800c330 <__ieee754_pow+0x9c8>
 800c2d2:	4652      	mov	r2, sl
 800c2d4:	f000 f874 	bl	800c3c0 <scalbn>
 800c2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2dc:	f7ff bbed 	b.w	800baba <__ieee754_pow+0x152>
 800c2e0:	4c31      	ldr	r4, [pc, #196]	@ (800c3a8 <__ieee754_pow+0xa40>)
 800c2e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	d91a      	bls.n	800c320 <__ieee754_pow+0x9b8>
 800c2ea:	4b30      	ldr	r3, [pc, #192]	@ (800c3ac <__ieee754_pow+0xa44>)
 800c2ec:	440b      	add	r3, r1
 800c2ee:	4303      	orrs	r3, r0
 800c2f0:	d009      	beq.n	800c306 <__ieee754_pow+0x99e>
 800c2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f7f4 fb5f 	bl	80009bc <__aeabi_dcmplt>
 800c2fe:	3800      	subs	r0, #0
 800c300:	bf18      	it	ne
 800c302:	2001      	movne	r0, #1
 800c304:	e444      	b.n	800bb90 <__ieee754_pow+0x228>
 800c306:	4642      	mov	r2, r8
 800c308:	464b      	mov	r3, r9
 800c30a:	f7f3 ff2d 	bl	8000168 <__aeabi_dsub>
 800c30e:	4632      	mov	r2, r6
 800c310:	463b      	mov	r3, r7
 800c312:	f7f4 fb67 	bl	80009e4 <__aeabi_dcmpge>
 800c316:	2800      	cmp	r0, #0
 800c318:	d1eb      	bne.n	800c2f2 <__ieee754_pow+0x98a>
 800c31a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800c3b0 <__ieee754_pow+0xa48>
 800c31e:	e6fd      	b.n	800c11c <__ieee754_pow+0x7b4>
 800c320:	469a      	mov	sl, r3
 800c322:	4b24      	ldr	r3, [pc, #144]	@ (800c3b4 <__ieee754_pow+0xa4c>)
 800c324:	459a      	cmp	sl, r3
 800c326:	f63f aef9 	bhi.w	800c11c <__ieee754_pow+0x7b4>
 800c32a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c32e:	e71b      	b.n	800c168 <__ieee754_pow+0x800>
 800c330:	4621      	mov	r1, r4
 800c332:	e7d1      	b.n	800c2d8 <__ieee754_pow+0x970>
 800c334:	2000      	movs	r0, #0
 800c336:	491b      	ldr	r1, [pc, #108]	@ (800c3a4 <__ieee754_pow+0xa3c>)
 800c338:	f7ff bb34 	b.w	800b9a4 <__ieee754_pow+0x3c>
 800c33c:	2000      	movs	r0, #0
 800c33e:	2100      	movs	r1, #0
 800c340:	f7ff bb30 	b.w	800b9a4 <__ieee754_pow+0x3c>
 800c344:	4650      	mov	r0, sl
 800c346:	4659      	mov	r1, fp
 800c348:	f7ff bb2c 	b.w	800b9a4 <__ieee754_pow+0x3c>
 800c34c:	460c      	mov	r4, r1
 800c34e:	f7ff bb79 	b.w	800ba44 <__ieee754_pow+0xdc>
 800c352:	2400      	movs	r4, #0
 800c354:	f7ff bb64 	b.w	800ba20 <__ieee754_pow+0xb8>
 800c358:	652b82fe 	.word	0x652b82fe
 800c35c:	3c971547 	.word	0x3c971547
 800c360:	00000000 	.word	0x00000000
 800c364:	3fe62e43 	.word	0x3fe62e43
 800c368:	fefa39ef 	.word	0xfefa39ef
 800c36c:	3fe62e42 	.word	0x3fe62e42
 800c370:	0ca86c39 	.word	0x0ca86c39
 800c374:	be205c61 	.word	0xbe205c61
 800c378:	72bea4d0 	.word	0x72bea4d0
 800c37c:	3e663769 	.word	0x3e663769
 800c380:	c5d26bf1 	.word	0xc5d26bf1
 800c384:	3ebbbd41 	.word	0x3ebbbd41
 800c388:	af25de2c 	.word	0xaf25de2c
 800c38c:	3f11566a 	.word	0x3f11566a
 800c390:	16bebd93 	.word	0x16bebd93
 800c394:	3f66c16c 	.word	0x3f66c16c
 800c398:	5555553e 	.word	0x5555553e
 800c39c:	3fc55555 	.word	0x3fc55555
 800c3a0:	fff00000 	.word	0xfff00000
 800c3a4:	3ff00000 	.word	0x3ff00000
 800c3a8:	4090cbff 	.word	0x4090cbff
 800c3ac:	3f6f3400 	.word	0x3f6f3400
 800c3b0:	4090cc00 	.word	0x4090cc00
 800c3b4:	3fe00000 	.word	0x3fe00000

0800c3b8 <fabs>:
 800c3b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c3bc:	4619      	mov	r1, r3
 800c3be:	4770      	bx	lr

0800c3c0 <scalbn>:
 800c3c0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c3c4:	4616      	mov	r6, r2
 800c3c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3ca:	4683      	mov	fp, r0
 800c3cc:	468c      	mov	ip, r1
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	b982      	cbnz	r2, 800c3f4 <scalbn+0x34>
 800c3d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c3d6:	4303      	orrs	r3, r0
 800c3d8:	d039      	beq.n	800c44e <scalbn+0x8e>
 800c3da:	4b2f      	ldr	r3, [pc, #188]	@ (800c498 <scalbn+0xd8>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f7f4 f87b 	bl	80004d8 <__aeabi_dmul>
 800c3e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c49c <scalbn+0xdc>)
 800c3e4:	4683      	mov	fp, r0
 800c3e6:	429e      	cmp	r6, r3
 800c3e8:	468c      	mov	ip, r1
 800c3ea:	da0d      	bge.n	800c408 <scalbn+0x48>
 800c3ec:	a326      	add	r3, pc, #152	@ (adr r3, 800c488 <scalbn+0xc8>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	e01b      	b.n	800c42c <scalbn+0x6c>
 800c3f4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c3f8:	42ba      	cmp	r2, r7
 800c3fa:	d109      	bne.n	800c410 <scalbn+0x50>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	f7f3 feb5 	bl	800016c <__adddf3>
 800c402:	4683      	mov	fp, r0
 800c404:	468c      	mov	ip, r1
 800c406:	e022      	b.n	800c44e <scalbn+0x8e>
 800c408:	460b      	mov	r3, r1
 800c40a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c40e:	3a36      	subs	r2, #54	@ 0x36
 800c410:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c414:	428e      	cmp	r6, r1
 800c416:	dd0c      	ble.n	800c432 <scalbn+0x72>
 800c418:	a31d      	add	r3, pc, #116	@ (adr r3, 800c490 <scalbn+0xd0>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	461c      	mov	r4, r3
 800c420:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800c424:	f361 74df 	bfi	r4, r1, #31, #1
 800c428:	4621      	mov	r1, r4
 800c42a:	481d      	ldr	r0, [pc, #116]	@ (800c4a0 <scalbn+0xe0>)
 800c42c:	f7f4 f854 	bl	80004d8 <__aeabi_dmul>
 800c430:	e7e7      	b.n	800c402 <scalbn+0x42>
 800c432:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c436:	4432      	add	r2, r6
 800c438:	428a      	cmp	r2, r1
 800c43a:	dced      	bgt.n	800c418 <scalbn+0x58>
 800c43c:	2a00      	cmp	r2, #0
 800c43e:	dd0a      	ble.n	800c456 <scalbn+0x96>
 800c440:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c444:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c448:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c44c:	46ac      	mov	ip, r5
 800c44e:	4658      	mov	r0, fp
 800c450:	4661      	mov	r1, ip
 800c452:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c456:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c45a:	da09      	bge.n	800c470 <scalbn+0xb0>
 800c45c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c460:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c464:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c468:	480e      	ldr	r0, [pc, #56]	@ (800c4a4 <scalbn+0xe4>)
 800c46a:	f041 011f 	orr.w	r1, r1, #31
 800c46e:	e7bd      	b.n	800c3ec <scalbn+0x2c>
 800c470:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c474:	3236      	adds	r2, #54	@ 0x36
 800c476:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c47a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c47e:	4658      	mov	r0, fp
 800c480:	4629      	mov	r1, r5
 800c482:	2200      	movs	r2, #0
 800c484:	4b08      	ldr	r3, [pc, #32]	@ (800c4a8 <scalbn+0xe8>)
 800c486:	e7d1      	b.n	800c42c <scalbn+0x6c>
 800c488:	c2f8f359 	.word	0xc2f8f359
 800c48c:	01a56e1f 	.word	0x01a56e1f
 800c490:	8800759c 	.word	0x8800759c
 800c494:	7e37e43c 	.word	0x7e37e43c
 800c498:	43500000 	.word	0x43500000
 800c49c:	ffff3cb0 	.word	0xffff3cb0
 800c4a0:	8800759c 	.word	0x8800759c
 800c4a4:	c2f8f359 	.word	0xc2f8f359
 800c4a8:	3c900000 	.word	0x3c900000

0800c4ac <with_errno>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	4616      	mov	r6, r2
 800c4b4:	f7fc ff8c 	bl	80093d0 <__errno>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	6006      	str	r6, [r0, #0]
 800c4bc:	4620      	mov	r0, r4
 800c4be:	bd70      	pop	{r4, r5, r6, pc}

0800c4c0 <xflow>:
 800c4c0:	b513      	push	{r0, r1, r4, lr}
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	b10c      	cbz	r4, 800c4ce <xflow+0xe>
 800c4ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c4ce:	e9cd 2300 	strd	r2, r3, [sp]
 800c4d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4d6:	f7f3 ffff 	bl	80004d8 <__aeabi_dmul>
 800c4da:	2222      	movs	r2, #34	@ 0x22
 800c4dc:	b002      	add	sp, #8
 800c4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e2:	f7ff bfe3 	b.w	800c4ac <with_errno>

0800c4e6 <__math_uflow>:
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c4ec:	f7ff bfe8 	b.w	800c4c0 <xflow>

0800c4f0 <__math_oflow>:
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c4f6:	f7ff bfe3 	b.w	800c4c0 <xflow>
	...

0800c4fc <_init>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	bf00      	nop
 800c500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c502:	bc08      	pop	{r3}
 800c504:	469e      	mov	lr, r3
 800c506:	4770      	bx	lr

0800c508 <_fini>:
 800c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50a:	bf00      	nop
 800c50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50e:	bc08      	pop	{r3}
 800c510:	469e      	mov	lr, r3
 800c512:	4770      	bx	lr
